[{"path":"http://lindesaysh.github.io/MRSea/articles/GettingStarted_1Dsmoothing.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting Started with MRSea: One dimensional smoothing","text":"MRSea package developed analysing data collected assessing potential impacts renewable developments marine wildlife, although methods applicable many studies well. example, methods used general spatial distribution modelling analyse GPS tagging data home ranges. MRSea package primarily fits Generalised Additive Models (GAMs) using spatially adaptive model selection framework one two dimensional covariates using functions runSALSA1D runSALSA2D. functions implement methods implement methods Walker et al. (2010), Scott-Hayward et al. (2013) Scott-Hayward et al. (2022). addition, options available variety different splines estimation robust standard errors residual correlation present. class model gamMRSea created running either SALSA 1D 2D. retains within model object information regarding fitting, splineParam object panel structure (present). use summary function models returns raw robust standard errors, p-values models hypothesis test using robust standard errors. robust standard errors obtained using panel structure given (independence one panel per data point default structure given). addition functions required run models (shall go ) also variety associated functions : Covariate Checking/Selection: summary.gamMRSea (summary function models) runPartialPlots (plot 1D partial smooth relationships), anova.gamMRSea (model selection; (ANOVA) robust standard errors) Diagnostics: runACF (assess residual correlation), runsTest (assess residual correlation) runDiagnostics (plots observed vs fitted fitted vs scaled Pearsons residuals), timeInfluenceCheck/runInfluence (assessing influence data precision predictions), plotCumRes (plots cumulative residuals) Inference: .bootstrap.cress.robust (percentile based confidence intervals). getDifferences (identifying differences two prediction surfaces)","code":""},{"path":"http://lindesaysh.github.io/MRSea/articles/GettingStarted_1Dsmoothing.html","id":"fitting-a-simple-model","dir":"Articles","previous_headings":"","what":"Fitting a Simple Model","title":"Getting Started with MRSea: One dimensional smoothing","text":"data shall use example Danish offshore windfarm part MRSea package. data counts birds collected along transects number surveys years. first example, use data together assess relationship number birds sea depth.","code":"library(dplyr) library(MRSea) library(ggplot2) # load the data data(\"nysted.analysisdata\") wfdata <- filter(nysted.analysisdata, impact==0, season==1) # load the prediction grid data(\"nysted.predictdata\") ggplot() + geom_point(data=wfdata, aes(x=depth, y=response), alpha=1/5) +   xlab(\"Sea Depth (m)\") + ylab(\"Number of Birds\")"},{"path":"http://lindesaysh.github.io/MRSea/articles/GettingStarted_1Dsmoothing.html","id":"fitting-a-1d-smooth","dir":"Articles","previous_headings":"Fitting a Simple Model","what":"Fitting a 1D smooth","title":"Getting Started with MRSea: One dimensional smoothing","text":"Set initial model offset term (required) specify parameters required. add offset size segment associated bird counts. reality, bird counts particular area counts per unit area. fitness measure can one several options (AIC, BIC, QAIC, QBIC, CV). use QBIC quasi model information criterion fitting faster cross-validation. default smooth B-spline degree specified parameter. minKnots_1d specifies minimum number internal knots selected. maxKnots_1d specifies maximum number internal knots selected. Three usually good amount flexibility good start point. startKnots_1d specifies number internal knots SALSA algorithm uses initialise process. Usually good start 1 knot (puts one knot mean initially) degree specifies degree B-spline. Two quadratic. Three cubic. gaps specifies minimum gap knots. Usually fine set zero occasionally can estimation problems gap can set (units covariate). wish make predictions model fitted, prediction grid specified runSALSA1D statement. default splines fitted (B-splines) unable make predictions outside range created. example, data range depth smaller range depths prediction data, predictions made. range predictions slightly wider range data, specify nysted.predictdata running SALSA. Run SALSA: Note suppress.printout print progress runSALSA1D workspace save output log file (salsa1d.log) working directory. may find helpful suppress print begin can see happening. Use built summary function (summary.gamMRSea) look summary model. Note robust standard errors given alongside raw standard errors information regarding panels bottom output. data point panel, independence assumed two standard error columns identical.","code":"initialModel <- glm(response ~ 1 + offset(log(area)), family = \"quasipoisson\",                      data = wfdata) salsa1dlist <- list(fitnessMeasure = \"QBIC\",                      minKnots_1d = 1,                     maxKnots_1d = 3,                      startKnots_1d = 1,                      degree = 2,                     gaps = c(0)) salsa1dOutput <- runSALSA1D(initialModel = initialModel,                              salsa1dlist = salsa1dlist,                             varlist = c(\"depth\"),                             predictionData = nysted.predictdata,                              datain = wfdata,                             suppress.printout = TRUE)"},{"path":"http://lindesaysh.github.io/MRSea/articles/GettingStarted_1Dsmoothing.html","id":"model-summary","dir":"Articles","previous_headings":"Fitting a Simple Model","what":"Model Summary","title":"Getting Started with MRSea: One dimensional smoothing","text":"object salsa1doutput four components: bestModel: final model modelFits1D: list object element term fitted model. list includes information whether covariate kept model (model selection later) knot locations selected fitness measure. fitStat: fitness measure best model using fitness measure specified, cross-validation score model (model selection undertaken) dispersion parameter estimate quasi model specified. keptvarlist: list variables retained model (input model selection) can find number knots chosen variable looking modelFits1D output within salsa1dOutput querying spline parameters list model object. case, one knot selected. Assessing model fit using partial plot. can link scale:  response scale","code":"summary(salsa1dOutput$bestModel) #>  #> Call: #> gamMRSea(formula = round(response) ~ bs(depth, knots = splineParams[[2]]$knots,  #>     degree = splineParams[[2]]$degree, Boundary.knots = splineParams[[2]]$bd) +  #>     offset(log(area)), family = quasipoisson(link = log), data = wfdata,  #>     splineParams = splineParams) #>  #> Deviance Residuals:  #>     Min       1Q   Median       3Q      Max   #> -2.3787  -1.5354  -0.3498  -0.1554  13.4894   #>  #> Coefficients: #>             Estimate Std. Error Robust S.E. t value Pr(>|t|)    #> (Intercept)  -0.6883     2.2148      2.2148  -0.311  0.75602    #> s(depth)1    -5.3049     2.6998      2.6998  -1.965  0.04966 *  #> s(depth)2     6.0088     2.1481      2.1481   2.797  0.00524 ** #> s(depth)3    -0.4154     2.3382      2.3382  -0.178  0.85904    #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> (Dispersion parameter for quasipoisson family taken to be 6.276455) #>  #>     Null deviance: 4987.6  on 1153  degrees of freedom #> Residual deviance: 3482.4  on 1150  degrees of freedom #> AIC:  NA #>  #> Max Panel Size = 1 (independence assumed); Number of panels = 1154 #> Number of Fisher Scoring iterations: 6 # How many knots were chosen for depth? salsa1dOutput$bestModel$splineParams[[2]]$knots #> [1] -13.426 runPartialPlots(model = salsa1dOutput$bestModel, data = wfdata,                  varlist = 'depth',                  showKnots = TRUE,                  type='link',                  includeB0 = TRUE) #> [1] \"Making partial plots\" runPartialPlots(model = salsa1dOutput$bestModel, data = wfdata,                  varlist = 'depth',                  showKnots = TRUE, type='response',                  includeB0 = TRUE) #> [1] \"Making partial plots\""},{"path":"http://lindesaysh.github.io/MRSea/articles/GettingStarted_1Dsmoothing.html","id":"adding-a-factor-variable","dir":"Articles","previous_headings":"Fitting a Simple Model","what":"Adding a factor variable","title":"Getting Started with MRSea: One dimensional smoothing","text":"process specify factor variable initial Model. add season variable. need use full data set nysted.analysisdata.","code":"initialModel <- glm(response ~ 1 + as.factor(season) + offset(log(area)), family = \"quasipoisson\",                      data = nysted.analysisdata) salsa1dlist <- list(fitnessMeasure = \"QBIC\",                      minKnots_1d = 1,                     maxKnots_1d = 3,                      startKnots_1d = 1,                      degree = 2,                     gaps = c(0))  salsa1dOutput.f <- runSALSA1D(initialModel = initialModel,                              salsa1dlist = salsa1dlist,                             varlist = c(\"depth\"),                             predictionData = nysted.predictdata,                              datain = nysted.analysisdata,                             suppress.printout = TRUE) runPartialPlots(model = salsa1dOutput.f$bestModel,                  data = nysted.analysisdata,                  varlist.in = 'depth',                  factorlist.in = \"season\",                 showKnots = TRUE,                  type='link',                  includeB0 = TRUE) #> [1] \"Making partial plots\""},{"path":"http://lindesaysh.github.io/MRSea/articles/GettingStarted_1Dsmoothing.html","id":"multiple-smooth-covariates","dir":"Articles","previous_headings":"","what":"Multiple smooth covariates","title":"Getting Started with MRSea: One dimensional smoothing","text":"section use another renewables data set simulated vantage point survey area used testing wave energy devices. data locations grid observed birds variety tide states (Flood, Slack, Ebb), times day, months two years. first year baseline data second installation testing device. example, just look baseline data (impact). initial model, include factor variable tide state (flood ebb) offset area grid cell. picked two variables inclusion smooth terms, observation hour x-coordinate.  default include covariates B-splines. might consider observation hour cyclic spline information use cyclic natural splines. include two dimensional smooth, e.g. smooth coordinate space, see vignette ","code":"data(ns.data.re) vpdata <- filter(ns.data.re, impact==0) %>%   mutate(response = birds) head(vpdata) #>   x.pos y.pos     area floodebb observationhour GridCode Year DayOfMonth #> 1  1500 -4500 0.385253      EBB              12      a11    9         13 #> 2  1500 -4500 0.385253    FLOOD               8      a11    9         16 #> 3  1500 -4500 0.385253    FLOOD               9      a11    9         16 #> 4  1500 -4500 0.385253    FLOOD              10      a11    9         16 #> 5  1500 -4500 0.385253    FLOOD              11      a11    9         16 #> 6  1500 -4500 0.385253    FLOOD              12      a11    9         16 #>   MonthOfYear impact birds cellid response #> 1           3      0     0      1        0 #> 2           3      0     0      2        0 #> 3           3      0     0      3        0 #> 4           3      0     0      4        0 #> 5           3      0     0      5        0 #> 6           3      0     0      6        0 initialModel <- glm(response ~ 1 + as.factor(floodebb) + offset(log(area)), family = \"quasipoisson\",                      data = vpdata) varlist <- c(\"observationhour\", \"x.pos\")  salsa1dlist <- list(fitnessMeasure = \"QBIC\",                      minKnots_1d = rep(1, length(varlist)),                     maxKnots_1d = rep(1, length(varlist)),                      startKnots_1d = rep(1, length(varlist)),                      degree = rep(2, length(varlist)),                     gaps = rep(0, length(varlist)))  salsa1dOutput.multi <- runSALSA1D(initialModel = initialModel,                              salsa1dlist = salsa1dlist,                             varlist = varlist,                              datain = vpdata,                             suppress.printout = TRUE) runPartialPlots(model = salsa1dOutput.multi$bestModel,                  data = vpdata,                  varlist.in = varlist,                 factorlist.in = \"floodebb\",                 showKnots = TRUE,                  type='link',                  includeB0 = TRUE) #> [1] \"Making partial plots\""},{"path":"http://lindesaysh.github.io/MRSea/articles/GettingStarted_1Dsmoothing.html","id":"model-selection","dir":"Articles","previous_headings":"Multiple smooth covariates","what":"Model selection","title":"Getting Started with MRSea: One dimensional smoothing","text":"Fitting models described always return non-factor covariates smooth terms regardless whether sensible . optional parameter runSALSA1D allows selection smooth term (smooth, linear removed) using, default, 10-fold cross-validation (regardless fitness measure chosen). implement , set parameter removal TRUE. Using model covariates added: case can see MonthOfYear removed model altogether. can see summary model modelFits output: can see output model fit (CV score) increased baseModel one Month term included ad term kept (therefore also knots selected).  ideal world use cross-validation flexibility selection model term selection. However, using CV can computationally expensive using information criterion flexibility selection CV variable selection can efficient. factor variable? Factor variable selection currently included part SALSA1D variable selection procedure. check can manually assess model term removed. CV score increases tide state variable removed choose retain model.","code":"initialModel <- glm(response ~ 1 + floodebb + offset(log(area)), family = \"quasipoisson\",                      data = vpdata)  varlist <- c(\"observationhour\", \"x.pos\", \"y.pos\", \"MonthOfYear\")  salsa1dlist <- list(fitnessMeasure = \"QBIC\",                      minKnots_1d = rep(1, length(varlist)),                     maxKnots_1d = rep(1, length(varlist)),                      startKnots_1d = rep(1, length(varlist)),                      degree = rep(2, length(varlist)),                     gaps = rep(0, length(varlist)))  salsa1dOutput.multi.rm <- runSALSA1D(initialModel = initialModel,                              salsa1dlist = salsa1dlist,                             varlist = varlist,                              datain = vpdata,                             removal = TRUE, ##                             suppress.printout = TRUE) salsa1dOutput.multi.rm$modelFits[[5]] #> $term #> [1] \"bs(MonthOfYear, knots = splineParams[[5]]$knots, degree=splineParams[[5]]$degree, Boundary.knots=splineParams[[5]]$bd)\" #>  #> $kept #> [1] \"YES - initial\" #>  #> $basemodelformula #> gamMRSea(formula = round(response) ~ floodebb + bs(observationhour,  #>     knots = splineParams[[2]]$knots, degree = splineParams[[2]]$degree,  #>     Boundary.knots = splineParams[[2]]$bd) + bs(x.pos, knots = splineParams[[3]]$knots,  #>     degree = splineParams[[3]]$degree, Boundary.knots = splineParams[[3]]$bd) +  #>     bs(y.pos, knots = splineParams[[4]]$knots, degree = splineParams[[4]]$degree,  #>         Boundary.knots = splineParams[[4]]$bd) + bs(MonthOfYear,  #>     knots = splineParams[[5]]$knots, degree = splineParams[[5]]$degree,  #>     Boundary.knots = splineParams[[5]]$bd) + offset(log(area)),  #>     family = poisson(link = log), data = data) #>  #> $knotsSelected #> [1] 6.5 #>  #> $baseModelFits #>         CV    fitStat  #>   33.21156 3428.81680  #>  #> $modelfits #>         CV    fitStat  #>   33.31378 3409.50256 runPartialPlots(model = salsa1dOutput.multi.rm$bestModel,                  data = vpdata,                  varlist.in = salsa1dOutput.multi.rm$keptvarlist,  ##                 factorlist.in = \"floodebb\",                 showKnots = TRUE,                  type='link',                  includeB0 = TRUE) #> [1] \"Making partial plots\" fit_rmfloodeb <- update(salsa1dOutput.multi.rm$bestModel, . ~ . - floodebb)  cv.gamMRSea(modelobject = salsa1dOutput.multi.rm$bestModel,              data = vpdata,              K = 10, s.eed = 123)$delta[2] #> [1] 33.30091 cv.gamMRSea(modelobject = fit_rmfloodeb,              data = vpdata,              K = 10, s.eed = 123)$delta[2] #> [1] 33.50027"},{"path":"http://lindesaysh.github.io/MRSea/articles/GettingStarted_1Dsmoothing.html","id":"other-options","dir":"Articles","previous_headings":"Multiple smooth covariates > Model selection","what":"Other options","title":"Getting Started with MRSea: One dimensional smoothing","text":"Alternatively, can use \\(p\\)-value selection via F-test ANOVA. specifying anova using anova.gamMRSea function (class model gamMRSea model) uses marginal testing , available, use robust variance-covariance matrix testing.","code":"anova(salsa1dOutput.multi.rm$bestModel) #> Analysis of 'Wald statistic' Table #> Model: quasipoisson, link: log #> Response: round(response) #> Marginal Testing #> Max Panel Size = 1 (independence assumed); Number of panels = 13899 #>  #>                    Df     X2 P(>|Chi|)     #> floodebb            2  26.28 1.968e-06 *** #> s(observationhour)  3 139.82 < 2.2e-16 *** #> s(x.pos)            3 387.66 < 2.2e-16 *** #> s(y.pos)            3 251.18 < 2.2e-16 *** #> s(MonthOfYear)      3   5.91    0.1163     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"http://lindesaysh.github.io/MRSea/articles/GettingStarted_1Dsmoothing.html","id":"further-information","dir":"Articles","previous_headings":"","what":"Further information:","title":"Getting Started with MRSea: One dimensional smoothing","text":"information : types 1D spline Two dimensional smoothing Model Diagnostics Distance Sampling Case Study Marine Renewables","code":""},{"path":[]},{"path":"http://lindesaysh.github.io/MRSea/articles/GettingStarted_2Dsmoothing.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting Started with MRSea: Two dimensional smoothing","text":"MRSea package developed analysing data collected assessing potential impacts renewable developments marine wildlife, although methods applicable many studies well. example, methods used general spatial distribution modelling analyse GPS tagging data home ranges. MRSea package primarily fits Generalised Additive Models (GAMs) using spatially adaptive model selection framework one two dimensional covariates using functions runSALSA1D runSALSA2D. functions implement methods implement methods Walker et al. (2010), Scott-Hayward et al. (2013) Scott-Hayward et al. (2022). addition, options available variety different splines estimation robust standard errors residual correlation present. class model gamMRSea created running either SALSA 1D 2D. retains within model object information regarding fitting, splineParam object panel structure (present). use summary function models returns raw robust standard errors, p-values models hypothesis test using robust standard errors. robust standard errors obtained using panel structure given (independence one panel per data point default structure given). addition functions required run models (shall go ) also variety associated functions : Covariate Checking/Selection: summary.gamMRSea (summary function models) runPartialPlots (plot 1D partial smooth relationships), anova.gamMRSea (model selection; (ANOVA) robust standard errors) Diagnostics: runACF (assess residual correlation), runsTest (assess residual correlation) plotMeanVar (assess mean-variance relationship) runDiagnostics (plots observed vs fitted fitted vs scaled Pearsons residuals), timeInfluenceCheck/runInfluence (assessing influence data precision predictions), plotCumRes (plots cumulative residuals) Inference: .bootstrap.cress.robust (percentile based confidence intervals). getDifferences (identifying differences two prediction surfaces)","code":""},{"path":"http://lindesaysh.github.io/MRSea/articles/GettingStarted_2Dsmoothing.html","id":"fitting-a-simple-2d-model","dir":"Articles","previous_headings":"","what":"Fitting a Simple 2D Model","title":"Getting Started with MRSea: Two dimensional smoothing","text":"data shall use example Danish offshore windfarm part MRSea package. data counts birds collected along transects number surveys years. first example, use data together assess relationship number birds sea depth.","code":"library(dplyr) library(MRSea) library(ggplot2) # load the data data(\"nysted.analysisdata\") wfdata <- filter(nysted.analysisdata, impact==0, season==1) # load the prediction grid data(\"nysted.predictdata\") preddata <- filter(nysted.predictdata, impact==0, season==1) ggplot(wfdata) + geom_tile(aes(x=x.pos, y=y.pos, fill=response, height=sqrt(area), width=sqrt(area))) +   scale_fill_distiller(palette = \"Spectral\",name=\"No. Birds\") +   xlab(\"Easting (km)\") + ylab(\"Northing (km)\") + theme_bw()"},{"path":"http://lindesaysh.github.io/MRSea/articles/GettingStarted_2Dsmoothing.html","id":"fitting-a-2d-smooth","dir":"Articles","previous_headings":"Fitting a Simple 2D Model","what":"Fitting a 2D smooth","title":"Getting Started with MRSea: Two dimensional smoothing","text":"Set initial model offset term (required) specify parameters required. add offset size segment associated bird counts. reality, bird counts particular area counts per unit area. First must create grid knots used candidate knot locations. locations subset data locations space-filled good coverage across two-dimensional space. Depending size data set take slightly different every time run suggest using seed perhaps saving knotgrid file. Plot showing candidate knot locations red raw data locations black. makeDists function creates two matrices. One distances data point knot point (dataDist) one distances knot point knot points (knotDist). Next specify parameters needed run SALSA2D algorithm select number location knots smooth x y coordinates. Distance matrices (data knots knot knots), fit statistic min, max start knots. fitness measure can one several options (AIC, BIC, QAIC, QBIC, CV). use QBIC quasi model information criterion fitting faster cross-validation. knotgrid grid candidate knot locations created. startKnots specifies number knots SALSA2D algorithm uses initialise process. starting number depends bit size/heterogeneity surface. ’d suggest starting 10 knots get feel outputs. minKnots specifies minimum number knots selected. must smaller startKnots maxKnots specifies maximum number knots selected. must larger startKnots. gap specifies minimum gap knots. Usually fine set zero occasionally can estimation problems gap can set (units covariate). Run SALSA2D find appropriate number location knots 2D smooth term x.pos y.pos. model inputted SALSA2D algorithm initial model. model univariate smooth terms, can put output best model SALSA1D algorithm step.default basis function gaussian can also use exponential specifying basis parameter. Note suppress.printout print progress runSALSA2D workspace save output log file (salsa2d.log) working directory. may find helpful suppress print begin can see happening. Use built summary function (summary.gamMRSea) look summary model. Note robust standard errors given alongside raw standard errors information regarding panels bottom output. data point panel, independence assumed two standard error columns identical.","code":"initialModel <- glm(response ~ 1 + offset(log(area)), family = \"quasipoisson\",                      data = wfdata) set.seed(123) knotgrid<- getKnotgrid(coordData = cbind(wfdata$x.pos, wfdata$y.pos),                        numKnots = 300,                        plot = TRUE) distMats <- makeDists(cbind(wfdata$x.pos, wfdata$y.pos), knotgrid) # make parameter set for running salsa2d salsa2dlist<-list(fitnessMeasure = 'QBIC',                   knotgrid = knotgrid,                   startKnots=10,                   minKnots=4,                   maxKnots=15,                   gap=0) salsa2dOutput<-runSALSA2D(model = initialModel,                           salsa2dlist = salsa2dlist,                           d2k=distMats$dataDist,                           k2k=distMats$knotDist,                           suppress.printout = TRUE)"},{"path":"http://lindesaysh.github.io/MRSea/articles/GettingStarted_2Dsmoothing.html","id":"model-summary","dir":"Articles","previous_headings":"Fitting a Simple 2D Model","what":"Model Summary","title":"Getting Started with MRSea: Two dimensional smoothing","text":"object salsa2dOutput two components: bestModel: final model fitStat: fitness measure best model using fitness measure specified. can find number knots chosen variable querying spline parameters list model object.two dimensional smooth always first element spline parameters list. case, 6 knots selected.","code":"summary(salsa2dOutput$bestModel) #>  #> Call: #> gamMRSea(formula = response ~ LRF.g(radiusIndices, dists, radii,  #>     aR) + offset(log(area)), family = \"quasipoisson\", data = wfdata,  #>     splineParams = splineParams) #>  #> Deviance Residuals:  #>     Min       1Q   Median       3Q      Max   #> -3.7456  -1.1390  -0.2942  -0.0308  15.5232   #>  #> Coefficients: #>                                          Estimate Std. Error Robust S.E. #> (Intercept)                               -12.068      1.662       1.662 #> LRF.g(radiusIndices, dists, radii, aR)b1   11.675      1.290       1.290 #> LRF.g(radiusIndices, dists, radii, aR)b2  -35.043      6.107       6.107 #> LRF.g(radiusIndices, dists, radii, aR)b3   20.495      2.604       2.604 #> LRF.g(radiusIndices, dists, radii, aR)b4   12.587      1.602       1.602 #> LRF.g(radiusIndices, dists, radii, aR)b5   52.913      7.905       7.905 #> LRF.g(radiusIndices, dists, radii, aR)b6  -28.821      4.581       4.581 #>                                          t value Pr(>|t|)     #> (Intercept)                               -7.261 7.05e-13 *** #> LRF.g(radiusIndices, dists, radii, aR)b1   9.048  < 2e-16 *** #> LRF.g(radiusIndices, dists, radii, aR)b2  -5.738 1.23e-08 *** #> LRF.g(radiusIndices, dists, radii, aR)b3   7.871 8.08e-15 *** #> LRF.g(radiusIndices, dists, radii, aR)b4   7.856 9.08e-15 *** #> LRF.g(radiusIndices, dists, radii, aR)b5   6.694 3.40e-11 *** #> LRF.g(radiusIndices, dists, radii, aR)b6  -6.291 4.48e-10 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> (Dispersion parameter for quasipoisson family taken to be 8.001567) #>  #>     Null deviance: 4987.6  on 1153  degrees of freedom #> Residual deviance: 3037.2  on 1147  degrees of freedom #> AIC:  NA #>  #> Max Panel Size = 1 (independence assumed); Number of panels = 1154 #> Number of Fisher Scoring iterations: 7 # How many knots were chosen for depth? salsa2dOutput$bestModel$splineParams[[1]]$knotPos #> [1]  54 136 275 111 299 102"},{"path":"http://lindesaysh.github.io/MRSea/articles/GettingStarted_2Dsmoothing.html","id":"fitted-surface","dir":"Articles","previous_headings":"Fitting a Simple 2D Model","what":"Fitted surface","title":"Getting Started with MRSea: Two dimensional smoothing","text":"","code":"ggplot(wfdata) + geom_tile(aes(x=x.pos, y=y.pos, fill=fitted(salsa2dOutput$bestModel), height=sqrt(area), width=sqrt(area))) +   scale_fill_distiller(palette = \"Spectral\",name=\"No. Birds\") +   xlab(\"Easting (km)\") + ylab(\"Northing (km)\") + theme_bw()"},{"path":"http://lindesaysh.github.io/MRSea/articles/GettingStarted_2Dsmoothing.html","id":"making-predictions","dir":"Articles","previous_headings":"Fitting a Simple 2D Model","what":"Making predictions","title":"Getting Started with MRSea: Two dimensional smoothing","text":"make predictions, need calculate distances prediction point knot point. can use makeDists function time don’t need knot knot matrix therefore specify knotmat = FALSE.","code":"preddist<-makeDists(cbind(preddata$x.pos, preddata$y.pos),                  knotgrid, knotmat=FALSE)$dataDist   # make predictions on response scale preds<-predict(newdata = preddata,                g2k = preddist,                object = salsa2dOutput$bestModel) ggplot(preddata) + geom_tile(aes(x=x.pos, y=y.pos, fill=preds, height=sqrt(area), width=sqrt(area))) +   scale_fill_distiller(palette = \"Spectral\",name=\"No. Birds\") +   xlab(\"Easting (km)\") + ylab(\"Northing (km)\") + theme_bw()"},{"path":"http://lindesaysh.github.io/MRSea/articles/GettingStarted_2Dsmoothing.html","id":"interaction-terms","dir":"Articles","previous_headings":"Fitting a Simple 2D Model","what":"Interaction terms:","title":"Getting Started with MRSea: Two dimensional smoothing","text":"simplest way specify interaction term add salsa2dlist object. example use case study vignette. limitation method knot locations different levels (e.g. impact) locations coefficients permitted change. may always sensible option especially spatial range different factor levels varies. case, alternative allows locations differ. example interactions vignette.","code":"salsa2dlist<-list(fitnessMeasure = 'QBIC',                    knotgrid = knotgrid,                   startKnots=10,                    minKnots=4,                    maxKnots=15,                    gap=0,                    interactionTerm=\"as.factor(impact)\")"},{"path":"http://lindesaysh.github.io/MRSea/articles/GettingStarted_2Dsmoothing.html","id":"further-information","dir":"Articles","previous_headings":"","what":"Further information:","title":"Getting Started with MRSea: Two dimensional smoothing","text":"information : types 2D spline Model Diagnostics Distance Sampling Marine Renewables baseline characterisataion Case Study. complex interactions. Using non Euclidean distances measure similarity points. example, using geodesic distances represent “fish swims” rather “crow flies”. takes account distances around exclusion areas coastlines lakes. See ","code":""},{"path":[]},{"path":"http://lindesaysh.github.io/MRSea/articles/web/DistanceSampling.html","id":"very-brief-introduction-to-distance-sampling-using-the-mrds-library","dir":"Articles > Web","previous_headings":"","what":"(Very) Brief Introduction to Distance Sampling using the mrds library","title":"Distance Sampling","text":"Load data fit detection function (Distance Sampling) first step uses mrds R package fit detection function model. information using package can found help files also Distance Sampling web pages fit simple half normal detection function covariates one season covariate may affect detectability animals. MRSea functions use generate adjusted counts per segment best data analysis already segmented including zero segments. row either zero segment (object distance set NA) detection segment label (may one detection per segment). columns data follows: transect.id Identifier individual visits transects transect.label Labels transects season Numerical indicator four different seasons impact Numerical indicator (0) (1) impact segment.id Identifier individual visits segment -segment.label Label segments length Length segment km x.pos spatial location horizontal axis UTMs y.pos spatial location vertical axis UTMs depth Depth m object Id detected object distance Perpendicular distance line Additional observation level covariates may present glare, sea state observer detection data information object distance columns relating sightings. Simple detection function model covariates Detection function model one covariate, season. Visualising detection functions season  BIC output shows simple covariate detection function model preferred. Adjust sightings detectability First adjusted counts detection estimated using create.NHAT function MRSea package. adjustment number observed individuals divided probability detection. Additionally, area (km) column also created using segment length truncation distance. create.count.data function used collapse data one row per segment. estimated counts summed within segment distance related variables removed (distance, size, object). availability information present, adjustments may also made . count data now ready analysis using main MRSea functions. Specifically, spatially adaptive smoothing one two dimensions.","code":"library(mrds) # we will use the dataset with a known re-distribution of animals data(dis.data.re, package = \"MRSea\") dis.data<-dis.data.re head(dis.data) #>   transect.id transect.label season impact segment.id segment.label length #> 1           1              1      1      0          1           1-1  0.306 #> 2           1              1      1      0          2           1-2  0.500 #> 3           1              1      1      0          3           1-3  0.500 #> 4           1              1      1      0          4           1-4  0.500 #> 5           1              1      1      0          5           1-5  0.500 #> 6           1              1      1      0          6           1-6  0.500 #>    x.pos   y.pos   depth object distance #> 1 656.25 6043.75 -27.359     NA       NA #> 2 656.25 6044.25 -27.561     NA       NA #> 3 656.25 6044.75 -28.608     NA       NA #> 4 656.25 6045.25 -27.999     NA       NA #> 5 656.25 6045.75 -27.519     NA       NA #> 6 656.25 6046.25 -27.223     NA       NA library(dplyr) filter(dis.data, !is.na(distance)) %>% head #>   transect.id transect.label season impact segment.id segment.label length #> 1           1              1      1      0         24          1-24    0.5 #> 2           1              1      1      0         25          1-25    0.5 #> 3           3              3      1      0         55           3-3    0.5 #> 4           3              3      1      0         72          3-20    0.5 #> 5           3              3      1      0         75          3-23    0.5 #> 6           3              3      1      0         75          3-23    0.5 #>    x.pos   y.pos   depth object  distance #> 1 656.25 6055.25  -5.245      1 119.62272 #> 2 656.25 6055.75  -4.069      2  49.11847 #> 3 659.75 6041.75 -27.232      3 186.47936 #> 4 659.75 6050.25  -8.381      4 172.99776 #> 5 659.75 6051.75  -7.756      5  61.88337 #> 6 659.75 6051.75  -7.756      6 139.96327 result <- ddf(dsmodel=~mcds(key=\"hn\", formula=~1),               data = dis.data, method=\"ds\",                meta.data=list(width=250)) summary(result) #>  #> Summary for ds object #> Number of observations :  2373  #> Distance range         :  0  -  250  #> AIC                    :  25446.68  #>  #> Detection function: #>  Half-normal key function  #>  #> Detection function parameters  #> Scale coefficient(s):  #>             estimate         se #> (Intercept) 4.754715 0.02068035 #>  #>                         Estimate           SE         CV #> Average p              0.5639473  0.009624525 0.01706636 #> N in covered region 4207.8400478 91.709328911 0.02179487 result.season <- ddf(dsmodel=~mcds(key=\"hn\", formula=~season),               data = dis.data, method=\"ds\",                meta.data=list(width=250)) summary(result.season) #>  #> Summary for ds object #> Number of observations :  2373  #> Distance range         :  0  -  250  #> AIC                    :  25443.56  #>  #> Detection function: #>  Half-normal key function  #>  #> Detection function parameters  #> Scale coefficient(s):  #>                estimate         se #> (Intercept)  4.83166479 0.04092153 #> season      -0.03701706 0.01610680 #>  #>                         Estimate           SE         CV #> Average p              0.5632936  0.009633876 0.01710276 #> N in covered region 4212.7235384 91.994822304 0.02183737 par(mfrow=c(2,2)) plot(result.season, subset = season==1) plot(result.season, subset = season==2) plot(result.season, subset = season==3) plot(result.season, subset = season==4) BIC(result) #> [1] 25452.45 BIC(result.season) #> [1] 25455.11 library(MRSea) dis.data <- create.NHAT(dis.data,result) count.data <- create.count.data(dis.data) #> [1] \"transect.id\" #> [1] \"transect.label\" #> [1] \"season\" #> [1] \"impact\" #> [1] \"segment.id\" #> [1] \"segment.label\" #> [1] \"length\" #> [1] \"x.pos\" #> [1] \"y.pos\" #> [1] \"depth\" #> [1] \"area\""},{"path":[]},{"path":"http://lindesaysh.github.io/MRSea/articles/web/FittingDifferentSplines_MRSea.html","id":"starting-point","dir":"Articles > Web","previous_headings":"One dimensional Smoothing","what":"Starting point","title":"Types of Uni and Bivariate Splines","text":"Load data Specify variable interest. case pick month year. Fit initial model. simplicity fit intercept model.","code":"library(MRSea) library(dplyr) library(ggplot2) # load data data(ns.data.re) ns.data.re$response<- ns.data.re$birds varlist=c('MonthOfYear') initialModel<- glm(response ~ 1, family='quasipoisson',data=ns.data.re)"},{"path":"http://lindesaysh.github.io/MRSea/articles/web/FittingDifferentSplines_MRSea.html","id":"default-b-spline","dir":"Articles > Web","previous_headings":"One dimensional Smoothing","what":"Default: B-spline","title":"Types of Uni and Bivariate Splines","text":"section shows fitting quadratic B-spline. linear cubic B-splines preferred, change degree 1 3 respectively. default setting B-splines. splines parameter salsa1dlist specified B-splines fitted. shown add splines parameter salsa1dlist object. Note: chosen QBIC chosing number location knots relatively quick useful testing. (Q Quasi-Poisson model).","code":"# set some input information for SALSA salsa1dlist<-list(fitnessMeasure = 'QBIC',                    minKnots_1d = c(1),                    maxKnots_1d = c(3),                    startKnots_1d = c(1),                    degree = c(2),                   gaps = c(0),                   splines = c(\"bs\")) # run SALSA salsa1dOutput<-runSALSA1D(initialModel,                            salsa1dlist,                            varlist = varlist,                            datain = ns.data.re,                           suppress.printout = TRUE) runPartialPlots(salsa1dOutput$bestModel, data=ns.data.re,                  varlist.in = varlist, showKnots = TRUE) #> [1] \"Making partial plots\""},{"path":"http://lindesaysh.github.io/MRSea/articles/web/FittingDifferentSplines_MRSea.html","id":"cyclic-spline","dir":"Articles > Web","previous_headings":"One dimensional Smoothing","what":"Cyclic spline","title":"Types of Uni and Bivariate Splines","text":"fit cyclic spline, splines parameter set “cc”. change order cyclic spline, can use degree parameter (order = degree +1). Note even though minimum knots set 1, cyclic spline minimum allowed 3. changed automatically.","code":"#set some input info for SALSA salsa1dlist<-list(fitnessMeasure = 'QBIC',                    minKnots_1d = c(1),                    maxKnots_1d = c(3),                    startKnots_1d = c(1),                    degree = c(2),                   gaps = c(0),                   splines = c(\"cc\")) # run SALSA salsa1dOutput.cc<-runSALSA1D(initialModel,                            salsa1dlist,                            varlist = varlist,                            datain = ns.data.re,                           suppress.printout = TRUE) runPartialPlots(salsa1dOutput.cc$bestModel, data=ns.data.re,                  varlist.in = varlist, showKnots = TRUE) #> [1] \"Making partial plots\""},{"path":"http://lindesaysh.github.io/MRSea/articles/web/FittingDifferentSplines_MRSea.html","id":"natural-cubic-spline","dir":"Articles > Web","previous_headings":"One dimensional Smoothing","what":"Natural Cubic spline","title":"Types of Uni and Bivariate Splines","text":"fit natural spline, splines parameter set “ns”. Note degree necessary spline type must still specified salsa1dlist object. can use NA .","code":"#set some input info for SALSA salsa1dlist<-list(fitnessMeasure = 'QBIC',                    minKnots_1d = c(1),                    maxKnots_1d = c(3),                    startKnots_1d = c(1),                    degree = c(NA),                   gaps = c(0),                   splines = c(\"ns\")) # run SALSA salsa1dOutput.ns<-runSALSA1D(initialModel,                            salsa1dlist,                            varlist = varlist,                            datain = ns.data.re,                           suppress.printout = TRUE) runPartialPlots(salsa1dOutput.ns$bestModel, data=ns.data.re,                  varlist.in = varlist, showKnots = TRUE) #> [1] \"Making partial plots\""},{"path":"http://lindesaysh.github.io/MRSea/articles/web/FittingDifferentSplines_MRSea.html","id":"multiple-different-splines","dir":"Articles > Web","previous_headings":"One dimensional Smoothing","what":"Multiple different splines","title":"Types of Uni and Bivariate Splines","text":"fit one type spline different variables, specified splines parameter way specify starting knots example.","code":"varlist=c('MonthOfYear', \"x.pos\") #set some input info for SALSA salsa1dlist<-list(fitnessMeasure = 'QBIC',                    minKnots_1d = c(1,1),                    maxKnots_1d = c(3,3),                    startKnots_1d = c(1,1),                    degree = c(2, 2),                   gaps = c(0, 0),                   splines = c(\"cc\", \"bs\")) # run SALSA salsa1dOutput.multi<-runSALSA1D(initialModel,                            salsa1dlist,                            varlist = varlist,                            datain = ns.data.re,                           suppress.printout = TRUE) runPartialPlots(salsa1dOutput.multi$bestModel, data=ns.data.re,                  varlist.in = varlist, showKnots = TRUE) #> [1] \"Making partial plots\""},{"path":[]},{"path":"http://lindesaysh.github.io/MRSea/articles/web/FittingDifferentSplines_MRSea.html","id":"starting-point-1","dir":"Articles > Web","previous_headings":"Two dimensional Smoothing","what":"Starting point","title":"Types of Uni and Bivariate Splines","text":"starting point one dimensional splines two dimensional smooth want. Load data specify variable interest. case pick month year. Fit initial model. simplicity fit intercept model.","code":"# load data baselinedata <- filter(nysted.analysisdata, impact == 1, season == 1) initialModel<- glm(response ~ 1, family='quasipoisson',data=baselinedata) kg <- getKnotgrid(baselinedata[, c(\"x.pos\", \"y.pos\")], numKnots = 300, plot = TRUE) # make distance matrices for datatoknots and knottoknots distMats<-makeDists(baselinedata[, c(\"x.pos\", \"y.pos\")], kg) # make prediction distance matrix.  preddata <- filter(nysted.predictdata, impact == 0, season == 1) p2k <-makeDists(preddata[, c(\"x.pos\", \"y.pos\")], kg, knotmat = FALSE)$dataDist"},{"path":"http://lindesaysh.github.io/MRSea/articles/web/FittingDifferentSplines_MRSea.html","id":"default-gaussian-radial-basis","dir":"Articles > Web","previous_headings":"Two dimensional Smoothing","what":"Default: Gaussian Radial Basis","title":"Types of Uni and Bivariate Splines","text":"uses Gaussian radial basis implemented using LRF.g(). default need specified.","code":"# make parameter set for running salsa2D salsa2dlist<-list(fitnessMeasure = 'QBIC',                    knotgrid = na.omit(kg),                   startKnots=10,                    minKnots=2,                    maxKnots=20,                    gap=0) salsa2dOutput<-runSALSA2D(initialModel,                           salsa2dlist,                            d2k=distMats$dataDist,                           k2k=distMats$knotDist,                           basis = \"gaussian\", ##                           suppress.printout = TRUE) preddata$preds.g <- predict(object = salsa2dOutput$bestModel,                              newdata = preddata, g2k = p2k)  ggplot() +   geom_tile(data=preddata, aes(x.pos, y.pos, fill=preds.g,                                 height=sqrt(area), width=sqrt(area))) +    xlab(\"Easting (km)\") + ylab(\"Northing (km)\") + coord_equal() +   theme_bw() + ggtitle(\"Gaussian Basis\") +   scale_fill_distiller(palette = \"Spectral\",name=\"Animal Counts\")"},{"path":"http://lindesaysh.github.io/MRSea/articles/web/FittingDifferentSplines_MRSea.html","id":"exponential-basis","dir":"Articles > Web","previous_headings":"Two dimensional Smoothing","what":"Exponential Basis","title":"Types of Uni and Bivariate Splines","text":"uses exponential radial basis implemented using LRF.e(). peaked knot gaussian reason used larger number start knots.","code":"# make parameter set for running salsa2D salsa2dlist<-list(fitnessMeasure = 'QBIC',                    knotgrid = na.omit(kg),                   startKnots=10, ##                   minKnots=2,                    maxKnots=20,                    gap=0) salsa2dOutput.exp<-runSALSA2D(initialModel,                           salsa2dlist,                            d2k=distMats$dataDist,                           k2k=distMats$knotDist,                           basis = \"exponential\", ##                           suppress.printout = TRUE) preddata$preds.e <- predict(object = salsa2dOutput.exp$bestModel,                              newdata = preddata, g2k = p2k)  ggplot() +   geom_tile(data=preddata, aes(x.pos, y.pos, fill=preds.e,                                height=sqrt(area), width=sqrt(area))) +    xlab(\"Easting (km)\") + ylab(\"Northing (km)\") + coord_equal() +   theme_bw() + ggtitle(\"Exponential Basis\") +   scale_fill_distiller(palette = \"Spectral\",name=\"Animal Counts\")"},{"path":"http://lindesaysh.github.io/MRSea/articles/web/FittingDifferentSplines_MRSea.html","id":"raw-data-for-reference","dir":"Articles > Web","previous_headings":"Two dimensional Smoothing","what":"Raw data for reference","title":"Types of Uni and Bivariate Splines","text":"","code":"ggplot() +      geom_tile(data=baselinedata, aes(x.pos, y.pos, fill=response, height=sqrt(area), width=sqrt(area))) +       xlab(\"Easting (km)\") + ylab(\"Northing (km)\") + coord_equal() +      theme_bw() + ggtitle(\"Raw Data\") +      scale_fill_distiller(palette = \"Spectral\",name=\"Animal Counts\")"},{"path":"http://lindesaysh.github.io/MRSea/articles/web/Interactions_salsa2d_MRSea.html","id":"load-data","dir":"Articles > Web","previous_headings":"","what":"Load data","title":"MRSea: 2D Interaction Example","text":"Load distance sampling corrected Nysted data package. Fit initial Model data. include impact variable factor along offset cell area.","code":"data(\"nysted.analysisdata\") mydata<-nysted.analysisdata # renamed just to be less typing! mydata$blockid <- paste(mydata$transect.id, mydata$season, mydata$impact,sep = \"\")"},{"path":"http://lindesaysh.github.io/MRSea/articles/web/Interactions_salsa2d_MRSea.html","id":"make-distance-matrices","dir":"Articles > Web","previous_headings":"","what":"Make distance matrices","title":"MRSea: 2D Interaction Example","text":"Create grid knots used possible knot locations. Create one grid one . complete spatial overlap two impact levels, chosen number candidate knot locations . Figure showing candidate knot locations interaction levels myknots object three columns (x, y impact) also useful object just coordinates. Create distances knots data. future point, ability function package.","code":"myknots <- selectFctrKnots(mydata[, c(\"x.pos\", \"y.pos\", \"impact\")],                             nk=150,                            s.eed=543) head(myknots) #>    x.pos   y.pos impact #> 1 659.75 6042.25      0 #> 2 706.25 6049.75      0 #> 3 688.25 6037.75      0 #> 4 693.75 6050.25      0 #> 5 658.25 6044.25      0 #> 6 678.25 6052.25      0 require(ggplot2) ggplot() +   geom_point(data=mydata, aes(x.pos, y.pos)) +   geom_point(data=myknots, aes(x.pos, y.pos), colour='red') +   facet_wrap(~impact, nrow=2) +   theme_bw() + xlab('Easting (Km)') + ylab('Northing (Km)') +     coord_equal() kg<-myknots[,1:2] require(dplyr) dists<-makeDists(datacoords = mydata[,c('x.pos', 'y.pos', 'impact')],                   knotcoords = myknots,                   knotmat = TRUE) d2k = dists$dataDist k2k = dists$knotDist"},{"path":"http://lindesaysh.github.io/MRSea/articles/web/Interactions_salsa2d_MRSea.html","id":"analysis","dir":"Articles > Web","previous_headings":"","what":"Analysis","title":"MRSea: 2D Interaction Example","text":"Run SALSA2D find appropriate number location knots 2D smooth term x.pos y.pos. speed fitting, specifying small number knots quick fitness measure, QAIC. Remember using distance matrix act interaction, specify interaction salsa2dlist object include impact main effect initial model. Additionally, knotgrid specified salsa2dlist must three columns (x, y, interaction level). Note setting startKnots = 10, 10 knots space-filled across combined grids may lead unequal starting positions biased towards one factor level. avoid , can manually specify starting locations. described end document. Assess output location selected knots.  can find knot locations chosen querying model object.","code":"initialModel <- glm(response ~ as.factor(season) + as.factor(impact)                      + offset(log(area)), family = \"quasipoisson\",                      data = mydata) # make parameter set for running salsa2d salsa2dlist<-list(fitnessMeasure = \"QAIC\",                    knotgrid = myknots,                    startKnots=10,                    minKnots=4,                    maxKnots=12) salsa2dOutput<-runSALSA2D(model = initialModel,                            salsa2dlist = salsa2dlist,                           d2k=d2k,k2k=k2k,                           suppress.printout = TRUE) mymodel<-salsa2dOutput$bestModel chosenknots <- myknots[mymodel$splineParams[[1]]$knotPos,] count(chosenknots, impact) #>   impact n #> 1      0 7 #> 2      1 3 #startingknots <- myknots[startknotlocs,] imp.labs <- c(\"Pre-Construction\", \"Post-Construction\") names(imp.labs) <- c(\"0\", \"1\")  # quick look to see what was chosen ggplot(myknots) +   geom_point(aes(x=x.pos, y=y.pos)) +   geom_point(aes(x=x.pos, y=y.pos, size=2), data=chosenknots, alpha=4/5,               show.legend = FALSE, shape=5) +   theme_bw() + xlab('Easting (Km)') + ylab('Northing (Km)') +    coord_equal() +   facet_wrap(~impact, ncol=1, labeller = labeller(impact=imp.labs)) mymodel$splineParams[[1]]$knotPos #>  [1] 157 162 131 117 159  47  23  24 109  13 cv.gamMRSea(mydata, mymodel, K=10, s.eed = 1)$delta[1] #> [1] 5.942072"},{"path":"http://lindesaysh.github.io/MRSea/articles/web/Interactions_salsa2d_MRSea.html","id":"making-predictions","dir":"Articles > Web","previous_headings":"","what":"Making predictions","title":"MRSea: 2D Interaction Example","text":"make predictions grid, also need create prediction distance matrix way data . Plotting predictions pre post impact:  , since simulated data, can also look truth:","code":"data(\"nysted.predictdata\") datacoords<-nysted.predictdata[,c('x.pos', 'y.pos', 'impact')]  dists<-makeDists(datacoords = datacoords,                   knotcoords = myknots,                   knotmat = FALSE) g2k = dists$dataDist # make predictions on response scale nysted.predictdata$preds<-predict.gamMRSea(newdata = nysted.predictdata,                                             g2k =g2k,                                             object = mymodel) ggplot() +   geom_tile(aes(x=x.pos, y=y.pos, fill=preds), height=0.5, width=0.5,             data=filter(nysted.predictdata, season==1)) +   coord_equal()+   scale_fill_distiller(palette = \"Spectral\",name=\"Estimated Count\") +   theme_bw() +   xlab('Easting (Km)') + ylab('Northing (Km)') +   facet_wrap(~impact, ncol=1, labeller = labeller(impact = imp.labs)) ggplot() +   geom_tile(aes(x=x.pos, y=y.pos, fill=truth.re), height=0.5, width=0.5,             data=filter(nysted.predictdata, season==1)) +   coord_equal()+   scale_fill_distiller(palette = \"Spectral\",name=\"Estimated Count\") +   theme_bw() +   xlab('Easting (Km)') + ylab('Northing (Km)') +   facet_wrap(~impact, ncol=1, labeller = labeller(impact = imp.labs))"},{"path":"http://lindesaysh.github.io/MRSea/articles/web/Interactions_salsa2d_MRSea.html","id":"choosing-your-own-starting-knot-locations","dir":"Articles > Web","previous_headings":"","what":"Choosing your own starting knot locations","title":"MRSea: 2D Interaction Example","text":"analysis, SALSA algorithm space-fill across knot locations initialise first set knots. mean initial step, one levels gets starting locations. wish even set starting locations, can specify locations. specifying 5 locations level interaction. set model little different included ## indicate lines changed/added. , can look see model placed knots. starting locations grey box cross final locations red diamonds Black dots candidate knot locations, grey squares crosses initial knot locations red diamonds final knot locations. model better earlier one used space-filled selection knots starting locations. However, bear mind models using simplistic number start knots improved. Plotting predictions pre post impact:","code":"startknotlocs <- selectFctrStartk(myknots, 5, s.eed = 1) #> [1] \"Greater than 1 optimal design; keeping first one......\" #> [1] \"Greater than 1 optimal design; keeping first one......\" salsa2dlist <- list(fitnessMeasure = 'QAIC',                     knotgrid = myknots,                     startKnots = length(startknotlocs), ##                     minKnots = 4,                     maxKnots = 12,                     gap = 0) salsa2doutput_stkn<-runSALSA2D(model = initialModel,                                  salsa2dlist = salsa2dlist,                                  d2k= d2k, k2k = k2k,                                  initialise=FALSE,  ##                                 initialKnPos = startknotlocs, ##                                 suppress.printout = TRUE) mymodel_sk<-salsa2doutput_stkn$bestModel chosenknots_sk <- myknots[mymodel_sk$splineParams[[1]]$knotPos,] startingknots <- myknots[startknotlocs,] count(chosenknots_sk, impact) #>   impact n #> 1      0 7 #> 2      1 5 # quick look to see what was chosen ggplot(myknots) +   geom_point(aes(x=x.pos, y=y.pos)) +   geom_point(aes(x=x.pos, y=y.pos, size=2),data=chosenknots_sk, alpha=4/5,               show.legend = FALSE, shape=5, colour = 'firebrick') +   geom_point(aes(x=x.pos, y=y.pos, size=2), shape = 7, data=startingknots,               colour = 'darkgrey', show.legend = FALSE) +   theme_bw() + xlab('Easting (Km)') + ylab('Northing (Km)') +    coord_equal() +   facet_wrap(~impact, ncol=1, labeller = labeller(impact=imp.labs)) cv.gamMRSea(mydata, mymodel_sk, K=10, s.eed=1)$delta[1] #> [1] 5.940744 # make predictions on response scale nysted.predictdata$preds_sk<-predict.gamMRSea(newdata = nysted.predictdata,                                             g2k =g2k,                                             object = mymodel_sk) ggplot() +   geom_tile(aes(x=x.pos, y=y.pos, fill=preds_sk), height=0.5, width=0.5,             data=filter(nysted.predictdata, season==1)) +   coord_equal()+   scale_fill_distiller(palette = \"Spectral\",name=\"Estimated Count\") +   theme_bw() +   xlab('Easting (Km)') + ylab('Northing (Km)') +   facet_wrap(~impact, ncol=1, labeller = labeller(impact = imp.labs))"},{"path":"http://lindesaysh.github.io/MRSea/articles/web/IntroductiontoMRSea.html","id":"introduction","dir":"Articles > Web","previous_headings":"","what":"Introduction","title":"MRSea: Marine Renewables Strategic Environmental Assessment","text":"MRSea stands Marine Renewables Strategic Environmental Assessment. package developed analysing data collected assessing potential impacts renewable developments marine wildlife, although methods applicable studies wish fit uni bivariate smooths. package enables fitting spatially adaptive regression splines using two Spatially Adaptive Local Smoothing Algorithms (SALSA): Generalised additive model framework using exponential family distributions (e.g. Gaussian, Poisson, Binomial, Gamma) Tweedie distribution. Univariate smoothing using B-splines, Natural cubic splines cyclic cubic splines Bivariate smoothing using Gaussian exponential radial basis functions Euclidean geodesic distance metric similarity 2D points (distance component radial basis functions) Direct estimation robust standard errors case residual correlation Additionally development versions point process multinomial responses additional information regarding methods see Publications Page main modelling functions runSALSA1D runSALSA2D, implement methods univariate bivariate smoothing produce models class gamMRSea. functions include diagnostics (assess residual correlation: runACF, smooth relationships: runPartialPlots model selection (ANOVA) robust standard errors: anova.gamMRSea) inference (.bootstrap.cress). Example modelling process using MRSea. Packages functions run certain parts given oval boxes. complete modelling process, packages may used certain stages. coded light blue, whilst MRSea functions red.","code":""},{"path":"http://lindesaysh.github.io/MRSea/articles/web/IntroductiontoMRSea.html","id":"examples-and-tutorials-on-the-mrsea-website","dir":"Articles > Web","previous_headings":"","what":"Examples and tutorials on the MRSea Website","title":"MRSea: Marine Renewables Strategic Environmental Assessment","text":"information using package see list examples tutorials.","code":""},{"path":[]},{"path":"http://lindesaysh.github.io/MRSea/articles/web/IntroductiontoMRSea.html","id":"making-any-glm-model-into-an-gammrsea-object","dir":"Articles > Web","previous_headings":"Translating from glm to gamMRSea","what":"Making any glm model into an gamMRSea object","title":"MRSea: Marine Renewables Strategic Environmental Assessment","text":"can done using make.gamMRSea function. use fullmodel glm model family='poisson' Note extra column robust standard errors raw ones. panel structure specified shown bottom output Max Panel Size = 1.","code":"library(MRSea) data(\"nysted.analysisdata\") fit <- glm(response ~ season + depth, family=\"quasipoisson\", data = nysted.analysisdata) fullModel.gamMRSea <- make.gamMRSea(fit,                                     gamMRSea = TRUE) summary(fullModel.gamMRSea) #>  #> Call: #> gamMRSea(formula = response ~ season + depth, family = \"quasipoisson\",  #>     data = nysted.analysisdata) #>  #> Deviance Residuals:  #>     Min       1Q   Median       3Q      Max   #> -1.9124  -1.0821  -0.7745  -0.5392  20.9195   #>  #> Coefficients: #>              Estimate Std. Error Robust S.E. t value Pr(>|t|)     #> (Intercept)  0.995330   0.131116    0.131116   7.591 3.48e-14 *** #> season      -0.352263   0.048872    0.048872  -7.208 6.13e-13 *** #> depth        0.096207   0.008387    0.008387  11.470  < 2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> (Dispersion parameter for quasipoisson family taken to be 11.58097) #>  #>     Null deviance: 26118  on 9231  degrees of freedom #> Residual deviance: 23676  on 9229  degrees of freedom #> AIC:  NA #>  #> Max Panel Size = 1 (independence assumed); Number of panels = 9232 #> Number of Fisher Scoring iterations: 7"},{"path":"http://lindesaysh.github.io/MRSea/articles/web/IntroductiontoMRSea.html","id":"adding-a-panel-structure-to-a-model","dir":"Articles > Web","previous_headings":"Translating from glm to gamMRSea","what":"Adding a panel structure to a model","title":"MRSea: Marine Renewables Strategic Environmental Assessment","text":"Additionally, choose fit SALSA GLM models without panel structure, make.gamMRSea function can used add panel structure afterwards. Note now summary output, robust standard error column different raw standard errors adjusted correlation seen panels. output shows maximum panel size now 54 208 panels.","code":"fit.robustse <- make.gamMRSea(fit,                               gamMRSea = TRUE,                               panelid = nysted.analysisdata$transect.id) summary(fit.robustse) #>  #> Call: #> gamMRSea(formula = response ~ season + depth, family = \"quasipoisson\",  #>     data = nysted.analysisdata) #>  #> Deviance Residuals:  #>     Min       1Q   Median       3Q      Max   #> -1.9124  -1.0821  -0.7745  -0.5392  20.9195   #>  #> Coefficients: #>              Estimate Std. Error Robust S.E. t value Pr(>|t|)     #> (Intercept)  0.995330   0.131116    0.177209   5.617 2.00e-08 *** #> season      -0.352263   0.048872    0.071747  -4.910 9.27e-07 *** #> depth        0.096207   0.008387    0.004515  21.310  < 2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> (Dispersion parameter for quasipoisson family taken to be 11.58097) #>  #>     Null deviance: 26118  on 9231  degrees of freedom #> Residual deviance: 23676  on 9229  degrees of freedom #> AIC:  NA #>  #> Max Panel Size = 54; Number of panels = 208 #> Number of Fisher Scoring iterations: 7"},{"path":"http://lindesaysh.github.io/MRSea/articles/web/ModelDiagnostics_MRSea.html","id":"collinearity","dir":"Articles > Web","previous_headings":"","what":"Collinearity","title":"Model Diagnostics","text":"reliable model, need ensure don’t include variables similar .e. collinear. Let’s plot relationship pair-wise covariates windfarm dataset. Pairwise scatterplots covariates interest. example, can see depth y.pos linearly related. difficult know causes cause modelling issues, correlation isn’t high. look statistic help decision later. x.pos hand doesn’t seem correlated covariates. Let’s define characteristics collinearity: measure similarity covariates. occurs one explanatory variables can written (near) linear combination explanatory variables. relates near linearity explanatory variables; response variable considered. problem amounts trying fit plane points lie along line. results “wobbly” plane since plane supported line fits data well plane. statistical terms, translates () parameters defining plane highly uncertain (thus high variance). Let’s create fictitious data highlight problem (stick simple linear Gaussian model illustration purposes). Let’s start assuming two covariates \\(x_1\\) \\(x_2\\) independent. 3D plot Linear fit fictitious data independent covariates. data covers \\(x_1/x_2\\) space pretty evenly thus experience issues. Now let’s see happens increase correlation \\(x_1\\) \\(x_2\\). 3D plot Linear fit fictitious data covariates varying levels correlation. correlation coefficient \\(x_1\\) \\(x_2\\) increases, standard errors regression coefficients. \\(\\rho=1\\), \\(x_1\\) \\(x_2\\) colinear .e. data points lie single line \\(x_1/x_2\\) space, model fails fit due singularities. due fact collinear situation points can well predicted plane running major axis (along line). just slope perpendicular major axis (function \\(\\beta\\)’s) can’t well predicted. unsurprising since points barely extend direction perpendicular line, thus contain little information slope plane direction. Collinearity inference issue predictions required. However, interest slope parameters (.e. \\(\\beta\\)’s) size standard errors coefficients important, collinearity avoided.","code":"library(MRSea) library(dplyr) library(ggplot2) # load the data data(\"nysted.analysisdata\") wfdata <- filter(nysted.analysisdata, impact==0, season==1) # load the prediction grid data(\"nysted.predictdata\") preddata <- filter(nysted.predictdata, impact==0, season==1) covariates <- c(\"x.pos\", \"y.pos\", \"depth\") pairs(subset(wfdata, select=covariates),        upper.panel=NULL, pch=19, cex=0.3) set.seed(2020) # for reproducibility N <- 250 # no. of data points x1 <- rnorm(N) # covariate 1 x2 <- rnorm(N) # covariate 2 y <- 2*x1 - x2 + rnorm(N) # measured y # Fit a linear Gaussian model mdl <- lm(y ~ x1 + x2) summary(mdl) Call: lm(formula = y ~ x1 + x2)  Residuals:     Min      1Q  Median      3Q     Max  -2.6991 -0.6526 -0.0606  0.6514  3.7469   Coefficients:              Estimate Std. Error t value Pr(>|t|)     (Intercept)  0.007353   0.064515   0.114    0.909     x1           1.856733   0.057356  32.372   <2e-16 *** x2          -1.023359   0.063963 -15.999   <2e-16 *** --- Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  Residual standard error: 1.013 on 247 degrees of freedom Multiple R-squared:  0.8443,    Adjusted R-squared:  0.843  F-statistic: 669.5 on 2 and 247 DF,  p-value: < 2.2e-16 coefs <- coef(mdl) # extract coef to plot fitted plane library(MASS) # to access mvrnorm function set.seed(1035) # for reproducibility rhos <- c(0.5, 0.85, 0.95, 1.0) mdl <- list() # save models  # Loop across all correlation coefficients for (i in seq(length(rhos))) {     # Simulate data     x <- mvrnorm(n=N, mu=rep(0, 2),                   Sigma=matrix(c(1, rhos[i], rhos[i], 1),                                nrow=2))     x1 <- x[, 1]; x2 <- x[, 2]     y <- 2*x1 - x2 + rnorm(N) # measured y          # Fit a linear Gaussian model     mdl[[i]] <- lm(y~x1+x2) } wgl    3 Call: lm(formula = y ~ x1 + x2)  Residuals:      Min       1Q   Median       3Q      Max  -3.07340 -0.67261  0.01242  0.69874  2.55412   Coefficients:             Estimate Std. Error t value Pr(>|t|)     (Intercept) -0.08337    0.06870  -1.214    0.226     x1           2.07649    0.08487  24.468   <2e-16 *** x2          -1.06416    0.08090 -13.154   <2e-16 *** --- Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  Residual standard error: 1.086 on 247 degrees of freedom Multiple R-squared:  0.7081,    Adjusted R-squared:  0.7057  F-statistic: 299.5 on 2 and 247 DF,  p-value: < 2.2e-16   Call: lm(formula = y ~ x1 + x2)  Residuals:      Min       1Q   Median       3Q      Max  -2.62974 -0.68952  0.02637  0.69161  2.08312   Coefficients:             Estimate Std. Error t value Pr(>|t|)     (Intercept)  0.11495    0.06113   1.881   0.0612 .   x1           1.90114    0.12367  15.373  < 2e-16 *** x2          -0.90031    0.12098  -7.442 1.64e-12 *** --- Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  Residual standard error: 0.9656 on 247 degrees of freedom Multiple R-squared:  0.6299,    Adjusted R-squared:  0.6269  F-statistic: 210.2 on 2 and 247 DF,  p-value: < 2.2e-16   Call: lm(formula = y ~ x1 + x2)  Residuals:     Min      1Q  Median      3Q     Max  -3.1832 -0.6632  0.0729  0.7506  2.9870   Coefficients:             Estimate Std. Error t value Pr(>|t|)     (Intercept) -0.02020    0.06453  -0.313    0.755     x1           2.23222    0.20743  10.761  < 2e-16 *** x2          -1.22437    0.20230  -6.052 5.27e-09 *** --- Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  Residual standard error: 1.017 on 247 degrees of freedom Multiple R-squared:  0.536, Adjusted R-squared:  0.5323  F-statistic: 142.7 on 2 and 247 DF,  p-value: < 2.2e-16   Call: lm(formula = y ~ x1 + x2)  Residuals:      Min       1Q   Median       3Q      Max  -2.53145 -0.65892  0.04813  0.61670  2.93168   Coefficients: (1 not defined because of singularities)             Estimate Std. Error t value Pr(>|t|)     (Intercept) -0.06531    0.06250  -1.045    0.297     x1           0.97552    0.05920  16.479   <2e-16 *** x2                NA         NA      NA       NA     --- Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  Residual standard error: 0.9862 on 248 degrees of freedom Multiple R-squared:  0.5227,    Adjusted R-squared:  0.5207  F-statistic: 271.5 on 1 and 248 DF,  p-value: < 2.2e-16"},{"path":"http://lindesaysh.github.io/MRSea/articles/web/ModelDiagnostics_MRSea.html","id":"detecting-collinearity","dir":"Articles > Web","previous_headings":"Collinearity","what":"Detecting collinearity","title":"Model Diagnostics","text":"Collinearity can diagnosed plotting covariates , can automated employing numerical measures (e.g. VIFs). particularly useful dealing large number covariates. Variance Inflation Factors (VIFs) useful measure collinearity. return one value per explanatory variable based \\(R^2\\) get regressing explanatory variable others. VIF \\(j\\)th explanatory variable \\(\\mbox{VIF}_j=\\frac{1}{(1-R^2_j)}\\), \\(R^2_j\\) squared multiple correlation coefficient (coefficient determination) \\(j^\\text{th}\\) variable variables. closer \\(R^2_j\\) 1, higher collinearity VIF. covariates one regression coefficient associated (e.g. Phase), generalised variance-inflation factors (GVIFs) calculated (Fox Monette 1992). generalises notion variance inflation considering relative size joint confidence region/ellipse (generalisation confidence interval multiple coefficients) coefficients associated related set regressors. resulting measure called generalised variance inflation factor (GVIF). \\(p\\) regressors term, GVIF\\(^{1/(2p)}\\) one-dimensional expression decrease precision estimation due collinearity. VIFs suggest perhaps collinearity issues. numerical outputs VIF indicate confidence intervals y.pos parameter approximately \\(\\sqrt{5.2}\\) \\(=\\) 2.3 times wider without depth model. means bad case collinearity inline ’ve observed figure . contrast, let’s assume depth measured using two techniques, sonar LiDAR. expect measurements highly correlated cause fitting issues. Let’s see happens: Including DepthSonar DepthLiDAR results GVIF 801.7, confirming collinearity problem associated issues model stability.","code":"simpleModel <- glm(response ~ x.pos + y.pos + depth + offset(log(area)), family=\"quasipoisson\", data=nysted.analysisdata) # The vif() function is in the car package car::vif(simpleModel) x.pos    y.pos    depth  1.486561 5.201859 4.655251 set.seed(1045) # for reproducibility # Add DepthSonar and DepthLiDAR to our data frame wfdata$DepthSonar <- wfdata$depth wfdata$DepthLiDAR <- wfdata$DepthSonar + rnorm(nrow(wfdata),                                         mean=0,                                         sd=0.2)  # Fit model replace Depth with DepthSonar and DepthLiDAR glmFitColinear <- glm(response ~ x.pos + y.pos + DepthSonar +                            DepthLiDAR ,                        offset=log(area), family=quasipoisson,                        data=wfdata) summary(glmFitColinear) Call: glm(formula = response ~ x.pos + y.pos + DepthSonar + DepthLiDAR,      family = quasipoisson, data = wfdata, offset = log(area))  Deviance Residuals:      Min       1Q   Median       3Q      Max   -3.4643  -1.4330  -0.8379  -0.3869  18.2078    Coefficients:               Estimate Std. Error t value Pr(>|t|)     (Intercept)  1.340e+03  2.519e+02   5.319 1.25e-07 *** x.pos        1.337e-03  1.029e-02   0.130    0.897     y.pos       -2.210e-01  4.120e-02  -5.366 9.74e-08 *** DepthSonar  -5.847e-02  5.252e-01  -0.111    0.911     DepthLiDAR   3.551e-01  5.211e-01   0.681    0.496     --- Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  (Dispersion parameter for quasipoisson family taken to be 10.75223)      Null deviance: 4987.6  on 1153  degrees of freedom Residual deviance: 4007.2  on 1149  degrees of freedom AIC: NA  Number of Fisher Scoring iterations: 7 car::vif(glmFitColinear) x.pos      y.pos DepthSonar DepthLiDAR    1.428456   5.225356 801.704645 792.806730"},{"path":"http://lindesaysh.github.io/MRSea/articles/web/ModelDiagnostics_MRSea.html","id":"dealing-with-collinearity","dir":"Articles > Web","previous_headings":"Collinearity","what":"Dealing with collinearity","title":"Model Diagnostics","text":"collinearity present? two commonest options centre covariates omit either troublesome covariates model completely. many cases, centering covariate doesn’t help dealing collinearity necessarily involves model selection1. can fit models either one variables use kind criterion (e.g. AIC cross-validation) choose better two models.","code":""},{"path":"http://lindesaysh.github.io/MRSea/articles/web/ModelDiagnostics_MRSea.html","id":"nonlinearity-on-the-link-scale","dir":"Articles > Web","previous_headings":"","what":"Nonlinearity on the link scale","title":"Model Diagnostics","text":"far, ’ve assumed relationships covariates response link scale linear. unreasonable, model predictions (associated confidence intervals) can poor. can examine linearity (link scale) assumption plotting Pearson residuals continuous covariates. Pearson residuals “raw” residuals (response residuals) divided square root variance function \\(v(\\cdot)\\). Poisson model \\(\\hat{\\epsilon_i}^{\\text{pearson}}=\\frac{y_i-\\hat{y_i}}{\\sqrt{\\hat{y_i}}}\\) Recall, relationship well described model, Pearson residuals exhibit systematic pattern. Let’s simulate scenario. Pearson residuals vs fictitious covariate \\(x\\) mdl <- lm(y ~ x) \\(y\\) simulated using \\(x^2\\). obvious systematic pattern tells us linear predictor mean good job describing observed data. Let’s include \\(x^2\\) another covariate model see happens. Pearson residuals vs fictitious covariate \\(x\\) mdl <- lm(y ~ x + xsq) \\(y\\) simulated using \\(x^2\\). Now structure Pearson residuals. scattered evenly around zero, suggesting model’s assumptions met good fit. aid visual inspection, quadratic term can fitted predictor (e.g. \\(\\text{Depth}^2\\)) regression model directly test nonlinearity. provides \\(z\\)/\\(t\\)-test statistic associated \\(p\\)-value quadratic term model, formal test nonlinearity (Tukey’s test non-additivity). test appropriate types departures linearity, small \\(p\\)-values test indicate nonlinearities link scale. Moreover, residual plots can augmented data-driven curve. handy residualPlots function car package lets us ; plotting Pearson residuals covariates, compute curvature test plots adding quadratic term testing quadratic zero (Tukey’s test non-additivity) overlays smooth curve residuals. Residual plots glmFitOD3 model. Red line fitted quadratic blue line fitted smooth curve. plot shows already seen, nonlinearities link scale indicated u-shaped curve. quadratic smoother-based curves fitted residual plots simpleModel (recall model NHAT ~ x.pos + y.pos + depth). case, appear nonlinearities link scale curvature apparent model covariates test statistic coefficients associated quadratic term (\\(\\chi^2_j\\)) covariate extremely large associated \\(p\\)-values small significant.","code":"set.seed(1863) # for reproducibility N <- 250 # no. of data points df <- NULL df$x <- runif(N, -3, 3) # covariate  # The \"real\" y is generated by x^2 rather than x df$y <- 2*df$x^2 + rnorm(N)   # Fit model mdl <- lm(y ~ x, data=df) summary(mdl) Call: lm(formula = y ~ x, data = df)  Residuals:    Min     1Q Median     3Q    Max  -7.509 -4.840 -1.014  4.252 13.362   Coefficients:             Estimate Std. Error t value Pr(>|t|)     (Intercept)  6.03493    0.34389  17.549   <2e-16 *** x            0.07479    0.19576   0.382    0.703     --- Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  Residual standard error: 5.437 on 248 degrees of freedom Multiple R-squared:  0.0005882, Adjusted R-squared:  -0.003442  F-statistic: 0.146 on 1 and 248 DF,  p-value: 0.7028 # Plot Pearson residuals vs covariate plot(df$x, residuals(mdl, type=\"pearson\"),      ylab=\"Pearson residuals\", xlab=\"Covariate (x)\", pch=19) abline(h=0, lty=2, col=\"lightgrey\", lwd=4) df$xsq <- df$x^2 # \"new\" covariate x-squared mdl2 <- glm(y ~ x + xsq, data=df) summary(mdl2) Call: glm(formula = y ~ x + xsq, data = df)  Deviance Residuals:       Min        1Q    Median        3Q       Max   -2.62393  -0.63796  -0.01024   0.61561   2.89014    Coefficients:             Estimate Std. Error t value Pr(>|t|)     (Intercept) -0.08927    0.09180  -0.973    0.332     x            0.02745    0.03432   0.800    0.425     xsq          1.98491    0.02244  88.457   <2e-16 *** --- Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  (Dispersion parameter for gaussian family taken to be 0.9082371)      Null deviance: 7335.30  on 249  degrees of freedom Residual deviance:  224.33  on 247  degrees of freedom AIC: 690.39  Number of Fisher Scoring iterations: 2 # Plot Pearson's residuals vs covariate plot(df$x, residuals(mdl2, type=\"pearson\"),      ylab=\"Pearson residuals\", xlab=\"Covariate (x)\", pch=19) abline(h=0, lty=2, col=\"lightgrey\", lwd=4) library(car) residualPlots(simpleModel,               type=\"pearson\",               quadratic=TRUE,               smooth=list(smoother=gamLine, col=\"#377eb8\"),               fitted=FALSE,               col.quad=\"#e41a1c\",               col=\"grey\",               pch=19,               cex=0.3,               ylim=c(-5, 5)) Test stat Pr(>|Test stat|)     x.pos     278.5        < 2.2e-16 *** y.pos    1305.0        < 2.2e-16 *** depth    2252.6        < 2.2e-16 *** --- Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"http://lindesaysh.github.io/MRSea/articles/web/ModelDiagnostics_MRSea.html","id":"autocorrelation","dir":"Articles > Web","previous_headings":"","what":"Autocorrelation","title":"Model Diagnostics","text":"far, ’ve assumed model errors independent (.e. observations independent). model capture patterns response data, pattern remain model residuals present positive/negative residual auto-correlation. Let’s focus first 200 observations Nysted dataset. Response data along transects first 200 observations Nysted dataset. extent, model covariates able explain similarity counts along transects. However, much pattern tends remain unexplained model found model residuals. Observed bird counts (blue line) model (simpleModel) fitted values (green line) first 200 observations. Pearson residuals first 200 observations model simpleModel. can visualise problem autocorrelation function plot, depicts estimated correlation residuals lag \\(k\\) residuals (see acf R). Autocorrelation plot residuals simpleModel. lags \\(k=7\\) residuals remain correlated. uncorrelated residuals expect acf=1 lag=0, acf=0 otherwise.","code":"ggplot() +     geom_point(aes(x=x.pos, y=y.pos, colour=transect.id),                 data=nysted.analysisdata[1:200, ]) +     geom_point(aes(x.pos, y=y.pos, size=log(NHAT/area)),                 colour='black',                 data=subset(nysted.analysisdata[1:200, ], NHAT>0)) simpleModel <- glm(response ~ x.pos + y.pos + depth + offset(log(area)), family=\"quasipoisson\", data=nysted.analysisdata) mdlSummary <- data.frame(Observed=simpleModel$model$response,                           Fitted=predict(simpleModel,                                          type=\"response\"),                          Residuals=residuals(simpleModel,                                               type=\"pearson\"),                          Index=seq(length(simpleModel$model$response))) ggplot(mdlSummary[1:200, ]) +     geom_line(aes(x=Index, y=Fitted, col=\"Fitted\"), lwd=1) +     geom_line(aes(x=Index, y=Observed, col=\"Observed\"), lwd=1) +     scale_color_manual(values=c('Observed'=\"#377eb8\",                                 'Fitted'=\"#4daf4a\")) +     labs(color=\"\")  +     ylab(\"Bird counts\") ggplot(mdlSummary[100:200, ]) +     geom_line(aes(x=Index, y=Residuals, col=\"Residuals\"), lwd=1) +     scale_color_manual(values=c('Residuals'=\"#e41a1c\")) +     labs(color=\"\")  +     ylab(\"Bird counts\") acf(residuals(simpleModel, type=\"pearson\"), main=\"simpleModel\")"},{"path":"http://lindesaysh.github.io/MRSea/articles/web/ModelDiagnostics_MRSea.html","id":"diagnosing-autocorrelation-using-the-runs-test","dir":"Articles > Web","previous_headings":"Autocorrelation","what":"Diagnosing autocorrelation using the runs test","title":"Model Diagnostics","text":"Non-independence model residuals can diagnosed using Wald-Wolfowitz runs test (Wald Wolfowitz 1943): test assigns “sign” residual: positive residuals labelled +1’s negative residuals labelled -1’s. number uninterrupted strings (“runs”) positive negative residuals looked sequence (e.g. time order) calculated. (long) runs provide evidence positive correlation, many (short) runs provide evidence negative correlation. sign model (simpleModel) residuals first 200 observations. sign residuals, residuals independent. runs test compares observed number runs (\\(T\\)) ’s expected independence (\\(\\text{E}[T]\\)) adjusted variance (\\(\\text{var}[T]\\)) give test statistic \\(W_z\\) standard normal distribution (\\(\\mathcal{N}(0,1)\\)). \\[ \\begin{align*} \\text{E}[T]&=\\frac{2n_pn_n}{n_p+n_n}+1\\\\ \\text{var}[T]&=\\frac{2n_pn_n(2n_pn_n-n_p-n_n)}{(n_p+n_n)^2(n_p+n_n-1)}\\\\ W_Z&=\\frac{T-\\text{E}[T]}{\\sqrt{\\text{var}[T]}} \\sim \\mathcal{N}(0,1) \\end{align*} \\] : \\(n_p\\) number positive residuals. \\(n_n\\) number negative residuals. Values extreme \\(\\pm 2\\) considered compelling evidence independence consistent positive (\\(W_Z< -2\\)) negative correlation (\\(W_Z> 2\\)). runs.test function can found lawstat package R. Note test based order model residuals thus many uses, can used check : Time dependence (calculating runs based residuals time order). Poorly specified covariate relationships (calculating runs based ordered covariate value). Let’s simulate two models order show runs test action. Model : linear predictor just function single covariate \\(x\\) (\\(\\) observation index). \\[ \\begin{align*} y^{()}_i & \\sim \\text{Poisson}(\\mu^{()}_i)\\\\ \\log \\mu^{()}_i & = \\beta_0 + \\beta_1x_i \\end{align*} \\] Model B: linear predictor function measured covariate \\(x\\) sine wave/function mimic factors exist environment affect bird numbers directly observe. \\(\\beta\\)’s assumed models. \\[ \\begin{align*} y^{(B)}_i & \\sim \\text{Poisson}(\\mu^{(B)}_i)\\\\ \\log \\mu^{(B)}_i & = \\beta_0 + \\beta_1x_i + 2\\sin{} \\end{align*} \\] Let’s plot mean functions (log link scale) \\(\\log \\mu^{()}\\) \\(\\log \\mu^{(B)}\\) used simulate data function covariate \\(x\\). two mean functions (log link scale) used simulate data function covariate \\(x\\). can already see absence predictor explain cyclic nature \\(\\log \\mu^{(B)}\\), residuals model B remain correlated (.e. covariate \\(x\\) explain variation). Let’s fit Poisson GLM simulated datasets. Let’s plot Pearson residuals models first 50 observations: first 50 Pearsons residuals model (independent residuals) model B (correlated residuals). Using runs test confirm results.","code":"# Assign sign mdlSummary$Sign <- ifelse(mdlSummary$Residuals>0, 1, -1) ggplot(mdlSummary[1:200, ]) +     geom_line(aes(x=Index, y=Sign, col=\"Sign\"), lwd=1) +     scale_color_manual(values=c('Sign'=\"black\")) +     labs(color=\"\")  +     ylab(\"Sign of the residuals\") set.seed(1345) # for reproducibility dummyDta <- data.frame(Sign=ifelse(rnorm(200)>0, 1, -1),                        Index=seq(200)) ggplot(dummyDta) +     geom_line(aes(x=Index, y=Sign, col=\"Sign\"), lwd=1) +     scale_color_manual(values=c('Sign'=\"black\")) +     labs(color=\"\")  +     ylab(\"Sign of the residuals\") set.seed(1345) # for reproducibility NSample <- 2000 # total no. of samples  # Model parameters b0 <- 0.1 b1 <- 0.1   # Generate covariate and \"observed\" data x <- rep(1:20, times=NSample/20) etaA <- b0 + b1*x muA <- exp(etaA) yA <- rpois(NSample, muA) set.seed(1345) # for reproducibility  etaB <- b0 + b1*x + sin(1:NSample)*2 muB <- exp(etaB) yB <- rpois(NSample, muB) plot(x[1:20], etaB[1:20],       type=\"l\", xlab=\"Covariate (x)\",       ylab=\"Model on the link scale (log(mu))\",       lwd=3, lty=2, col=\"#377eb8\") lines(x[1:20], etaA[1:20], lwd=3, col=\"#4daf4a\") legend(\"topleft\", c(\"Model A\", \"Model B\"),         col=c(\"#4daf4a\", \"#377eb8\"), lty=c(1,2), lwd=3, bty=\"n\") fitA <- glm(yA ~ x, family=poisson) summary(fitA) Call: glm(formula = yA ~ x, family = poisson)  Deviance Residuals:      Min       1Q   Median       3Q      Max   -2.9265  -0.7876  -0.1631   0.5605   3.3844    Coefficients:             Estimate Std. Error z value Pr(>|z|)     (Intercept) 0.102565   0.032382   3.167  0.00154 **  x           0.098975   0.002222  44.545  < 2e-16 *** --- Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  (Dispersion parameter for poisson family taken to be 1)      Null deviance: 4401.7  on 1999  degrees of freedom Residual deviance: 2224.8  on 1998  degrees of freedom AIC: 7816.7  Number of Fisher Scoring iterations: 5 fitB <- glm(yB ~ x, family=poisson) summary(fitB) Call: glm(formula = yB ~ x, family = poisson)  Deviance Residuals:     Min      1Q  Median      3Q     Max   -6.103  -3.007  -1.506   1.778   9.524    Coefficients:             Estimate Std. Error z value Pr(>|z|)     (Intercept) 0.902406   0.021547   41.88   <2e-16 *** x           0.101094   0.001474   68.60   <2e-16 *** --- Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  (Dispersion parameter for poisson family taken to be 1)      Null deviance: 26516  on 1999  degrees of freedom Residual deviance: 21334  on 1998  degrees of freedom AIC: 26951  Number of Fisher Scoring iterations: 5 par(mfrow=c(1, 2)) plot(residuals(fitA, type=\"pearson\")[1:50],       type=\"l\", ylab=\"Pearson residuals\", col=\"#4daf4a\",      main=\"Independent residuals (Model A)\") plot(residuals(fitB, type=\"pearson\")[1:50],       type=\"l\", ylab=\"Pearson residuals\", col=\"#377eb8\",      main=\"Correlated residuals (Model B)\") library(lawstat) # to access the runs.test function  # Model A runs.test(residuals(fitA, type=\"pearson\")) Runs Test - Two sided  data:  residuals(fitA, type = \"pearson\") Standardized Runs Statistic = -1.3856, p-value = 0.1659 # Model B runs.test(residuals(fitB, type=\"pearson\")) Runs Test - Two sided  data:  residuals(fitB, type = \"pearson\") Standardized Runs Statistic = -15.746, p-value < 2.2e-16"},{"path":"http://lindesaysh.github.io/MRSea/articles/web/ModelDiagnostics_MRSea.html","id":"positive-correlation-affects-model-selection","dir":"Articles > Web","previous_headings":"Autocorrelation","what":"Positive correlation affects model selection","title":"Model Diagnostics","text":"Positive correlation model residuals can lead us conclude irrelevant variables important. illustrate , let’s now add covariate unrelated response entirely made randomly generated noise (\\(x_{\\text{noise}}\\)). can now see \\(x_{\\text{noise}}\\) found significantly related \\(y^{(B)}\\) \\(y^{()}\\). problematic, \\(x_{\\text{noise}}\\) offers predictive capacity whatsoever, yet ’ve retained model B. ensure result anomaly, let’s repeat process 5000 times examine long-run behaviour. \\(x_{\\text{noise}}\\) falsely identified statistically significant just 5.56% time (line expected false positive rate 5%). runs test indicated residuals non-independent 5.36% simulated sets using 5% level determine statistical significance (expect around 5%). \\(x_{\\text{noise}}\\) falsely identified statistically significant 60.92% time! runs test suggested residuals positively correlated 100% time, using 5% level determine statistical significance. Let’s see positive residual correlation also apparent basic Nysted model simpleModel:","code":"set.seed(17395) # for reproducibility xnoise <- rnorm(NSample) # Model A (independent residuals) fitANoise <- glm(yA ~ x + xnoise, family=poisson) summary(fitANoise ) Call: glm(formula = yA ~ x + xnoise, family = poisson)  Deviance Residuals:      Min       1Q   Median       3Q      Max   -2.9237  -0.8005  -0.1598   0.5687   3.3761    Coefficients:             Estimate Std. Error z value Pr(>|z|)     (Intercept) 0.103150   0.032382   3.185  0.00145 **  x           0.098940   0.002222  44.531  < 2e-16 *** xnoise      0.010181   0.011449   0.889  0.37385     --- Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  (Dispersion parameter for poisson family taken to be 1)      Null deviance: 4401.7  on 1999  degrees of freedom Residual deviance: 2224.0  on 1997  degrees of freedom AIC: 7818  Number of Fisher Scoring iterations: 5 Anova(fitANoise ) Analysis of Deviance Table (Type II tests)  Response: yA        LR Chisq Df Pr(>Chisq)     x       2175.74  1     <2e-16 *** xnoise     0.79  1     0.3738     --- Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 # Model B (correlated residuals) fitBNoise <- glm(yB ~ x + xnoise, family=poisson) summary(fitBNoise) Call: glm(formula = yB ~ x + xnoise, family = poisson)  Deviance Residuals:     Min      1Q  Median      3Q     Max   -6.436  -3.016  -1.467   1.813   9.762    Coefficients:             Estimate Std. Error z value Pr(>|z|)     (Intercept) 0.904701   0.021521  42.038   <2e-16 *** x           0.100826   0.001472  68.496   <2e-16 *** xnoise      0.068517   0.007573   9.047   <2e-16 *** --- Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  (Dispersion parameter for poisson family taken to be 1)      Null deviance: 26516  on 1999  degrees of freedom Residual deviance: 21252  on 1997  degrees of freedom AIC: 26871  Number of Fisher Scoring iterations: 5 Anova(fitBNoise) Analysis of Deviance Table (Type II tests)  Response: yB        LR Chisq Df Pr(>Chisq)     x        5164.2  1  < 2.2e-16 *** xnoise     81.9  1  < 2.2e-16 *** --- Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 set.seed(83195) # for reproducibility NRepeat <- 5000 # np. of repeats  # Counter for no. times we keep xnoise in model A or B keepNoiseA <- 0  keepNoiseB <- 0   # Counter for no. times we detect correlation in residuals runsTestA <- 0 runsTestB <- 0  # Loop NRepeat times for (i in seq(NRepeat)) {     # Generate data for the same muA & muB     yA <- rpois(NSample, muA)     yB <- rpois(NSample, muB)     xnoise <- rnorm(NSample)          # Fit models     fitANoise <- glm(yA ~ x + xnoise, family=poisson)     fitBNoise <- glm(yB ~ x + xnoise, family=poisson)          # Extract p-values     pA <- coef(summary(fitANoise))[\"xnoise\", \"Pr(>|z|)\"]     pB <- coef(summary(fitBNoise))[\"xnoise\", \"Pr(>|z|)\"]          # Update counter if p-value is sig to 0.05 level     if (pA < 0.05) keepNoiseA <- keepNoiseA + 1     if (pB < 0.05) keepNoiseB <- keepNoiseB + 1          # Perform runs.test on both model's residuals     runA <- runs.test(residuals(fitANoise, type=\"pearson\"))     runB <- runs.test(residuals(fitBNoise, type=\"pearson\"))          # Update counter if p-value is sig to 0.05 level     if (runA$p.value < 0.05) runsTestA <- runsTestA + 1     if (runB$p.value < 0.05) runsTestB <- runsTestB + 1 } runs.test(residuals(simpleModel, type=\"pearson\")) Runs Test - Two sided  data:  residuals(simpleModel, type = \"pearson\") Standardized Runs Statistic = -65.03, p-value < 2.2e-16"},{"path":"http://lindesaysh.github.io/MRSea/articles/web/ModelDiagnostics_MRSea.html","id":"mean-variance-relationship","dir":"Articles > Web","previous_headings":"","what":"Mean-variance relationship","title":"Model Diagnostics","text":"can assess mean-variance relationship looking fitted values versus residuals. ease visual inspection “bin” fitted data compute variance residuals “bin”. Let’s simulate Poisson data show . can look “raw” residuals (\\(\\hat{\\epsilon_i}^{\\text{raw}}=y_i-\\hat{y_i}\\)), case, model assumptions met, observe assumed mean-variance relationship. Poisson model see variance increasing mean (Poisson model assumes variance equal mean). Mean-variance relationship Poisson simulated dataset using raw residuals. Let’s inspect mean-variance relationship simpleModel Mean-variance relationship simpleModel model using Pearson residuals. still seem strong mean-variance relationship looking Pearson residuals. suggests least modelling assumptions aren’t met, may adjust model specification account different mean-variance relationship. example, underestimating variance largest fitted values.","code":"set.seed(7345) # for reproducibility NSample <- 2000 # total no. of samples  # Model parameters b0 <- 0.1 b1 <- 0.25   # Generate covariate and \"observed\" data x <- rep(1:20, times=NSample/20) etaA <- b0 + b1*x muA <- exp(etaA) y <- rpois(NSample, muA)  # Fit model mdl <- glm(y ~ x, family=poisson) # Plot 1 - Fitted values vs raw residuals p.raw <- ggplot() +    geom_point(aes(x=fitted(mdl), y=residuals(mdl, type=\"response\"))) +   ylab(\"Raw residuals\") + theme_bw()   # Plot 2 - Mean binned fitted values vs var of raw residuals p.meanvar <- plotMeanVar(mdl, print=FALSE)  ggpubr::ggarrange(p.raw, p.meanvar, ncol=2) # Plot 1 - Fitted values vs raw residuals p.raw <- ggplot() +    geom_point(aes(x=fitted(simpleModel), y=residuals(simpleModel, type=\"pearson\"))) +   ylab(\"Pearsons residuals\") + theme_bw()   # Plot 2 - Mean binned fitted values vs var of raw residuals p.meanvar <- plotMeanVar(simpleModel, print=FALSE)  ggpubr::ggarrange(p.raw, p.meanvar, ncol=2)"},{"path":"http://lindesaysh.github.io/MRSea/articles/web/ModelDiagnostics_MRSea.html","id":"diagnostics-using-the-mrsea-package","dir":"Articles > Web","previous_headings":"","what":"Diagnostics using the MRSea package","title":"Model Diagnostics","text":"","code":"library(dplyr) library(MRSea) library(ggplot2)"},{"path":"http://lindesaysh.github.io/MRSea/articles/web/ModelDiagnostics_MRSea.html","id":"autocorrelation-check","dir":"Articles > Web","previous_headings":"Diagnostics using the MRSea package","what":"Autocorrelation check","title":"Model Diagnostics","text":"residuals correlated? Make suitable blocking structure, within residuals expected correlated independent. Use runACF assess blocking structure. case data collected transect. expect level correlation along transect use blocking structure. Autocorrelation function plot: function uses Pearsons residuals grey line correlation within given transect red line mean correlations across transects similar see running usual acf() command.   case evidence transects show high correlation. Along plot, can also statistical test assess independence: runs test. Details standard runs test given . null hypothesis independence, test statistic distributed N(0,1). However, data/residuals highly dispersed standard runs test can misleading - fails reject H\\(_0\\) residuals correlated. reason, developed empirical runs test simulate test statistic distribution independence use obtain empirical \\(p\\)-value test statistic data. Empirical runs test calculation: Generate data independent similar distributional characteristics response data. Get empirical distribution runs test statistics  Evaluate runs test \\(p\\)-value using empirical distribution found .","code":"runACF(block = nysted.analysisdata$transect.id, model = simpleModel,        suppress.printout=TRUE) a <- acf(residuals(simpleModel, type=\"pearson\")) a[1] Autocorrelations of series 'residuals(simpleModel, type = \"pearson\")', by lag      1  0.082 plot(a) simData<-generateNoise(n=500,                         response=fitted(simpleModel),                         family='poisson',                         d=summary(simpleModel)$dispersion) empdist<-getEmpDistribution(500, simData, simpleModel, data=nysted.analysisdata, dots=FALSE, plot = TRUE) runsTest(residuals(simpleModel, type='pearson'), emp.distribution=empdist) Runs Test - Two sided; Empirical Distribution  data:  residuals(simpleModel, type = \"pearson\") Standardized Runs Statistic = -65.03, p-value < 2.2e-16"},{"path":"http://lindesaysh.github.io/MRSea/articles/web/ModelDiagnostics_MRSea.html","id":"additional-diagnostic-plots","dir":"Articles > Web","previous_headings":"Diagnostics using the MRSea package","what":"Additional Diagnostic Plots","title":"Model Diagnostics","text":"runDiagnosticsfunction creates two diagnostic plots: observed vs fitted fitted vs scaled Pearsons residual plots.","code":""},{"path":"http://lindesaysh.github.io/MRSea/articles/web/ModelDiagnostics_MRSea.html","id":"observed-vs-fitted-plot","dir":"Articles > Web","previous_headings":"Diagnostics using the MRSea package > Additional Diagnostic Plots","what":"Observed vs Fitted plot","title":"Model Diagnostics","text":"Two metrics, marginal R\\(^2_m\\) concordance correlation coefficient, printed title plot help assess model fit. \\[R^2_m = 1 - \\frac{\\sum{(y_i - \\hat{y_i})^2}}{\\sum{(y_i - \\bar{y})^2}}\\] \\[CC = \\frac{2\\sum{(y_i - \\bar{y})(\\hat{y_i} - \\bar{y})}}{\\sum{(y_i - \\bar{y})^2}+\\sum{(\\hat{y_i} - \\bar{y})^2}}\\] \\(y_i\\) \\(\\)th response value, \\(\\hat{y_i}\\) \\(\\)th fitted value \\(\\bar{y}\\) mean fitted values.  case, simple model good fit data concordance correlation r squared values low.","code":"runDiagnostics(simpleModel, plotting = \"f\")"},{"path":"http://lindesaysh.github.io/MRSea/articles/web/ModelDiagnostics_MRSea.html","id":"scaled-pearsons-residuals","dir":"Articles > Web","previous_headings":"Diagnostics using the MRSea package > Additional Diagnostic Plots","what":"Scaled Pearsons Residuals","title":"Model Diagnostics","text":"residuals show little relationship fitted values model. red line locally weighted least squares regression line residuals can used guide assess relationship. scaled Pearsons residuals residuals expected relationship given distribution taken account including extra dispersion estimated via dispersion parameter. expect see pattern even variance. case, residuals show pattern (red line near horizontal). assess variance residuals, mean-variance plot discussed earlier useful .","code":"runDiagnostics(simpleModel, plotting = \"r\") plotMeanVar(simpleModel)"},{"path":"http://lindesaysh.github.io/MRSea/articles/web/ModelDiagnostics_MRSea.html","id":"influence-diagnostics","dir":"Articles > Web","previous_headings":"Diagnostics using the MRSea package","what":"Influence diagnostics","title":"Model Diagnostics","text":"data structure , e.g. form blocks transects, can asses influence blocks precision parameter estimates (standard errors associated coefficient) sensitivity model predictions. use two statistics; COVRATIO PRESS assess .","code":""},{"path":"http://lindesaysh.github.io/MRSea/articles/web/ModelDiagnostics_MRSea.html","id":"covratio","dir":"Articles > Web","previous_headings":"Diagnostics using the MRSea package > Influence diagnostics","what":"COVRATIO","title":"Model Diagnostics","text":"statistic signals change precision parameter estimates block omitted. Values greater 1 signal removing block inflates parameter standard errors Values less 1 signal standard errors smaller block excluded influential points lie outside 95% quantile COVRATIO statistics","code":""},{"path":"http://lindesaysh.github.io/MRSea/articles/web/ModelDiagnostics_MRSea.html","id":"press","dir":"Articles > Web","previous_headings":"Diagnostics using the MRSea package > Influence diagnostics","what":"PRESS","title":"Model Diagnostics","text":"Quantifies sensitivity model predictions removing block. Relatively large values signal model sensitive subjects. Model coefficients re-estimated block omitted (one-one) sum squared differences response data predicted values (subject removed) found. statistic sum squared PRESS residuals deletion set (block ID). PRESS residuals difference observed value predicted mean, predicted value obtained without observations question. \\[\\widehat{\\epsilon_{pr, }} = y_i - X_i^-\\hat{\\beta}\\] \\[PRESS = \\sum\\widehat{\\epsilon_{pr, }}\\] influential points lie 95% quantile PRESS statistics.","code":""},{"path":"http://lindesaysh.github.io/MRSea/articles/web/ModelDiagnostics_MRSea.html","id":"calculating-the-statistics","dir":"Articles > Web","previous_headings":"Diagnostics using the MRSea package > Influence diagnostics","what":"Calculating the statistics","title":"Model Diagnostics","text":"First create blocking structure. chosen unique transect id season impact phase.  model predictions measures precision appear particularly sensitive omitted blocks, first look blocks see obvious issues block. Additionally examine model conclusions based models without potentially problematic blocks. practice, influential blocks often lot observations thus influence parameter estimates quite highly. instance, influence perfectly normal expected.","code":"nysted.analysisdata$blockid <- paste0(nysted.analysisdata$impact,                                       nysted.analysisdata$season,                                       nysted.analysisdata$transect.id) timeInfluenceCheck(model = simpleModel,                     id = nysted.analysisdata$blockid) [1] \"Calculating the influence measures will take approximately 0 minutes\" inflpoints<-runInfluence(simpleModel, id = nysted.analysisdata$blockid) [1] \"Calculating COVRATIO and PRESS Statistics\""},{"path":"http://lindesaysh.github.io/MRSea/articles/web/ModelDiagnostics_MRSea.html","id":"cumulative-residual-plots","dir":"Articles > Web","previous_headings":"Diagnostics using the MRSea package","what":"Cumulative residual plots","title":"Model Diagnostics","text":"Cumulative residuals can used assess systematic - - prediction, .e. functional form covariates, can used assess adequacy regression models (Lin, Wei, Ying 2002). plot blue dots residuals black line line cumulative residual. covariate plots (specified varlist) grey line indicates expect well/fitted covariate. .e. one fitted excessive knots. Let’s look example depth fitted linear term simple smooth term (B-spline one knot mean). Cumulative residual plots residuals ordered depth smooth term (right) depth fitted linear term (left). blue points residual values, black line represents cumulative residuals. grey line background expect cumulative residuals depth modelled flexibility. Cumulative residual plots residuals ordered depth smooth term (right) depth fitted linear term (left). blue points residual values, black line represents cumulative residuals. grey line background expect cumulative residuals depth modelled flexibility. depth modelled linearly, plot shows systematic severe prediction. smooth term, black grey lines similar shows depth modelled appropriately. default (variableonly = FALSE), cumulative residual plots also returned residuals ordered predicted value index observations (temporally).  ’ve shown, depth linear term inappropriate systematic prediction. Systematic prediction predicted counts less one systematic prediction predicted counts > 1 Evidence systematic prediction full data timeline. Like runs profiles described earlier, expect see switching positive negative (prediction).","code":"# depth linear fit.lin <- glm(formula = response ~ depth + offset(log(area)),      family = \"quasipoisson\", data = nysted.analysisdata) # depth smooth fit.sm <- glm(formula = response ~ splines::bs(depth, knots = mean(nysted.analysisdata$depth)) + offset(log(area)),      family = \"quasipoisson\", data = nysted.analysisdata) # cum res of both plotCumRes(model = fit.lin, varlist = 'depth', variableonly = TRUE) [1] \"Calculating cumulative residuals\" plotCumRes(model = fit.sm, varlist = 'depth', variableonly = TRUE) [1] \"Calculating cumulative residuals\" plotCumRes(model = simpleModel, varlist=\"depth\") [1] \"Calculating cumulative residuals\""},{"path":[]},{"path":[]},{"path":"http://lindesaysh.github.io/MRSea/articles/web/Publications.html","id":"mrsea-package","dir":"Articles > Web","previous_headings":"R package","what":"MRSea package:","title":"Publications","text":"Scott-Hayward L..S., Walker C.G., Mackenzie M.L. (2021). “Vignette MRSea Package v1.3: Statistical Modelling bird cetacean distributions offshore renewable development areas.” University St. Andrews. Centre Research Ecological Environmental Modelling.","code":""},{"path":"http://lindesaysh.github.io/MRSea/articles/web/Publications.html","id":"original-contractpackage-documentation-2013","dir":"Articles > Web","previous_headings":"R package","what":"Original Contract/Package documentation (2013)","title":"Publications","text":"Scott-Hayward L..S., Oedekoven C., Mackenzie M.L., Walker C.G., Rexstad E. (2013). “User Guide MRSea Package: Statistical Modelling bird cetacean distributions offshore renewables development areas.” University St. Andrews. Contract Marine Scotland: SB9 (CR/2012/05) Mackenzie, M.L, Scott-Hayward, L..S., Oedekoven, C.S., Skov, H., Humphreys, E., Rexstad E. (2013). Statistical Modelling Seabird Cetacean data: Guidance Document. University St. Andrews contract Marine Scotland; SB9 (CR/2012/05). Marine Scotland Science Report 04/14","code":""},{"path":[]},{"path":"http://lindesaysh.github.io/MRSea/articles/web/Publications.html","id":"d-cress-basis","dir":"Articles > Web","previous_headings":"Methods","what":"2D CReSS basis:","title":"Publications","text":"Scott-Hayward L..S., Mackenzie M.L., Walker C.G., Donovan C., Ashe E. (2014). “Complex Region Spatial Smoother CReSS.” Journal Computational Graphical Statistics, 23(2), 340-360. Online Scott-Hayward, L..S., Mackenzie, M.L., Ashe, E. R. Williams. Modelling Killer Whale feeding behaviour using spatially adaptive Complex Region Spatial Smoother (CReSS) Generalised Estimating Equations (GEEs). JABES (2015). DOI: 10.1007/s13253-015-0209-2","code":""},{"path":"http://lindesaysh.github.io/MRSea/articles/web/Publications.html","id":"salsa-1d-algorithm","dir":"Articles > Web","previous_headings":"Methods","what":"SALSA 1D Algorithm:","title":"Publications","text":"Walker C.G., Mackenzie M.L., Donovan C., O’Sullivan M. (2010). “SALSA - Spatially Adaptive Local Smoothing Algorithm.” Journal Statistical Computation Simulation, 81(2), 179-191. Online ","code":""},{"path":"http://lindesaysh.github.io/MRSea/articles/web/Publications.html","id":"d-salsa-algorithm","dir":"Articles > Web","previous_headings":"Methods","what":"2D SALSA Algorithm:","title":"Publications","text":"Scott-Hayward, L..S., Mackenzie, M.L., Walker, C.G., Shatumbu, G., Kilian, J.W., du Preez, P., 2023. Automated surface feature selection using SALSA2D; illustration using elephant mortality data Etosha National Park. https://doi.org/10.48550/arXiv.2202.07977 Scott-Hayward, L..S. (2013) PhD Thesis: Novel Applications Species Distribution Mapping Including Spatial Models Complex Regions. Chapter 5: Spatially Adaptive Models Complex Topographies. Online ","code":""},{"path":"http://lindesaysh.github.io/MRSea/articles/web/RenewablesCaseStudy_MRSea.html","id":"introduction","dir":"Articles > Web","previous_headings":"","what":"Introduction","title":"Example Baseline Characterisation Analysis for an Offshore Renewables Development Area","text":"data visual aerial transect data Nysted windfarm area Denmark provided University St Andrews Aarhus University. two years data (2001 2002) surveys undertaken January, February March. response counts long tailed ducks distance corrected. transect segmented 500m pieces strip width approximately 2km.","code":"library(ggplot2) library(MRSea) library(dplyr) count.data <- readRDS(\"data/nystedphaseA.rds\") ptheme <-  ggplot() + theme(legend.text=element_text(size=10),           plot.title = element_text(size=14, face=\"bold\"),           axis.text=element_text(size=12),           axis.title=element_text(size=12,face=\"bold\"),           panel.grid.major = element_blank(),           panel.grid.minor = element_blank()) +   theme_bw() + coord_equal() plotbreaks<-waiver() p<-ptheme +   geom_point(data=filter(count.data, Count==0), aes(x = x.pos, y = y.pos),shape=16, colour='thistle', alpha=0.8, size=1) +    geom_point(data=filter(count.data, Count>0), aes(x = x.pos, y = y.pos, size = Count), alpha=0.45, colour='red') +    scale_size_area(breaks=plotbreaks) +    xlab(\"Easting\") + ylab(\"Northing\") +   facet_wrap(~YearMonth, ncol=3) p"},{"path":"http://lindesaysh.github.io/MRSea/articles/web/RenewablesCaseStudy_MRSea.html","id":"analysis","dir":"Articles > Web","previous_headings":"","what":"Analysis","title":"Example Baseline Characterisation Analysis for an Offshore Renewables Development Area","text":"Since response data adjusted counts expect quasi-Poisson Tweedie distribution appropriate data. variables available depth x y coordinates (UTMs). also area associated segment offset preferred.","code":""},{"path":"http://lindesaysh.github.io/MRSea/articles/web/RenewablesCaseStudy_MRSea.html","id":"co-linearity-check","dir":"Articles > Web","previous_headings":"Analysis","what":"Co-linearity check","title":"Example Baseline Characterisation Analysis for an Offshore Renewables Development Area","text":"Fit simple model assess variables co-linearity. assessment family important simplicity choose quasi-Poisson. GVIFs suggest co-linearity issues may use available variables.","code":"simpleModel <- glm(Count ~ as.factor(YearMonth) +                    Depth + x.pos + y.pos + offset(log(Area)), family = quasipoisson, data = count.data) car::vif(simpleModel) #>                          GVIF Df GVIF^(1/(2*Df)) #> as.factor(YearMonth) 1.001860  5        1.000186 #> Depth                4.666708  1        2.160256 #> x.pos                1.585197  1        1.259046 #> y.pos                5.386125  1        2.320803"},{"path":"http://lindesaysh.github.io/MRSea/articles/web/RenewablesCaseStudy_MRSea.html","id":"selection-of-1d-covariates","dir":"Articles > Web","previous_headings":"Analysis","what":"Selection of 1D Covariates","title":"Example Baseline Characterisation Analysis for an Offshore Renewables Development Area","text":"use function runSALSA1D select covariates included whether smooth. SALSA selects smoothness term (number location knots) default, 10-fold cross-validation (CV) used choose best smooth term, linear term term . allow removal process user may set removal = FALSE parameter function runSALSA1D. wish make predictions model fitted, prediction grid created specified. splines fitted (B-splines) unable make predictions outside range created. example, data range depth smaller range depths prediction data, predictions made. prediction grid, must ensure depth area columns named data depth values positive. Additionally, grid used means, reduce one single layer select one season one impact level. range predictions slightly wider range data, specify nysted.predictdata running SALSA. brief check quasi-Poisson model smooth depth indicated might merit checking use Tweedie distribution. information using Tweedie distribution, see vignette Using Tweedie Distribution  Now estimate Tweedie variance power parameter can start fitting models. Since intend use spatial coordinates 2D smooth later, ignore X Y coordinates now. fit 1D smooths, set initial model factor covariates offset term specify parameters required SALSA1D: preference use k-fold cross-validation fitness measure possible. However, can take long time fit models speed chosen use BIC vignette (version suitable Tweedie distribution). depth term try degree 2 (quadratic) B-spline natural spline. Note want use k-fold cross-validation fitness measure, need additional parameter list; cv.opts. code use 10-fold cross-validation shown run example. likely data correlated along transect add panel variable calculate robust standard errors. Later check residuals residual correlation confirm choice. panel variable unique survey-transect. approximately 23 transects per survey leading 153 panels. Note: data must ordered time along transect now try natural spline: Using either BIC score CV score, B spline preferred continue model. look model output can use built summary function (summary.gamMRSea) look summary model. Note robust standard errors given alongside raw standard errors information regarding panels bottom output. data point panel, independence assumed.","code":"data(\"nysted.predictdata\")  # contains predict.data # This is a spatial grid for making predictions.  All covariates in # final model must be in this data frame and the naming must be the # same as for the data  nysted.predictdata <- nysted.predictdata %>%   rename(Depth = depth,          Area = area) %>%   mutate(Depth = abs(Depth)) %>%   filter(impact==0, season==1) %>%   select(-starts_with(\"truth\")) range(count.data$Depth) #> [1]  0.35 28.63 range(nysted.predictdata$Depth) #> [1]  0.200 28.608 library(statmod) library(tweedie) profout <- tweedie.profile(Count ~ x.pos + y.pos + YearMonth + Depth,                            data=count.data,                            xi.vec = seq(1.01, 1.99, by=0.05), do.plot=TRUE) #> 1.01 1.06 1.11 1.16 1.21 1.26 1.31 1.36 1.41 1.46 1.51 1.56 1.61 1.66 1.71 1.76 1.81 1.86 1.91 1.96  #> ....................Done. profout$xi.max #> [1] 1.427347 count.data$response <- count.data$Count initialModel <- glm(response ~ as.factor(YearMonth) + offset(log(Area)),                     family=tweedie(var.power=profout$xi.max, link.power = 0),                     data = count.data) varlist = \"Depth\" salsa1dlist <- list(fitnessMeasure = \"BICtweedie\",                     minKnots_1d = 1,                     maxKnots_1d = 3,                     startKnots_1d = 1,                     degree = 2,                     gaps = 0,                     splines = \"bs\") salsa1dlist <- list(fitnessMeasure = \"cv.gamMRSea\",                     minKnots_1d = 2,                     maxKnots_1d = 3,                     startKnots_1d = 1,                     degree = 2,                     gaps = 0,                     cv.opts=list(cv.gamMRSea.seed=1, K=10)) # run SALSA salsa1dOutput.bs <- runSALSA1D(initialModel = initialModel,                             salsa1dlist = salsa1dlist,                             varlist = varlist,                             factorlist = c(\"YearMonth\"),                             predictionData = nysted.predictdata,                             datain = count.data,                             panelid = count.data$TransectID,                             removal = TRUE,                             suppress.printout = TRUE) salsa1dlist$splines = \"ns\" salsa1dOutput.ns <- runSALSA1D(initialModel = initialModel,                             salsa1dlist = salsa1dlist,                             varlist = varlist,                             factorlist = c(\"YearMonth\"),                             predictionData = nysted.predictdata,                             datain = count.data,                             panelid = count.data$TransectID,                             removal = TRUE,                             suppress.printout = TRUE) salsa1dOutput.bs$fitStat #> $fitStat #> [1] 23856.34 #>  #> $CV #> [1] 859.9413 salsa1dOutput.ns$fitStat #> $fitStat #> [1] 13898.11 #>  #> $CV #> [1] 861.3047 best1dmodel <- salsa1dOutput.bs$bestModel summary(best1dmodel) #>  #> Call: #> gamMRSea(formula = response ~ as.factor(YearMonth) + bs(Depth,  #>     knots = splineParams[[2]]$knots, degree = splineParams[[2]]$degree,  #>     Boundary.knots = splineParams[[2]]$bd) + offset(log(Area)),  #>     family = tweedie(var.power = 1.42734693877551, link.power = 0),  #>     data = count.data, splineParams = splineParams) #>  #> Deviance Residuals:  #>    Min      1Q  Median      3Q     Max   #> -4.620  -2.690  -1.707  -0.555  38.511   #>  #> Coefficients: #>                            Estimate Std. Error Robust S.E. t value Pr(>|t|)     #> (Intercept)                -0.92179    0.49388     0.37291  -2.472 0.013466 *   #> as.factor(YearMonth)2001/2  1.15122    0.40903     0.29093   3.957 7.67e-05 *** #> as.factor(YearMonth)2001/3  0.81349    0.42302     0.21144   3.847 0.000121 *** #> as.factor(YearMonth)2002/1 -0.01163    0.46790     0.27023  -0.043 0.965669     #> as.factor(YearMonth)2002/2 -0.14213    0.47683     0.22969  -0.619 0.536084     #> as.factor(YearMonth)2002/3  1.72226    0.39027     0.30042   5.733 1.03e-08 *** #> s(Depth)1                   6.43712    0.93383     0.92576   6.953 3.92e-12 *** #> s(Depth)2                  -7.78146    0.95741     0.91783  -8.478  < 2e-16 *** #> s(Depth)3                   0.45058    2.69728     1.38587   0.325 0.745097     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> (Dispersion parameter for Tweedie family taken to be 130.724) #>  #>     Null deviance: 77202  on 6499  degrees of freedom #> Residual deviance: 50103  on 6491  degrees of freedom #> AIC:  NA #>  #> Max Panel Size = 53; Number of panels = 153 #> Number of Fisher Scoring iterations: 6"},{"path":"http://lindesaysh.github.io/MRSea/articles/web/RenewablesCaseStudy_MRSea.html","id":"some-diagnostics","dir":"Articles > Web","previous_headings":"Analysis","what":"Some diagnostics","title":"Example Baseline Characterisation Analysis for an Offshore Renewables Development Area","text":"Now used Tweedie distribution, check assumed mean-variance relationship appropriate.  Tweedie distribution looks better choice Quasi-Poisson continue .","code":"plotMeanVar(best1dmodel)"},{"path":"http://lindesaysh.github.io/MRSea/articles/web/RenewablesCaseStudy_MRSea.html","id":"partial-plots","dir":"Articles > Web","previous_headings":"Analysis > Some diagnostics","what":"Partial Plots","title":"Example Baseline Characterisation Analysis for an Offshore Renewables Development Area","text":"Now smooth term selected depth variable, let’s look estimated relationship link scale response scale. can also assess likely differences surveys.","code":"runPartialPlots(best1dmodel,                 data=count.data,                 factorlist.in = c(\"YearMonth\"),                 varlist.in = varlist,                 showKnots = TRUE,                 type = \"link\",                 includeB0 = TRUE) #> [1] \"Making partial plots\" runPartialPlots(best1dmodel,                 data=count.data,                 factorlist.in = c(\"YearMonth\"),                 varlist.in = varlist,                 showKnots = TRUE,                 type = \"response\",                 includeB0 = TRUE) #> [1] \"Making partial plots\""},{"path":"http://lindesaysh.github.io/MRSea/articles/web/RenewablesCaseStudy_MRSea.html","id":"cumulative-residual-plots","dir":"Articles > Web","previous_headings":"Analysis > Some diagnostics","what":"Cumulative residual plots","title":"Example Baseline Characterisation Analysis for an Offshore Renewables Development Area","text":"can use cumulative residual plot indicate spline terms suitable. blue dots residuals black line line cumulative residuals. covariate plots (varlist) grey line indicates expect fitted covariate. .e. one fitted excessive knots grey dots residuals fitted model.  slight prediction shallow depths whole looks decent fit happy functional form depth relationship. show happens functional form inappropriate, can use model depth linear term re-assess partial plot cumulative residual plot. Now can see cumulative residuals get negative indicating systematic prediction depths 5m prediction 12m prediction higher depth values.","code":"plotCumRes(model = best1dmodel, varlist = 'Depth', variableonly = TRUE) #> [1] \"Calculating cumulative residuals\" badcovar <- update(initialModel, . ~ . + Depth) runPartialPlots(model = badcovar, data=count.data, varlist.in = \"Depth\") #> [1] \"Making partial plots\" plotCumRes(model = badcovar, varlist = 'Depth', variableonly = TRUE) #> [1] \"Calculating cumulative residuals\""},{"path":"http://lindesaysh.github.io/MRSea/articles/web/RenewablesCaseStudy_MRSea.html","id":"selection-of-flexibility-for-2d-smooth-term","dir":"Articles > Web","previous_headings":"Analysis","what":"Selection of flexibility for 2D smooth term","title":"Example Baseline Characterisation Analysis for an Offshore Renewables Development Area","text":"several options interaction terms depending might think spatial distribution changes time. basis figure introduction, looks like different distributions different surveys. three options: Fixed knot locations, replicated every survey different coefficients allowed (specified using interactionTerm = YearMonth list SALSA2D parameters). , model fitting, knot moves moves surfaces. Differing knot locations every survey (detailed Interaction vignette. set knot location acts one density surfaces. method takes much longer fit may become impractical large numbers surveys however useful differing geographic coverage different surveys. last option fit separate models surveys. choose option 2 slight difference coverage surveys many surveys make impractical. First must create grid knots used candidate knot locations. may take different every time run suggest saving knotgrid file /setting seed. 6 factor levels, choose 150 candidate knot locations survey giving us total 900 options. Figure showing candidate knot locations interaction levels create distance matrices ensure distance data survey 1 knots survey 1 computed distance knots data surveys infinity specify three columns datacoords knotcoords parameters makeDists. Note: ensure method works, data must ordered YearMonth order myknots see mean, let’s look distances last three knots first survey (YearMonth = 2001/1) first three second survey. selected 150 knots survey ’ll find change. can see, distance knots within survey computed, surveys infinity. set model little different included ## indicate lines changed/added. Note: interaction term specified list SALSA2D parameters factor level model main effect.","code":"myknots <- selectFctrKnots(count.data[,c(\"x.pos\", \"y.pos\", \"YearMonth\")],                             nk=150,                             s.eed=1) # # write.csv(myknots, file='knotgrid_fullanalysis.csv', row.names=F) # ~~~~~~~~~~~~~~~~~~~~~~~ ggplot() +   geom_point(data=count.data, aes(x.pos, y.pos)) +   geom_point(data=myknots, aes(x.pos, y.pos), colour='red') +   facet_wrap(~YearMonth, nrow=2) +   theme_bw() + xlab('Easting (Km)') + ylab('Northing (Km)') +     coord_equal() dists <- makeDists(datacoords = count.data[,c('x.pos', 'y.pos', 'YearMonth')],                     knotcoords = myknots,                     knotmat = TRUE) k2k <- dists$knotDist d2k <- dists$dataDist k2k[148:153, 148:153] #>           148       149      150      151      152      153 #> 148  0.000000  6.545602 19.90365      Inf      Inf      Inf #> 149  6.545602  0.000000 14.50510      Inf      Inf      Inf #> 150 19.903649 14.505103  0.00000      Inf      Inf      Inf #> 151       Inf       Inf      Inf  0.00000 17.31904 16.15195 #> 152       Inf       Inf      Inf 17.31904  0.00000 13.26928 #> 153       Inf       Inf      Inf 16.15195 13.26928  0.00000 startknotlocs <- selectFctrStartk(myknots, 5, s.eed = 4)"},{"path":"http://lindesaysh.github.io/MRSea/articles/web/RenewablesCaseStudy_MRSea.html","id":"model-fitting","dir":"Articles > Web","previous_headings":"Analysis > Selection of flexibility for 2D smooth term","what":"Model fitting","title":"Example Baseline Characterisation Analysis for an Offshore Renewables Development Area","text":"Set parameters SALSA2D: distance matrices (data knots knot knots), fit statistic min, max start knots. Run SALSA2D find appropriate number location knots 2D smooth term x.pos y.pos. model inputted SALSA algorithm model output 1D SALSA run. model chosen total 18 knots 2D smooth. want know many knots per surface need see knots selected. found splineParams object part model object. global depth term model, describes distribution birds, 2D smooth can change survey judiciously placing knots. case, 0 5 knots chosen survey.  now several models fitted: initial intercept model 1D smooth model 1 2D smooth model completeness, also fit 2D smooth model. can use set replace starting model initialModel might expected, model chosen knots 2D smooth (22) surface 1 5 knots.","code":"# make parameter set for running salsa2d -->  salsa2dlist<-list(fitnessMeasure = 'BICtweedie',                     knotgrid = myknots,                    startKnots = length(startknotlocs), ##                    minKnots=4,                      maxKnots=100,                     gap=0) salsa2dOutput<-runSALSA2D(model = best1dmodel,                           salsa2dlist = salsa2dlist,                           d2k = d2k,                           k2k = k2k,                           initialise=FALSE,  ##                           initialKnPos = startknotlocs, ##                           suppress.printout = TRUE) anova(salsa2dOutput$bestModel) #> Analysis of 'Wald statistic' Table #> Model: Tweedie, link: mu^0 #> Response: response #> Marginal Testing #> Max Panel Size = 53; Number of panels = 153 #>  #>                      Df      X2 P(>|Chi|)     #> as.factor(YearMonth)  5  71.045 6.206e-14 *** #> s(Depth)              3  97.920 < 2.2e-16 *** #> s(x.pos, y.pos)      13 119.234 < 2.2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 chosenknots <- myknots[salsa2dOutput$bestModel$splineParams[[1]]$knotPos,] count(chosenknots, YearMonth) #>   YearMonth n #> 1    2001/2 3 #> 2    2001/3 3 #> 3    2002/1 1 #> 4    2002/2 3 #> 5    2002/3 3 # quick look to see what was chosen ggplot(myknots) +   geom_point(aes(x=x.pos, y=y.pos)) +   geom_point(aes(x=x.pos, y=y.pos, size=2), data=chosenknots, alpha=4/5,               show.legend = FALSE, shape=5, colour=\"darkred\") +   theme_bw() + xlab('Easting (Km)') + ylab('Northing (Km)') +    coord_equal() +   facet_wrap(~YearMonth, ncol=3) salsa2dOutput2donly<-runSALSA2D(model = initialModel,                                 salsa2dlist = salsa2dlist,                                 d2k = d2k,                                 k2k = k2k,                                 initialise=FALSE,                                   initialKnPos = startknotlocs,                                  suppress.printout = TRUE) anova(salsa2dOutput2donly$bestModel) #> Analysis of 'Wald statistic' Table #> Model: Tweedie, link: mu^0 #> Response: response #> Marginal Testing #> Max Panel Size = 1 (independence assumed); Number of panels = 6500 #>  #>                      Df     X2 P(>|Chi|)     #> as.factor(YearMonth)  5 204.87 < 2.2e-16 *** #> s(x.pos, y.pos)      23 427.89 < 2.2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 chosenknots <- myknots[salsa2dOutput2donly$bestModel$splineParams[[1]]$knotPos,] count(chosenknots, YearMonth) #>   YearMonth n #> 1    2001/1 3 #> 2    2001/2 4 #> 3    2001/3 5 #> 4    2002/1 1 #> 5    2002/2 5 #> 6    2002/3 5"},{"path":"http://lindesaysh.github.io/MRSea/articles/web/RenewablesCaseStudy_MRSea.html","id":"model-selection","dir":"Articles > Web","previous_headings":"Analysis","what":"Model Selection","title":"Example Baseline Characterisation Analysis for an Offshore Renewables Development Area","text":"","code":"cv_2d <- cv.gamMRSea(data=count.data, modelobject = salsa2dOutput2donly$bestModel, K=10, s.eed=1)$delta[2] cv_1d2d <- cv.gamMRSea(data=count.data, modelobject = salsa2dOutput$bestModel, K=10, s.eed=1)$delta[2] cv_1d <- cv.gamMRSea(data=count.data, modelobject = best1dmodel, K=10, s.eed=1)$delta[2] cv_initial <- cv.gamMRSea(data=count.data, modelobject = initialModel, K=10, s.eed=1)$delta[2] finalmod<-salsa2dOutput2donly$bestModel anova(finalmod) #> Analysis of 'Wald statistic' Table #> Model: Tweedie, link: mu^0 #> Response: response #> Marginal Testing #> Max Panel Size = 1 (independence assumed); Number of panels = 6500 #>  #>                      Df     X2 P(>|Chi|)     #> as.factor(YearMonth)  5 204.87 < 2.2e-16 *** #> s(x.pos, y.pos)      23 427.89 < 2.2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"http://lindesaysh.github.io/MRSea/articles/web/RenewablesCaseStudy_MRSea.html","id":"making-predictions","dir":"Articles > Web","previous_headings":"Analysis","what":"Making Predictions","title":"Example Baseline Characterisation Analysis for an Offshore Renewables Development Area","text":"Plotting predictions survey.","code":"# repeat predictiongrid for each yearmonth preddata <- NULL for(ym in unique(count.data$YearMonth)){   tdat <- data.frame(nysted.predictdata, YearMonth = ym)   preddata <- rbind(preddata, tdat) } datacoords<-preddata[,c('x.pos', 'y.pos', 'YearMonth')] dists<-makeDists(datacoords = datacoords, knotcoords = myknots, knotmat = FALSE) g2k = dists$dataDist # make predictions on response scale preds<-predict(newdata = preddata,                g2k = g2k,                object = finalmod) require(RColorBrewer) preddata$preds<-preds[,1] p <- ptheme +   geom_tile(data=preddata, aes(x.pos, y.pos, fill=preds), height=0.5, width=0.5) +   facet_wrap(~YearMonth, ncol = 3) +   scale_fill_distiller(palette = \"Spectral\",name=\"Animal Counts\") +   xlab(\"Easting\") + ylab(\"Northing\") p p + scale_size_area(name='Raw Count',                      breaks=c(1, 5, 10, 50),                      labels=c('10', '50', '100', '500')) +     geom_point(data=filter(count.data, response>0),                 aes(x.pos, y.pos, size=response), colour=\"black\", shape=1, alpha=0.5)"},{"path":"http://lindesaysh.github.io/MRSea/articles/web/RenewablesCaseStudy_MRSea.html","id":"diagnostic-functions-in-the-mrsea-package","dir":"Articles > Web","previous_headings":"Analysis","what":"Diagnostic functions in the MRSea package","title":"Example Baseline Characterisation Analysis for an Offshore Renewables Development Area","text":"following sections assess model assumptions diagnostics assess performance model. detailed information diagnostics Model Diagnostics Vignette","code":""},{"path":"http://lindesaysh.github.io/MRSea/articles/web/RenewablesCaseStudy_MRSea.html","id":"residual-independence-assumption-check","dir":"Articles > Web","previous_headings":"Analysis > Diagnostic functions in the MRSea package","what":"Residual Independence Assumption Check","title":"Example Baseline Characterisation Analysis for an Offshore Renewables Development Area","text":"residuals correlated? Make suitable blocking structure, within residuals expected correlated independent. Use runACF assess blocking structure. ACF plot showing correlation block (grey lines), mean correlation lag across blocks (red line). anticipated, transects high lag one correlation must use robust standard errors inference. Alongside ACF plot, can also perform runs test assess correlation model residuals. Since data -dispersed, must use empirical distribution assessment: null hypothesis runs test residuals independent. small \\(p\\)-value indicates strong evidence null. confirms results ACF plot.","code":"runACF(block = count.data$TransectID, model = finalmod,        suppress.printout=TRUE) simData<-generateNoise(n=500, response=fitted(finalmod), family='tweedie', phi=summary(finalmod)$dispersion, xi = profout$xi.max) empdist<-getEmpDistribution(500, simData, finalmod, data=count.data,dots=FALSE) runsTest(residuals(finalmod, type='pearson'),emp.distribution=empdist) #>  #>  Runs Test - Two sided; Empirical Distribution #>  #> data:  residuals(finalmod, type = \"pearson\") #> Standardized Runs Statistic = -53.091, p-value < 2.2e-16"},{"path":"http://lindesaysh.github.io/MRSea/articles/web/RenewablesCaseStudy_MRSea.html","id":"mean-variance-assumption-check","dir":"Articles > Web","previous_headings":"Analysis > Diagnostic functions in the MRSea package","what":"Mean-variance Assumption check","title":"Example Baseline Characterisation Analysis for an Offshore Renewables Development Area","text":"essential component model assessment mean variance relationship. plot , dots observed mean variance several bins fitted data. blue dotted line assumed mean-variance relationship Tweedie distribution red line assumed Quasi Poisson.","code":"plotMeanVar(finalmod)"},{"path":"http://lindesaysh.github.io/MRSea/articles/web/RenewablesCaseStudy_MRSea.html","id":"rundiagnostics","dir":"Articles > Web","previous_headings":"Analysis > Diagnostic functions in the MRSea package","what":"runDiagnostics","title":"Example Baseline Characterisation Analysis for an Offshore Renewables Development Area","text":"function assesses model fit returns two plots: observed vs fitted fitted vs scaled Pearsons residual plots","code":"runDiagnostics(finalmod)"},{"path":"http://lindesaysh.github.io/MRSea/articles/web/RenewablesCaseStudy_MRSea.html","id":"influence-diagnostics","dir":"Articles > Web","previous_headings":"Analysis > Diagnostic functions in the MRSea package","what":"Influence diagnostics","title":"Example Baseline Characterisation Analysis for an Offshore Renewables Development Area","text":"functions assess influence different blocks data. case, block survey-transect. runInfluence function may take long time run worth check see roughly long might take. function produces two plots; one using COVRATIO statistic one PRESS statistic. COVRATIO assesses change precision parameter estimates block omitted whereas PRESS assesses sensitivity model predictions removal block.  outlying blocks COVRATIO plot values greater 1 indicating none blocks large influence precision estimates. one block strongly influencing abundance estimates model.  Unsurprisingly, transect largest observations including makes big difference estimates. assessing influential points see issues concern.","code":"timeInfluenceCheck(finalmod, id = count.data$TransectID) #> [1] \"Calculating the influence measures will take approximately 1 minutes\" inflpoints<-runInfluence(finalmod, id = count.data$TransectID) #> [1] \"Calculating COVRATIO and PRESS Statistics\" inflpoints$influenceData[inflpoints$influencePoints$press,] #>           blocks num.block     covratio   press #> 48  20010210.t25        41 5.718957e-09  648005 #> 74  20010316.t25        67 8.226645e-08  162556 #> 133  20020326.t6       150 1.370737e-08  119260 #> 135  20020326.t8       152 2.761644e-08   79763 #> 138 20020326.t11       130 3.326942e-08   73480 #> 139 20020326.t12       131 4.583203e-08  107760 #> 148 20020326.t21       141 2.879663e-08   90215 #> 149 20020326.t22       142 1.423051e-09 3597801 p<-ptheme +   geom_point(data=filter(count.data, Count==0), aes(x = x.pos, y = y.pos), shape=16, colour='thistle', alpha=0.8, size=1) +    geom_point(data=filter(count.data, Count>0), aes(x = x.pos, y = y.pos, size = Count), alpha=0.45, colour='red') +      geom_point(data=filter(count.data, Count==0, TransectID == '20020326.t22'), aes(x = x.pos, y = y.pos), shape=16, colour='blue', alpha=0.8, size=1) +    geom_point(data=filter(count.data, Count>0, TransectID == '20020326.t22'), aes(x = x.pos, y = y.pos, size = Count), alpha=0.45, colour='blue') +   scale_size_area(breaks=plotbreaks) +    xlab(\"Easting\") + ylab(\"Northing\") +   facet_wrap(~YearMonth, ncol=3) p"},{"path":"http://lindesaysh.github.io/MRSea/articles/web/RenewablesCaseStudy_MRSea.html","id":"spatial-residual-plots","dir":"Articles > Web","previous_headings":"Analysis > Diagnostic functions in the MRSea package","what":"Spatial Residual plots","title":"Example Baseline Characterisation Analysis for an Offshore Renewables Development Area","text":"largest residuals occur last survey large abundances recorded. model likely struggle reproduce since see regions systematic positive negative bias happy continue inference model.","code":"p <- ptheme +   geom_tile(data=count.data, aes(x.pos, y.pos, fill=response - fitted(finalmod)), height=0.5, width=0.5) +   facet_wrap(~YearMonth, ncol = 3) +   scale_fill_distiller(palette = \"Spectral\",name=\"Animal Counts\") +   xlab(\"Easting\") + ylab(\"Northing\") p"},{"path":[]},{"path":"http://lindesaysh.github.io/MRSea/articles/web/RenewablesCaseStudy_MRSea.html","id":"bootstrapped-confidence-intervals","dir":"Articles > Web","previous_headings":"Model Inference","what":"Bootstrapped Confidence Intervals","title":"Example Baseline Characterisation Analysis for an Offshore Renewables Development Area","text":"Next perform parametric bootstrap estimate uncertainty spatial model. (Note: detection function estimated, bootstrap can use detection function .) bootstraps can calculate 95-percentile based confidence intervals coefficient variation grid cell.","code":"bootPreds<-do.bootstrap.cress.robust(model.obj = finalmod,                                      predictionGrid = preddata,                                      g2k=g2k,                                      B = 500,                                      robust=TRUE) #load('predictionboot.RData') cis <- makeBootCIs(bootPreds) preddata <- preddata %>%      mutate(Lower2.5 = cis[,1],             Upper97.5 = cis[,2],             bootsd =  apply(bootPreds, 1, sd),            bootmean = apply(bootPreds, 1, mean),            bootmedian = apply(bootPreds, 1, median),            cv = bootsd / bootmean,            data.frame(bootPreds)) p <- ptheme +      geom_tile(data=preddata,                aes(x=x.pos, y=y.pos, fill=cv, height=0.5, width=0.5)) +      xlab('Easting (km)') + ylab('Northing (km)') +     scale_fill_gradient(name='Coefficient of\\nVariation',low = 'white', high='red') +      scale_size_area(name='Raw Count',                      breaks=c(1, 5, 10, 50),                      labels=c('10', '50', '100', '500')) +     geom_point(data=filter(count.data, response==0),                 aes(x.pos, y.pos), colour=\"grey\", size=0.1) +      geom_point(data=filter(count.data, response>0),                 aes(x.pos, y.pos, size=response), colour=\"black\", shape=1) +     facet_wrap(~YearMonth) p"},{"path":"http://lindesaysh.github.io/MRSea/articles/web/RenewablesCaseStudy_MRSea.html","id":"abundance-estimates","dir":"Articles > Web","previous_headings":"Model Inference","what":"Abundance Estimates","title":"Example Baseline Characterisation Analysis for an Offshore Renewables Development Area","text":"","code":"surveyests <- preddata %>%   group_by(YearMonth) %>%    summarise(areakm = sum(Area),             count=sum(preds),              count.lower=sum(Lower2.5),               count.upper=sum(Upper97.5),             density = count/sum(Area),             density.lower=count.lower/sum(Area),               density.upper=count.upper/sum(Area)) %>%  # mutate(date = factor(date, levels=unique(countdata$date))) %>%   arrange(YearMonth) surveyinfo <- count.data %>%    group_by(YearMonth) %>%   summarise(year=first(Year), month=first(Month), day=1)  surveyests<-left_join(surveyests, surveyinfo) ptheme +    geom_point(data = surveyests, aes(YearMonth, density, colour=as.factor(year))) +   geom_segment(data = surveyests, aes(x=YearMonth, y=density.lower, xend=YearMonth, yend=density.upper, colour=as.factor(year))) +   ylab(\"Estimated Density\") + xlab(\"Date\") +    theme(axis.text.x = element_text(angle=45, vjust=0.5)) +   scale_color_discrete(name=\"Year\") + coord_cartesian()"},{"path":"http://lindesaysh.github.io/MRSea/articles/web/RenewablesCaseStudy_MRSea.html","id":"difference-surfaces","dir":"Articles > Web","previous_headings":"Model Inference","what":"Difference Surfaces","title":"Example Baseline Characterisation Analysis for an Offshore Renewables Development Area","text":"Calculate differences two surfaces. example, can assess March 2001 2002. Plot differences indicate significant positive/negative differences lie. blue circles indicate significant negative difference (abundance less abundance ) red crosses indicate significant positive difference. colour cell indicates size difference.  general, birds March 2002 March 2001, biggest distributional difference central south east study site. Alternatively, look differences January March 2001.","code":"differences <- getDifferences(beforePreds =                       bootPreds[preddata$YearMonth == \"2001/3\", ],                       afterPreds = bootPreds[preddata$YearMonth == \"2002/3\", ]) diffpreds1 <- data.frame(preddata[preddata$YearMonth == \"2001/3\", ], data.frame(differences)) # The marker for each after - before difference: # positive ('1') and negative ('-') significant differences diffplot1 <- ptheme +     geom_tile(data = diffpreds1, aes(x=x.pos, y=y.pos,fill=mediandiff, height=sqrt(Area), width=sqrt(Area))) +    xlab('Easting (Km)') +    ylab('Northing (Km)') +    scale_fill_gradient2(low = 'blue4', mid = 'white', high = 'red4', guide='colourbar',na.value=\"grey50\", name='Differences \\nin Count') +    scale_colour_manual(values=c('darkblue', 'darkred')) +    geom_point(data=filter(diffpreds1, significanceMarker!=0),               aes(x=x.pos, y=y.pos,                   shape=as.factor(significanceMarker),                   colour=as.factor(significanceMarker)),              alpha=0.2, show.legend=FALSE) +   scale_shape_manual(values=c(1,3)) +   scale_size_manual(values=c(1,0.5)) +   ggtitle(\"2002/3 - 2001/3\")  diffplot1 differences <- getDifferences(beforePreds =                       bootPreds[preddata$YearMonth == \"2001/1\", ],                       afterPreds = bootPreds[preddata$YearMonth == \"2001/3\", ]) diffpreds2 <- data.frame(preddata[preddata$YearMonth == \"2001/3\",], data.frame(differences)) # The marker for each after - before difference: # positive ('1') and negative ('-') significant differences  diffplot2 <- ptheme +    geom_tile(data = diffpreds2, aes(x=x.pos, y=y.pos,fill=mediandiff, height=sqrt(Area), width=sqrt(Area))) +    xlab('Easting (Km)') +    ylab('Northing (Km)') +    scale_fill_gradient2(low = 'blue4', mid = 'white', high = 'red4', guide='colourbar',na.value=\"grey50\", name='Differences \\nin Count') +    scale_colour_manual(values=c('darkblue', 'darkred')) +    geom_point(data=filter(diffpreds2, significanceMarker!=0),               aes(x=x.pos, y=y.pos,                   shape=as.factor(significanceMarker),                   colour=as.factor(significanceMarker)),              alpha=0.2, show.legend=FALSE) +   scale_shape_manual(values=c(1,3)) +   scale_size_manual(values=c(1,0.5)) +   ggtitle(\"2001/3 - 2001/1\") diffplot2"},{"path":"http://lindesaysh.github.io/MRSea/articles/web/RenewablesCaseStudy_MRSea.html","id":"persistence-plots","dir":"Articles > Web","previous_headings":"Model Inference","what":"Persistence Plots","title":"Example Baseline Characterisation Analysis for an Offshore Renewables Development Area","text":"Lastly, might want know areas study region persistently high bird abundances. persistence score 1 indicates grid cell mean abundance every bootstrap every survey.  plot shows even though highest abundances recorded south east one survey, central area persistently high abundance regardless survey.","code":"boots<- select(preddata, starts_with(\"X\", ignore.case = FALSE)) nboots <- ncol(boots)  meandens <- mean(preddata$preds)  persistfun<-function(x, meandens){   ifelse(x>meandens, 1, 0) }  test <- apply(boots, 2, persistfun, meandens=meandens) preddata$persist <- apply(test, 1, sum)  persistdata<-tidyr::pivot_wider(data = preddata,                                 id_cols = c(Area, x.pos, y.pos),                                 names_from = YearMonth,                                 names_prefix = \"Persist_\",                                 values_from = persist) %>%   rowwise() %>%   mutate(Persistence= sum(c_across(starts_with(\"Persist_\")))/(length(unique(preddata$YearMonth)) * nboots)) persistplot <-ptheme +    geom_tile(data=persistdata, aes(x=x.pos, y=y.pos,fill=Persistence, height=sqrt(Area), width=sqrt(Area)))  + xlab('Easting (Km)') +   ylab('Northing (Km)') +   scale_fill_distiller(palette='Spectral', name='Persistence',limits = c(0,1))   persistplot"},{"path":"http://lindesaysh.github.io/MRSea/articles/web/TheTweedieDistribution_MRSea.html","id":"the-tweedie-distribution","dir":"Articles > Web","previous_headings":"","what":"The Tweedie distribution","title":"Using the Tweedie Distribution","text":"variance Tweedie distribution parametrised mean \\(\\mu\\) dispersion parameter \\(\\phi\\): \\[Var(y) = V(\\mu)\\phi = \\mu^\\xi\\phi\\] following distributions can achieved specifying following values \\(\\xi\\) Gaussian (\\(\\xi = 0\\)) Poisson (\\(\\xi = 1\\)) Gamma (\\(\\xi = 2\\)) Inverse Gaussian (\\(\\xi = 3\\)) zero inflated data, .e. response distribution mass zero (.e., exact zeros) otherwise continuous positive real numbers, values \\(\\xi\\) 1 2 particularly useful us.","code":""},{"path":"http://lindesaysh.github.io/MRSea/articles/web/TheTweedieDistribution_MRSea.html","id":"an-example-of-fitting-the-tweedie-distribution-in-r","dir":"Articles > Web","previous_headings":"The Tweedie distribution","what":"An example of fitting the tweedie distribution in R","title":"Using the Tweedie Distribution","text":"example, \\(\\xi = 1.1\\) model can described : \\[y_i \\sim Tw(\\mu_{}, \\phi, \\xi)\\] \\[log(\\mu_i) = \\beta_0 + \\beta_1x_i\\] \\[ Var(y_i) = \\mu_i^{1.1} \\phi\\] var.power specifies value \\(\\xi\\) link.power = 0 indicates log link used. example, tweedie(var.power=1, link.power=0) equivalent quasipoisson(link=\"log\"). Note: equivalent poisson(link=\"log\") dispersion set equal 1.","code":"library(statmod) glm(y ~ x, data=data,      family=tweedie(var.power = 1.1, link.power=0))"},{"path":"http://lindesaysh.github.io/MRSea/articles/web/TheTweedieDistribution_MRSea.html","id":"setup","dir":"Articles > Web","previous_headings":"The Tweedie distribution","what":"Setup","title":"Using the Tweedie Distribution","text":"Load data Fit simple intercept model show link tweedie quasipoisson. Two additional libraries required model fitting selection. statmod provides model family tweedie() tweedie package contains appropriate AIC. Fit Tweedie model \\(\\xi = 1\\) log link function. Fit equivalent model using quasipoisson distribution. Note two model outputs identical. reality though need find value \\(\\xi\\) best data. can use tweedie.profile function tweedie library. Note: function can take long time run.","code":"library(MRSea) library(dplyr) library(ggplot2) # load data data(ns.data.re) library(statmod) library(tweedie) fit_tw<- glm(birds ~ 1, family=tweedie(var.power=1, link.power = 0),data=ns.data.re) summary(fit_tw) #>  #> Call: #> glm(formula = birds ~ 1, family = tweedie(var.power = 1, link.power = 0),  #>     data = ns.data.re) #>  #> Deviance Residuals:  #>    Min      1Q  Median      3Q     Max   #> -1.717  -1.717  -1.717  -1.717  37.696   #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  0.38773    0.02399   16.16   <2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> (Dispersion parameter for Tweedie family taken to be 23.56597) #>  #>     Null deviance: 186644  on 27797  degrees of freedom #> Residual deviance: 186644  on 27797  degrees of freedom #> AIC: NA #>  #> Number of Fisher Scoring iterations: 7 fit_qp<- glm(birds ~ 1, family=quasipoisson(link=\"log\"),data=ns.data.re) summary(fit_qp) #>  #> Call: #> glm(formula = birds ~ 1, family = quasipoisson(link = \"log\"),  #>     data = ns.data.re) #>  #> Deviance Residuals:  #>    Min      1Q  Median      3Q     Max   #> -1.717  -1.717  -1.717  -1.717  37.696   #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  0.38773    0.02399   16.16   <2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> (Dispersion parameter for quasipoisson family taken to be 23.56596) #>  #>     Null deviance: 186644  on 27797  degrees of freedom #> Residual deviance: 186644  on 27797  degrees of freedom #> AIC: NA #>  #> Number of Fisher Scoring iterations: 7 profout <- tweedie.profile(birds ~ 1,                             data=ns.data.re,                            xi.vec = seq(1.01, 1.99, by=0.05), do.plot=TRUE) #> 1.01 1.06 1.11 1.16 1.21 1.26 1.31 1.36 1.41 1.46 1.51 1.56 1.61 1.66 1.71 1.76 1.81 1.86 1.91 1.96  #> ....................Done. profout2 <- tweedie.profile(birds ~ MonthOfYear + x.pos + y.pos + Year,                             data=ns.data.re,                            xi.vec = seq(1.01, 1.99, by=0.05), do.plot=TRUE) #> 1.01 1.06 1.11 1.16 1.21 1.26 1.31 1.36 1.41 1.46 1.51 1.56 1.61 1.66 1.71 1.76 1.81 1.86 1.91 1.96  #> ....................Done. profout$xi.max #> [1] 1.533469 profout2$xi.max #> [1] 1.514082"},{"path":"http://lindesaysh.github.io/MRSea/articles/web/TheTweedieDistribution_MRSea.html","id":"fitting-a-gammrsea-model","dir":"Articles > Web","previous_headings":"The Tweedie distribution","what":"Fitting a gamMRSea model","title":"Using the Tweedie Distribution","text":"Lets fit model data using one smooth variable; month year. Set initial model Tweedie distribution parameterised log link function (link.power=0) variance power (\\(\\xi\\)) equal output profiling (var.power =). Remember specify Tweedie specific fitness measure either AICtweedie BICtweedie.","code":"varlist=c('x.pos') ns.data.re$response <- ns.data.re$birds initialModel<- glm(response ~ 1, family=tweedie(var.power=profout2$xi.max, link.power = 0),data=ns.data.re) # set some input information for SALSA salsa1dlist<-list(fitnessMeasure = 'AICtweedie',                    minKnots_1d = c(1),                    maxKnots_1d = c(3),                    startKnots_1d = c(1),                    degree = c(2),                   gaps = c(0),                   splines = c(\"bs\")) # run SALSA salsa1dOutput<-runSALSA1D(initialModel,                            salsa1dlist,                            varlist = varlist,                            datain = ns.data.re,                           suppress.printout = TRUE) summary(salsa1dOutput$bestModel) #>  #> Call: #> gamMRSea(formula = response ~ bs(x.pos, knots = splineParams[[2]]$knots,  #>     degree = splineParams[[2]]$degree, Boundary.knots = splineParams[[2]]$bd),  #>     family = tweedie(var.power = 1.51408163265306, link.power = 0),  #>     data = ns.data.re, splineParams = splineParams) #>  #> Deviance Residuals:  #>    Min      1Q  Median      3Q     Max   #> -2.824  -2.065  -1.572  -1.285  18.351   #>  #> Coefficients: #>              Estimate Std. Error Robust S.E. t value Pr(>|t|)     #> (Intercept) -0.193025   0.062998    0.062998  -3.064  0.00219 **  #> s(x.pos)1   -1.847683   0.123556    0.123556 -14.954  < 2e-16 *** #> s(x.pos)2    2.380156   0.090935    0.090935  26.174  < 2e-16 *** #> s(x.pos)3   -0.001573   0.147135    0.147135  -0.011  0.99147     #> s(x.pos)4   -7.935174   0.471108    0.471108 -16.844  < 2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> (Dispersion parameter for Tweedie family taken to be 15.00317) #>  #>     Null deviance: 169879  on 27797  degrees of freedom #> Residual deviance: 139354  on 27793  degrees of freedom #> AIC:  NA #>  #> Max Panel Size = 1 (independence assumed); Number of panels = 27798 #> Number of Fisher Scoring iterations: 7 AICtweedie(salsa1dOutput$bestModel) #> [1] 62825.28 cv.gamMRSea(ns.data.re, salsa1dOutput$bestModel, K = 10, s.eed=1)$delta[2] #> [1] 33.01696 runPartialPlots(salsa1dOutput$bestModel, data=ns.data.re,                  varlist.in = varlist, showKnots = TRUE) #> [1] \"Making partial plots\" plotMeanVar(salsa1dOutput$bestModel)"},{"path":[]},{"path":"http://lindesaysh.github.io/MRSea/articles/web/TheTweedieDistribution_MRSea.html","id":"starting-point","dir":"Articles > Web","previous_headings":"Two dimensional Smoothing","what":"Starting point","title":"Using the Tweedie Distribution","text":"starting point one dimensional splines two dimensional smooth want. Load data Fit initial model. simplicity fit intercept model.","code":"# load data baselinedata <- filter(nysted.analysisdata, impact == 1, season == 1) profout <- tweedie.profile(response ~ x.pos + y.pos + depth,                             data=baselinedata,                            xi.vec = seq(1.01, 1.99, by=0.05), do.plot=TRUE) #> 1.01 1.06 1.11 1.16 1.21 1.26 1.31 1.36 1.41 1.46 1.51 1.56 1.61 1.66 1.71 1.76 1.81 1.86 1.91 1.96  #> ....................Done. initialModel<- glm(response ~ 1, family=tweedie(var.power=profout$xi.max, link.power = 0),data=baselinedata) kg <- getKnotgrid(baselinedata[, c(\"x.pos\", \"y.pos\")], numKnots = 300, plot = FALSE) # make distance matrices for datatoknots and knottoknots distMats<-makeDists(baselinedata[, c(\"x.pos\", \"y.pos\")], kg) # make prediction distance matrix.  preddata <- filter(nysted.predictdata, impact == 0, season == 1) p2k <-makeDists(preddata[, c(\"x.pos\", \"y.pos\")], kg, knotmat = FALSE)$dataDist # make parameter set for running salsa2D salsa2dlist<-list(fitnessMeasure = 'AICtweedie',                    knotgrid = na.omit(kg),                   startKnots=10,                    minKnots=2,                    maxKnots=20,                    gap=0) salsa2dOutput<-runSALSA2D(initialModel,                           salsa2dlist,                            d2k=distMats$dataDist,                           k2k=distMats$knotDist,                           basis = \"gaussian\", ##                           suppress.printout = TRUE) preddata$preds.g <- predict(object = salsa2dOutput$bestModel,                              newdata = preddata, g2k = p2k)  ggplot() +   geom_tile(data=preddata, aes(x.pos, y.pos, fill=preds.g,                                 height=sqrt(area), width=sqrt(area))) +    xlab(\"Easting (km)\") + ylab(\"Northing (km)\") + coord_equal() +   theme_bw() + ggtitle(\"Gaussian Basis\") +   scale_fill_distiller(palette = \"Spectral\",name=\"Animal Counts\") plotMeanVar(salsa2dOutput$bestModel)"},{"path":"http://lindesaysh.github.io/MRSea/articles/web/TheTweedieDistribution_MRSea.html","id":"raw-data-for-reference","dir":"Articles > Web","previous_headings":"","what":"Raw data for reference","title":"Using the Tweedie Distribution","text":"","code":"ggplot() +      geom_tile(data=baselinedata, aes(x.pos, y.pos, fill=response, height=sqrt(area), width=sqrt(area))) +       xlab(\"Easting (km)\") + ylab(\"Northing (km)\") + coord_equal() +      theme_bw() + ggtitle(\"Raw Data\") +      scale_fill_distiller(palette = \"Spectral\",name=\"Animal Counts\")"},{"path":"http://lindesaysh.github.io/MRSea/articles/web/UserRadiiChoice_MRSea.html","id":"introduction","dir":"Articles > Web","previous_headings":"","what":"Introduction","title":"User specified range parameters","text":"vignette describes user may specify choices choices driven variogram range parameter. may necessary occasions data patchy. Note page shows example use variogram method choosing sequence \\(r\\) parameters. effort made model data best way possible.","code":""},{"path":"http://lindesaysh.github.io/MRSea/articles/web/UserRadiiChoice_MRSea.html","id":"fitting-a-model","dir":"Articles > Web","previous_headings":"","what":"Fitting a model","title":"User specified range parameters","text":"data shall use example Danish offshore windfarm part MRSea package. data counts birds collected along transects number surveys years. first example, use data together assess relationship number birds sea depth.","code":"library(dplyr) library(MRSea) library(ggplot2) # load the data data(\"nysted.analysisdata\") wfdata <- filter(nysted.analysisdata, impact==0, season==1) # load the prediction grid data(\"nysted.predictdata\") preddata <- filter(nysted.predictdata, impact==0, season==1) ggplot(preddata) + geom_tile(aes(x=x.pos, y=y.pos, fill=truth.re, height=sqrt(area), width=sqrt(area))) +   scale_fill_distiller(palette = \"Spectral\",name=\"No. Birds\") +   xlab(\"Easting (km)\") + ylab(\"Northing (km)\") + theme_bw() +   ggtitle(\"The true surface\") ggplot(wfdata) + geom_tile(aes(x=x.pos, y=y.pos, fill=response, height=sqrt(area), width=sqrt(area))) +   scale_fill_distiller(palette = \"Spectral\",name=\"No. Birds\") +   xlab(\"Easting (km)\") + ylab(\"Northing (km)\") + theme_bw() +   ggtitle(\"Simulated Data\")"},{"path":"http://lindesaysh.github.io/MRSea/articles/web/UserRadiiChoice_MRSea.html","id":"fitting-a-2d-smooth","dir":"Articles > Web","previous_headings":"Fitting a model","what":"Fitting a 2D smooth","title":"User specified range parameters","text":"Set initial model offset term (required) specify parameters required. add offset size segment associated bird counts. reality, bird counts particular area counts per unit area. initial model contains offset information, specifies family model.","code":"initialModel <- glm(response ~ 1 + offset(log(area)),                      family = \"quasipoisson\",                      data = wfdata)"},{"path":"http://lindesaysh.github.io/MRSea/articles/web/UserRadiiChoice_MRSea.html","id":"set-up-for-the-2d-smooth","dir":"Articles > Web","previous_headings":"Fitting a model > Fitting a 2D smooth","what":"Set up for the 2D smooth:","title":"User specified range parameters","text":"Create knot grid. select 300 space-filled locations data. Calculate distances knot points data points also distances knots. Next specify additional parameters needed run SALSA2D algorithm: fit statistic min, max start knots. gap addition can (optionally) add parameter r_seq sequence range/radii values determining influence basis function. \\(r\\) parameter basis function. model initialises central value \\(r\\) sequence. r_seq specified model choose range parameters using existing getRadiiChoices() function. Using function 10 choices selected specifying salsa2dlist equivalent specifying letting runSALSA2D calculate .","code":"set.seed(123) knotgrid<- getKnotgrid(coordData = cbind(wfdata$x.pos, wfdata$y.pos),                        numKnots = 300,                        plot = FALSE) distMats <- makeDists(cbind(wfdata$x.pos, wfdata$y.pos), knotgrid) (rs.orig <- getRadiiSequence(method = \"original\",                              numberofradii = 10,                               distMatrix = distMats$dataDist,                               basis = \"gaussian\")) #>  [1] 0.13494303 0.11445820 0.09708303 0.08234548 0.06984514 0.05924239 #>  [7] 0.05024919 0.04262118 0.03615113 0.03066326 #> attr(,\"Method\") #> [1] \"Original\" # make parameter set for running salsa2d salsa2dlist<-list(fitnessMeasure = 'QBIC',                   knotgrid = knotgrid,                   startKnots = 10,                   minKnots = 4,                   maxKnots = 15,                   gap = 0,                   r_seq = rs.orig) ##"},{"path":"http://lindesaysh.github.io/MRSea/articles/web/UserRadiiChoice_MRSea.html","id":"alternatively-using-a-variogram-to-choose-radii","dir":"Articles > Web","previous_headings":"Fitting a model > Fitting a 2D smooth","what":"Alternatively using a variogram to choose radii","title":"User specified range parameters","text":"Fit variogram location response data using gstat package R (Pebesma 2004). Use spherical model find range parameter (distance response values considered longer correlated) Use central value sequence (value gamMRSea model initialise ) Create sequence values allow local global bases. based lags chosen function gstat::variogram. sequence \\(r\\)’s rs object also contains table part attributes. shows variogram model fit range parameter used central point sequence. case, range parameter 10.09 suggests average, spatial correlation decays approximately 10km. Visualising bases: look two methods (default vs variogram) can look min, max middle bases sequence appear. Note variogram method always odd length sequence owing sequence based middle value.  huge difference original variogram method suggests slightly smaller bases general. Note variogram method selects small range compared size distances available surface model may support many knots. case might consider starting larger number.","code":"rs <- getRadiiSequence(method = \"variogram\",                       numberofradii = 10,                       xydata = wfdata[, c(\"x.pos\", \"y.pos\")],                       response = log(wfdata$NHAT + 1),                        basis = \"gaussian\",                       distMatrix = distMats$dataDist) rs #> [1] 0.21110373 0.14048068 0.10526509 0.08416634 0.07011323 0.06008152 0.05256114 #> [8] 0.04671397 0.04203751 #> attr(,\"Method\") #> [1] \"Variogram\" #> attr(,\"vg.fit\") #>   model     psill    range #> 1   Nug 0.2903582  0.00000 #> 2   Sph 0.2298275 10.08521 par(mfrow=c(3,2)) b1 <-LRF.g(radiusIndices = 1, dists = distMats$dataDist, radii = rs, aR =  149) fields::quilt.plot(wfdata$x.pos, wfdata$y.pos, b1, zlim=c(0,1), main=\"r1 variogram\") b1.orig <-LRF.g(radiusIndices = 1, dists = distMats$dataDist, radii = rs.orig, aR =  149) fields::quilt.plot(wfdata$x.pos, wfdata$y.pos, b1.orig, zlim=c(0,1), main=\"r1 original\")  b5 <-LRF.g(radiusIndices = 5, dists = distMats$dataDist, radii = rs, aR =  149) fields::quilt.plot(wfdata$x.pos, wfdata$y.pos, b5, zlim=c(0,1), main=\"r5 variogram\") b5.orig <-LRF.g(radiusIndices = 5, dists = distMats$dataDist, radii = rs.orig, aR =  149) fields::quilt.plot(wfdata$x.pos, wfdata$y.pos, b5.orig, zlim=c(0,1), main=\"r5 original\")  b9 <-LRF.g(radiusIndices = 9, dists = distMats$dataDist, radii = rs, aR =  149) fields::quilt.plot(wfdata$x.pos, wfdata$y.pos, b9, zlim=c(0,1), main=\"r9 variogram\") b10.orig <-LRF.g(radiusIndices = 10, dists = distMats$dataDist, radii = rs.orig, aR =  149) fields::quilt.plot(wfdata$x.pos, wfdata$y.pos, b10.orig, zlim=c(0,1), main=\"r10 original\")"},{"path":"http://lindesaysh.github.io/MRSea/articles/web/UserRadiiChoice_MRSea.html","id":"fitting-the-models","dir":"Articles > Web","previous_headings":"Fitting a model > Fitting a 2D smooth","what":"Fitting the models:","title":"User specified range parameters","text":"Let’s look modelling differences. First original parametrisation. Change \\(r\\) sequence variogram method.","code":"# make parameter set for running salsa2d salsa2dlist<-list(fitnessMeasure = 'QBIC',                   knotgrid = knotgrid,                   startKnots = 10,                   minKnots = 4,                   maxKnots = 15,                   gap = 0,                   r_seq = rs.orig) ## salsa2dOutput.origr <- runSALSA2D(model = initialModel,                           salsa2dlist = salsa2dlist,                           d2k=distMats$dataDist,                           k2k=distMats$knotDist,                           suppress.printout = TRUE) salsa2dOutput.origr <- salsa2dOutput.origr$bestModel salsa2dlist$r_seq <- rs  salsa2dOutput.vario <-runSALSA2D(model = initialModel,                           salsa2dlist = salsa2dlist,                           d2k=distMats$dataDist,                           k2k=distMats$knotDist,                           suppress.printout = TRUE)  salsa2dOutput.vario <- salsa2dOutput.vario$bestModel"},{"path":"http://lindesaysh.github.io/MRSea/articles/web/UserRadiiChoice_MRSea.html","id":"assessment-of-outputs","dir":"Articles > Web","previous_headings":"","what":"Assessment of outputs","title":"User specified range parameters","text":"variogram method chose one knot similar indexes (smaller radii equivalent index default method) lower, therefore better, CV score default.","code":"# radius indices salsa2dOutput.origr$splineParams[[1]]$radiusIndices #> [1] 4 5 5 5 5 5 salsa2dOutput.vario$splineParams[[1]]$radiusIndices #> [1] 4 4 4 4 4 4 4 # CV scores cv.gamMRSea(wfdata, salsa2dOutput.origr, K=10, s.eed=154)$delta[2] #> [1] 10.05107 cv.gamMRSea(wfdata, salsa2dOutput.vario, K=10, s.eed=154)$delta[2] #> [1] 10.03927"},{"path":"http://lindesaysh.github.io/MRSea/articles/web/UserRadiiChoice_MRSea.html","id":"predictions","dir":"Articles > Web","previous_headings":"Assessment of outputs","what":"Predictions","title":"User specified range parameters","text":"Predictions models. following plots show model predictions locations knots.","code":"preddist<-makeDists(cbind(preddata$x.pos, preddata$y.pos),                  knotgrid, knotmat=FALSE)$dataDist  # make predictions on response scale preds.orig<-predict(newdata = preddata,                g2k = preddist,                object = salsa2dOutput.origr)  preds.vario<-predict(newdata = preddata,                g2k = preddist,                object = salsa2dOutput.vario) a <- ggplot(preddata) +    geom_tile(aes(x=x.pos, y=y.pos, fill=preds.orig, height=sqrt(area), width=sqrt(area))) +   scale_fill_distiller(palette = \"Spectral\",name=\"No. Birds\") +   xlab(\"Easting (km)\") + ylab(\"Northing (km)\") + theme_bw() +   coord_equal() +   geom_point(data=data.frame(knotgrid[salsa2dOutput.origr$splineParams[[1]]$knotPos,]), aes(X1, X2))+   ggtitle(\"Default r\")  b <- ggplot(preddata) +    geom_tile(aes(x=x.pos, y=y.pos, fill=preds.vario, height=sqrt(area), width=sqrt(area))) +   scale_fill_distiller(palette = \"Spectral\",name=\"No. Birds\") +   xlab(\"Easting (km)\") + ylab(\"Northing (km)\") + theme_bw() +   coord_equal()+   geom_point(data=data.frame(knotgrid[salsa2dOutput.vario$splineParams[[1]]$knotPos,]), aes(X1, X2)) +   ggtitle(\"Variogram based r\")  ggpubr::ggarrange(a,b, common.legend = TRUE, ncol = 1, legend = \"right\")"},{"path":"http://lindesaysh.github.io/MRSea/articles/web/UserRadiiChoice_MRSea.html","id":"links-between-the-range-from-the-variogram-and-the-range-parameter-in-the-rbfs","dir":"Articles > Web","previous_headings":"","what":"Links between the range from the variogram and the range parameter in the RBF’s:","title":"User specified range parameters","text":"Gaussian RBF defined (Scott-Hayward et al. 2022) : \\[e^{-(d*r)^2}\\] may equally presented : \\[e^{-(d⁄(2\\sigma^2))}\\] latter equation, σ represents range parameter link \\(r\\) parameter : \\(r= \\sqrt{2}\\sigma\\) exponential RBF defined (Scott-Hayward et al. 2015) : \\[e^{(d⁄r^2)}\\] may also presented \\[e^{(d⁄V)}\\] case, \\(V\\) represents range parameter link \\(r\\) parameter \\(r=\\sqrt{V}\\) models fitted , range parameter found 10 indicating average ceased spatial correlation approximately 10 km.","code":""},{"path":[]},{"path":"http://lindesaysh.github.io/MRSea/articles/website_examples.html","id":"package-examples","dir":"Articles","previous_headings":"","what":"Package examples","title":"Examples on the MRSea website","text":"examples/tutorials available (https://lindesaysh.github.io/MRSea) Distance Sampling Types Uni Bivariate Splines ‘MRSea: Geodesic Distance Calculation’ ‘MRSea: 2D Interaction Example’ MRSea: Marine Renewables Strategic Environmental Assessment Model Diagnostics Publications Example Baseline Characterisation Analysis Offshore Renewables Development Area Using Tweedie Distribution User specified range parameters","code":""},{"path":"http://lindesaysh.github.io/MRSea/articles/website_examples.html","id":"package-vignettes","dir":"Articles","previous_headings":"","what":"Package vignettes","title":"Examples on the MRSea website","text":"package vignettes also available (https://lindesaysh.github.io/MRSea) Getting Started MRSea: One dimensional smoothing Getting Started MRSea: Two dimensional smoothing Examples MRSea website","code":""},{"path":"http://lindesaysh.github.io/MRSea/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lindesay Scott-Hayward. Author, maintainer, copyright holder.            Lindesay Scott-Hayward wrote original main code continues develop maintain code Cameron Walker. Author, copyright holder.            Cameron Walker wrote original SALSA functions Monique Mackenzie. Author, copyright holder.            Monique Mackenzie wrote SALSA code provides testing, bugfixes new ideas Cornelia Oedekoven. Contributor.            Cornelia Oedekoven wrote code distance sampling","code":""},{"path":"http://lindesaysh.github.io/MRSea/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Scott-Hayward L, Mackenzie M, Walker C, Donovan C, Ashe E (2014). “Complex Region Spatial Smoother CReSS.” Journal Computational Graphical Statistics, 23(2), 340-360. Walker C, Mackenzie M, Donovan C, O'Sullivan M (2010). “SALSA - Spatially Adaptive Local Smoothing Algorithm.” Journal Statistical Computation Simulation, 81(2), 179-191. Scott-Hayward L, Walker C, Mackenzie M (2021). “Vignette MRSea Package v1.3: Statistical Modelling bird cetacean distributions offshore renewables development areas.” University St. Andrews. Centre Research Ecological Environmental Modelling, https://github.com/lindesaysh/MRSea/tree/master/vignettes. Scott-Hayward L, Oedekoven C, Mackenzie M, Walker C (2014). MRSea package: Statistical Modelling bird cetacean distributions offshore renewables development areas. University St. Andrews: Contract Marine Scotland: SB9 (CR/2012/05), http://creem2.st-.ac.uk/software.aspx. Scott-Hayward L, Oedekoven C, Mackenzie M, Walker C, Rexstad E (2013). “User Guide MRSea Package: Statistical Modelling bird cetacean distributions offshore renewables development areas.” University St. Andrews. Contract Marine Scotland: SB9 (CR/2012/05), http://creem2.st-.ac.uk/software.aspx.","code":"@Article{scott2014,   author = {Lindesay A.S. Scott-Hayward and Monique L. Mackenzie and Cameron G. Walker and Carl R. Donovan and Erin Ashe},   journal = {Journal of Computational and Graphical Statistics},   number = {2},   pages = {340-360},   title = {Complex Region Spatial Smoother CReSS},   volume = {23},   year = {2014}, } @Article{Walk2011,   title = {SALSA - A Spatially Adaptive Local Smoothing Algorithm},   author = {Cameron G. Walker and Monique L. Mackenzie and Carl R. Donovan and Michael J. O'Sullivan},   journal = {Journal of Statistical Computation and Simulation},   year = {2010},   volume = {81},   number = {2},   pages = {179-191}, } @TechReport{mrsea-guide2021,   title = {Vignette for the MRSea Package v1.3: Statistical Modelling of bird and cetacean distributions in offshore renewables development areas.},   author = {Lindesay A.S. Scott-Hayward and Cameron G. Walker and Monique L. Mackenzie},   institution = {University of St. Andrews},   year = {2021},   note = {Centre for Research into Ecological and Environmental Modelling},   url = {https://github.com/lindesaysh/MRSea/tree/master/vignettes}, } @Manual{mrsea-package,   title = {MRSea package: Statistical Modelling of bird and cetacean distributions in offshore renewables development areas},   author = {Lindesay A.S. Scott-Hayward and Cornelia S. Oedekoven and Monique L. Mackenzie and Cameron G. Walker},   institution = {University of St. Andrews: Contract with Marine Scotland: SB9 (CR/2012/05)},   year = {2014},   note = {University of St. Andrews: Contract with Marine Scotland: SB9 (CR/2012/05)},   url = {http://creem2.st-and.ac.uk/software.aspx}, } @TechReport{mrsea-guide,   title = {User Guide for the MRSea Package: Statistical Modelling of bird and cetacean distributions in offshore renewables development areas},   author = {Lindesay A.S. Scott-Hayward and Cornelia S. Oedekoven and Monique L. Mackenzie and Cameron G. Walker and Eric Rexstad},   institution = {University of St. Andrews},   year = {2013},   note = {Contract with Marine Scotland: SB9 (CR/2012/05)},   url = {http://creem2.st-and.ac.uk/software.aspx}, }"},{"path":"http://lindesaysh.github.io/MRSea/index.html","id":"mrsea","dir":"","previous_headings":"","what":"Spatially adaptive regression splines using SALSA","title":"Spatially adaptive regression splines using SALSA","text":"latest stable version 1.6 (30/04/2024) latest development version development branch. MRSea packages allows fitting spatially adaptive regression splines using SALSA. developed examine animal survey data signs changes animal abundance distribution following marine renewables development. However methods suitable wide range applications. functions package can used analyse segmented line transect (alongside mrds package) digital aerial data. package includes functions fitting spatially adaptive one 2D smoothers using SALSA CReSS. Euclidean Geodesic distances can used underpin smoothed 2D surface choice Gaussian exponential radial basis functions available. Non-parametric bootstrapping available estimate uncertainty. Several model assessment tools also available. models residual correlation, direct estimation robust standard errors, given panel structure, available. Recent updates include reinstatement natural cubic splines, Tweedie distribution package website additional materials.","code":""},{"path":"http://lindesaysh.github.io/MRSea/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Spatially adaptive regression splines using SALSA","text":"can install latest bugfix release MRSea GitHub : can install development version MRSea GitHub : package may also downloaded .zip .tar.gz latest release","code":"# install.packages(\"devtools\") devtools::install_github(\"lindesaysh/MRSea\", ref=\"stable\") devtools::install_github(\"lindesaysh/MRSea\", ref=\"development\")"},{"path":"http://lindesaysh.github.io/MRSea/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Spatially adaptive regression splines using SALSA","text":"two “Getting Started” vignettes available package: Getting Started MRSea: One dimensional smoothing Getting Started MRSea: Two dimensional smoothing also website along number tutorials.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/acffunc.html","id":null,"dir":"Reference","previous_headings":"","what":"calculate correlation for residuals by block — acffunc","title":"calculate correlation for residuals by block — acffunc","text":"calculate correlation residuals block","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/acffunc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calculate correlation for residuals by block — acffunc","text":"","code":"acffunc(block, model, suppress.printout = TRUE)"},{"path":"http://lindesaysh.github.io/MRSea/reference/acffunc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calculate correlation for residuals by block — acffunc","text":"block Vector blocks identify data points correlated model Fitted model object (glm gam) suppress.printout (Default: TRUE. Logical stating whether show printout block numbers assess progress. FALSE show printout.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/AICh.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to calculate AICh (Hardin and Hilbe 2013) — AICh","title":"Function to calculate AICh (Hardin and Hilbe 2013) — AICh","text":"Function calculate AICh (Hardin Hilbe 2013)","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/AICh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to calculate AICh (Hardin and Hilbe 2013) — AICh","text":"","code":"AICh(model)"},{"path":"http://lindesaysh.github.io/MRSea/reference/AICh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to calculate AICh (Hardin and Hilbe 2013) — AICh","text":"model model object class glm.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/AICh.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function to calculate AICh (Hardin and Hilbe 2013) — AICh","text":"Lindesay Scott-Hayward, University St Andrews","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/anova.gamMRSea.html","id":null,"dir":"Reference","previous_headings":"","what":"Anova Tables for gamMRSea Models — anova.gamMRSea","title":"Anova Tables for gamMRSea Models — anova.gamMRSea","text":"Calculates type-III analysis--variance tables model objects produced gamMRSea (MRSea package). Wald chisquare tests calculated default although, F-tests may specified.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/anova.gamMRSea.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Anova Tables for gamMRSea Models — anova.gamMRSea","text":"","code":"# S3 method for gamMRSea anova(object, varshortnames = NULL, panelid = NULL, test = \"Wald\")"},{"path":"http://lindesaysh.github.io/MRSea/reference/anova.gamMRSea.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Anova Tables for gamMRSea Models — anova.gamMRSea","text":"object gamMRSea model object varshortnames (default = NULL).  Character vector denoting short names use smooth terms.  May already specified part model object. panelid vector length data used object.  Specified robust standard errors used. test (default='wald'). May also specify \"F\".","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/anova.gamMRSea.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Anova Tables for gamMRSea Models — anova.gamMRSea","text":"object class \"anova\".","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/anova.gamMRSea.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Anova Tables for gamMRSea Models — anova.gamMRSea","text":"","code":"# load data data(ns.data.re) ns.data.re$foldid<-getCVids(ns.data.re, folds=5)   model<-gamMRSea(birds ~ observationhour + as.factor(floodebb) + as.factor(impact),                 family='poisson', data=ns.data.re) anova(model)         #> Analysis of 'Wald statistic' Table #> Model: poisson, link: log #> Response: birds #> Marginal Testing #> Max Panel Size = 1 (independence assumed); Number of panels = 27798 #>  #>                     Df     X2 P(>|Chi|)     #> observationhour      1 3722.9 < 2.2e-16 *** #> as.factor(floodebb)  2  658.1 < 2.2e-16 *** #> as.factor(impact)    1   18.9 1.376e-05 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"http://lindesaysh.github.io/MRSea/reference/bootstrap.orig.data.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtaining a data frame of bootstrapped data using resamples — bootstrap.orig.data","title":"Obtaining a data frame of bootstrapped data using resamples — bootstrap.orig.data","text":"function extracts records corresponding resample original distance data pastes together new data frame returned.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/bootstrap.orig.data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtaining a data frame of bootstrapped data using resamples — bootstrap.orig.data","text":"","code":"bootstrap.orig.data(orig.data, resample, new.resamples, resamples.no)"},{"path":"http://lindesaysh.github.io/MRSea/reference/bootstrap.orig.data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtaining a data frame of bootstrapped data using resamples — bootstrap.orig.data","text":"orig.data Original data bootstrapped resample Specifies resampling unit bootstrapping, default transect.id. Must match column name orig.data exactly new.resamples String resampled units data[,\"resample\"]. Created create.bootstrap.data() resamples.Length new.resamples","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/bootstrap.orig.data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtaining a data frame of bootstrapped data using resamples — bootstrap.orig.data","text":"Returns bootstrapped data. Internal function called function create.bootstrap.data.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/bootstrap.orig.data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtaining a data frame of bootstrapped data using resamples — bootstrap.orig.data","text":"","code":"data(dis.data.re) resample<-\"transect.id\" samples<-unique(dis.data.re[,resample]) resamples.no<-length(samples) new.resamples<-sample(samples,resamples.no,replace=TRUE) bootstrap.data<-bootstrap.orig.data(dis.data.re,resample,new.resamples,resamples.no)"},{"path":"http://lindesaysh.github.io/MRSea/reference/checkfactorlevelcounts.html","id":null,"dir":"Reference","previous_headings":"","what":"Factor level response check\r\n\r\nThis function checks that there are some non-zero counts in each level of each factor variable for consideration in a model — checkfactorlevelcounts","title":"Factor level response check\r\n\r\nThis function checks that there are some non-zero counts in each level of each factor variable for consideration in a model — checkfactorlevelcounts","text":"Factor level response check function checks non-zero counts level factor variable consideration model","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/checkfactorlevelcounts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factor level response check\r\n\r\nThis function checks that there are some non-zero counts in each level of each factor variable for consideration in a model — checkfactorlevelcounts","text":"","code":"checkfactorlevelcounts(factorlist, data, response)"},{"path":"http://lindesaysh.github.io/MRSea/reference/checkfactorlevelcounts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factor level response check\r\n\r\nThis function checks that there are some non-zero counts in each level of each factor variable for consideration in a model — checkfactorlevelcounts","text":"factorlist Vector factor variables specified model.  Specified check can made non-zero counts levels factor. data Data frame containing columns covariates listed factorlist.  Column names must match names factorlist response vector response values","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/checkfactorlevelcounts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Factor level response check\r\n\r\nThis function checks that there are some non-zero counts in each level of each factor variable for consideration in a model — checkfactorlevelcounts","text":"","code":"# load data data(ns.data.re)  checkfactorlevelcounts(factorlist=c('floodebb', 'impact'), ns.data.re,       ns.data.re$birds) #> [1] \"floodebb will be fitted as a factor variable; there are non-zero counts for all levels\" #> [1] \"impact will be fitted as a factor variable; there are non-zero counts for all levels\""},{"path":"http://lindesaysh.github.io/MRSea/reference/choose.radii.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to choose the radii for the CReSS local radial basis function — choose.radii","title":"Function to choose the radii for the CReSS local radial basis function — choose.radii","text":"Function choose radii CReSS local radial basis function","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/choose.radii.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to choose the radii for the CReSS local radial basis function — choose.radii","text":"","code":"choose.radii(   currentFit,   indices,   radiusIndices,   radii,   out.lm,   dists,   aR,   baseModel,   fitnessMeasure,   response,   models,   interactionTerm,   data,   initDisp,   cv.opts,   basis,   printout )"},{"path":"http://lindesaysh.github.io/MRSea/reference/create.bootcount.data.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate bootstrapped distance data into count data — create.bootcount.data","title":"Aggregate bootstrapped distance data into count data — create.bootcount.data","text":"function creates new data set dis.data aggregated visit segment. bootstrapped data, column ids visits segment segment.id2 created create.bootstrap.data using default argument rename. sum estimated number individuals segment dis.data$NHAT given column NHAT new data. columns observation layer discarded. achieved specifying columns retained using argument column.numbers. Generally, columns segment higher levels kept. default used, column.numbers=NULL, columns distance, object, size, distbegin distend observation level automatically discarded. Note columns observation layer kept, first recorded value transferred.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/create.bootcount.data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate bootstrapped distance data into count data — create.bootcount.data","text":"","code":"create.bootcount.data(dis.data, column.numbers = NULL)"},{"path":"http://lindesaysh.github.io/MRSea/reference/create.bootcount.data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate bootstrapped distance data into count data — create.bootcount.data","text":"dis.data Data frame containing distance data (one row detection). Expects column NHAT, .e. size detection divided probability detection (see create.NHAT) ids segment.id2 unique regardless resampled transect belong . column.numbers Optional argument: vector integers indicating columns NHAT dis.data retained returned data.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/create.bootcount.data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate bootstrapped distance data into count data — create.bootcount.data","text":"function returns bootstrapped count data suited second stage count modelling distance sampling data. data includes columns NHAT area response offset required functions concerned second stage modelling package.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/create.bootcount.data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate bootstrapped distance data into count data — create.bootcount.data","text":"","code":"data(dis.data.re) # bootstrap data without stratification dis.data.re$survey.id<-paste(dis.data.re$season,dis.data.re$impact,sep=\"\") result<-ddf(dsmodel=~mcds(key=\"hn\", formula=~1), data=dis.data.re, method=\"ds\",              meta.data=list(width=250)) #> Error in ddf(dsmodel = ~mcds(key = \"hn\", formula = ~1), data = dis.data.re,     method = \"ds\", meta.data = list(width = 250)): could not find function \"ddf\" dis.data.re<-create.NHAT(dis.data.re,result) #> Error in which(data$distance <= ddf.obj$meta.data$width): object 'result' not found  bootstrap.data<-create.bootstrap.data(dis.data.re)  #> Error in is_tibble(dis.data): could not find function \"is_tibble\"  bootcount.data<-create.bootcount.data(bootstrap.data) #> Error in create.bootcount.data(bootstrap.data): object 'bootstrap.data' not found"},{"path":"http://lindesaysh.github.io/MRSea/reference/create.bootstrap.data.html","id":null,"dir":"Reference","previous_headings":"","what":"Create bootstrap data for non-parametric bootstrapping — create.bootstrap.data","title":"Create bootstrap data for non-parametric bootstrapping — create.bootstrap.data","text":"function creates one realisation bootstrapped data based dis.data. default resampling unit transect.id may modified using argument resample.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/create.bootstrap.data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create bootstrap data for non-parametric bootstrapping — create.bootstrap.data","text":"","code":"create.bootstrap.data(   dis.data,   resample = \"transect.id\",   rename = \"segment.id\",   stratum = NULL )"},{"path":"http://lindesaysh.github.io/MRSea/reference/create.bootstrap.data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create bootstrap data for non-parametric bootstrapping — create.bootstrap.data","text":"dis.data Original data bootstrapped. Requires column matches argument resample exactly. resample Specifies resampling unit bootstrapping, default transect.id. Must match column name dis.data exactly rename vector column names new column needs created bootstrapped data. defaults segment.id line transects, however others might added new column new ids automatically created column listed resample stratum column name dis.data identifies different strata. default NULL returns un-stratified bootstrap data. stratum specified, requires column dis.data matches argument stratum exactly","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/create.bootstrap.data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create bootstrap data for non-parametric bootstrapping — create.bootstrap.data","text":"Returns one realisation bootstrapped distance data. Note new column (addition listed argument rename) created. default resample used, column new unique ids called transect.id2. Note new column created renamed bootstrap resamples preserve number unique bootstrap resamples. default resample used, .e. transect.id, new column called transect.id2. addition, new column segment.id2 created required bootstrap functions.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/create.bootstrap.data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create bootstrap data for non-parametric bootstrapping — create.bootstrap.data","text":"","code":"data(dis.data.re) # run distance analysis to create NHATS dis.data.re$survey.id<-paste(dis.data.re$season,dis.data.re$impact,sep=\"\") result<-ddf(dsmodel=~mcds(key=\"hn\", formula=~1), data=dis.data.re, method=\"ds\",              meta.data=list(width=250)) #> Error in ddf(dsmodel = ~mcds(key = \"hn\", formula = ~1), data = dis.data.re,     method = \"ds\", meta.data = list(width = 250)): could not find function \"ddf\" dis.data.re<-create.NHAT(dis.data.re,result) #> Error in which(data$distance <= ddf.obj$meta.data$width): object 'result' not found  # bootstrap data without stratification bootstrap.data<-create.bootstrap.data(dis.data.re)  #> Error in is_tibble(dis.data): could not find function \"is_tibble\" # boostrap data with stratification (here by survey which is composed of  # season and impact) dis.data.re$survey.id<-paste(dis.data.re$season,dis.data.re$impact,sep=\"\") bootstrap.data.str<-create.bootstrap.data(dis.data.re, stratum = \"survey.id\")  #> Error in is_tibble(dis.data): could not find function \"is_tibble\""},{"path":"http://lindesaysh.github.io/MRSea/reference/create.count.data.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate distance data into count data — create.count.data","title":"Aggregate distance data into count data — create.count.data","text":"function creates new data set dis.data aggregated visit segment (segment.id). sum estimated number individuals segment dis.data$NHAT given column NHAT new data. columns segment higher layers carried count.data dis.data. Use argument column.numbers identify .","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/create.count.data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate distance data into count data — create.count.data","text":"","code":"create.count.data(dis.data, column.numbers = NULL)"},{"path":"http://lindesaysh.github.io/MRSea/reference/create.count.data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate distance data into count data — create.count.data","text":"dis.data Data frame containing distance data (one row detection). Expects column NHAT, .e. size detection divided probability detection (see create.NHAT) ids segment.id unique regardless transect belong column.numbers Optional argument: vector integers indicating columns NHAT dis.data retained returned data. Generally columns segment higher levels kept observation level discarded. default used, column.numbers=NULL, columns distance, object, size, distbegin distend observation level automatically discarded. Note columns observation layer kept, first recorded value transferred.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/create.count.data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate distance data into count data — create.count.data","text":"function returns count data suited second stage count modelling distance sampling data. data includes columns NHAT area response offset required functions concerned second stage modelling package.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/create.count.data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate distance data into count data — create.count.data","text":"","code":"data(dis.data.re) dis.data.re$survey.id<-paste(dis.data.re$season,dis.data.re$impact,sep=\"\") result<-ddf(dsmodel=~mcds(key=\"hn\", formula=~1), data=dis.data.re, method=\"ds\",            meta.data=list(width=250)) #> Error in ddf(dsmodel = ~mcds(key = \"hn\", formula = ~1), data = dis.data.re,     method = \"ds\", meta.data = list(width = 250)): could not find function \"ddf\" dis.data.re<-create.NHAT(dis.data.re,result) #> Error in which(data$distance <= ddf.obj$meta.data$width): object 'result' not found count.data<-create.count.data(dis.data.re) #> Error in `$<-.data.frame`(`*tmp*`, \"NHAT\", value = numeric(0)): replacement has 0 rows, data has 10951"},{"path":"http://lindesaysh.github.io/MRSea/reference/create.NHAT.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimated number of individuals for each detection — create.NHAT","title":"Estimated number of individuals for each detection — create.NHAT","text":"function creates new column data contains estimated number animals detection. number observed individuals divided probability detection using MCDS methods (size/detection probability). case size column given dis.data, assumed detections made individuals size set 1 detections. values size NHAT set zero case distance larger truncation distance w specified det.fct.object. addition, new column area created used offset second stage count model (segment length * (truncation distance/1000) * 2). truncation distance divided 1000 convert metres km. assumed segment data represents two-sided surveys. case survey one-sided, column needs divided 2 call function.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/create.NHAT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimated number of individuals for each detection — create.NHAT","text":"","code":"create.NHAT(data, ddf.obj)"},{"path":"http://lindesaysh.github.io/MRSea/reference/create.NHAT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimated number of individuals for each detection — create.NHAT","text":"data distance data object used det.fct estimate probabilities detection ddf.obj detection function object created ddf","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/create.NHAT.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimated number of individuals for each detection — create.NHAT","text":"","code":"data(dis.data.re) result<-ddf(dsmodel=~mcds(key=\"hn\", formula=~1), data=dis.data.re,method=\"ds\",       meta.data= list(width=250,binned=FALSE)) #> Error in ddf(dsmodel = ~mcds(key = \"hn\", formula = ~1), data = dis.data.re,     method = \"ds\", meta.data = list(width = 250, binned = FALSE)): could not find function \"ddf\" dis.data<-create.NHAT(dis.data.re,result) #> Error in which(data$distance <= ddf.obj$meta.data$width): object 'result' not found"},{"path":"http://lindesaysh.github.io/MRSea/reference/cv.gamMRSea.html","id":null,"dir":"Reference","previous_headings":"","what":"Cross-validation for gamMRSea Models — cv.gamMRSea","title":"Cross-validation for gamMRSea Models — cv.gamMRSea","text":"function calculates estimated K-fold cross-validation prediction error gamMRSea models. adapted cv.glm function boot library","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/cv.gamMRSea.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cross-validation for gamMRSea Models — cv.gamMRSea","text":"","code":"cv.gamMRSea(   data,   modelobject,   cost = function(y, yhat) mean((y - yhat)^2),   K = n,   replicate = FALSE,   s.eed = NULL )"},{"path":"http://lindesaysh.github.io/MRSea/reference/cv.gamMRSea.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cross-validation for gamMRSea Models — cv.gamMRSea","text":"data matrix data frame containing data. rows cases columns correspond variables, one response. modelobject object class \"gamMRSea\" containing results gamMRSea model fitted data. cost function two vector arguments specifying cost function cross-validation. first argument cost correspond observed responses second argument correspond predicted fitted responses generalized linear model. cost must return non-negative scalar value. default average squared error function. K number groups data split estimate cross-validation prediction error. value K must groups approximately equal size. supplied value K satisfy criterion set closest integer warning generated specifying value K used. default set K equal number observations data gives usual leave-one-cross-validation. replicate (default=FALSE).  using replicate function, panels specified model object, replicate=TRUE change seed select new panel based folds iteration. s.eed (default = NULL). NULL seed randomly generated stored attributes output.  specified, value s.eed used also stored attributes output.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/cv.gamMRSea.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cross-validation for gamMRSea Models — cv.gamMRSea","text":"information please see cv.glm function boot library","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/cv.gamMRSea.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cross-validation for gamMRSea Models — cv.gamMRSea","text":"","code":"# load data data(ns.data.re) ns.data.re$foldid<-getCVids(ns.data.re, folds=5)   model<-gamMRSea(birds ~ observationhour + as.factor(floodebb) + as.factor(impact),                 family='poisson', data=ns.data.re) cv.gamMRSea(data=ns.data.re, modelobject = model, K=5)$delta #> Loading required package: splines #> [1] 34.56007 34.55760"},{"path":"http://lindesaysh.github.io/MRSea/reference/dis.data.de.html","id":null,"dir":"Reference","previous_headings":"","what":"Line transect data with decrease post-impact — dis.data.de","title":"Line transect data with decrease post-impact — dis.data.de","text":"simulated dataset containing observed perpendicular distances, effort data variables segmented line transect data. variables follows:","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/dis.data.de.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Line transect data with decrease post-impact — dis.data.de","text":"data frame 10759 rows 12 variables","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/dis.data.de.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Line transect data with decrease post-impact — dis.data.de","text":"transect.id Identifier individual visits transects transect.label Labels transects season Numerical indicator four different seasons impact Numerical indicator (0) (1) impact segment.id Identifier individual visits segment segment.label Label segments length Length segment km x.pos spatial location horizontal axis UTMs y.pos spatial location vertical axis UTMs depth Depth m object Id detected object distance Perpendicular distance line","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/dis.data.no.html","id":null,"dir":"Reference","previous_headings":"","what":"Line transect data with no post-impact consequence — dis.data.no","title":"Line transect data with no post-impact consequence — dis.data.no","text":"simulated dataset containing observed perpendicular distances, effort data variables segmented line transect data. variables follows:","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/dis.data.no.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Line transect data with no post-impact consequence — dis.data.no","text":"data frame 10771 rows 12 variables","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/dis.data.no.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Line transect data with no post-impact consequence — dis.data.no","text":"transect.id Identifier individual visits transects transect.label Labels transects season Numerical indicator four different seasons impact Numerical indicator (0) (1) impact segment.id Identifier individual visits segment segment.label Label segments length Length segment km x.pos spatial location horizontal axis UTMs y.pos spatial location vertical axis UTMs depth Depth m object Id detected object distance Perpendicular distance line","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/dis.data.re.html","id":null,"dir":"Reference","previous_headings":"","what":"Line transect data with redistribution post-impact — dis.data.re","title":"Line transect data with redistribution post-impact — dis.data.re","text":"simulated dataset containing observed perpendicular distances, effort data variables segmented line transect data. variables follows:","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/dis.data.re.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Line transect data with redistribution post-impact — dis.data.re","text":"data frame 10951 rows 12 variables","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/dis.data.re.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Line transect data with redistribution post-impact — dis.data.re","text":"transect.id Identifier individual visits transects transect.label Labels transects season Numerical indicator four different seasons impact Numerical indicator (0) (1) impact segment.id Identifier individual visits segment segment.label Label segments length Length segment km x.pos spatial location horizontal axis UTMs y.pos spatial location vertical axis UTMs depth Depth m object Id detected object distance Perpendicular distance line","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/do.bootstrap.cress.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrapping function without model selection using CReSS/SALSA for fitting the second stage count model — do.bootstrap.cress","title":"Bootstrapping function without model selection using CReSS/SALSA for fitting the second stage count model — do.bootstrap.cress","text":"fuction performs specified number bootstrapping iterations using CReSS/SALSA fitting second stage count model. See details.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/do.bootstrap.cress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrapping function without model selection using CReSS/SALSA for fitting the second stage count model — do.bootstrap.cress","text":"","code":"do.bootstrap.cress(   orig.data,   predict.data,   ddf.obj = NULL,   model.obj,   splineParams,   g2k,   resample = \"transect.id\",   rename = \"segment.id\",   stratum = NULL,   B,   name = NULL,   save.data = FALSE,   nhats = FALSE,   seed = 12345,   nCores = 1 )"},{"path":"http://lindesaysh.github.io/MRSea/reference/do.bootstrap.cress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrapping function without model selection using CReSS/SALSA for fitting the second stage count model — do.bootstrap.cress","text":"orig.data original data. case ddf.obj specified, original distance data. case ddf.obj NULL, format equivalent count.data record represents summed counts segments. predict.data prediction grid data ddf.obj ddf object created best fitting detection model. Defaults NULL nodetection function object available. model.obj best fitting CReSS model original count data. geeglm Poisson/Binomial GLM (quasi). splineParams object describing parameters fitting one two dimensional splines g2k (N x k) matrix distances prediction points (N) knot points (k) resample Specifies resampling unit bootstrapping, default transect.id. Must match column name dis.data exactly rename vector column names new column needs created bootstrapped data. defaults segment.id line transects (required create.bootcount.data), others might added. new column new ids automatically created column listed resample. case nearshore data, argument ignored. stratum column name orig.data identifies different strata. default NULL returns un-stratified bootstrap data. case nearshore data, argument ignored. B Number bootstrap iterations name Analysis name. Required avoid overwriting previous bootstrap results. name added beginning \"predictionboot.RData\" saving bootstrap predictions. save.data TRUE, created bootstrap data saved RData object working directory iteration, defaults FALSE nhats (default = FALSE).  calculated bootstrap NHATS simple ddf object matrix may fed function.  number columns data >= B.  rows must equal orig.data d2k must matching order. seed Set seed bootstrap sampling process. nCores Set number computer cores bootstrap process use (default = 1).  cores faster proces wary using cores computer. nCores > (number computer cores - 2), function defaults nCores = (number computer cores - 2).  Note: Mac computer parallel code compute use nCores=1.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/do.bootstrap.cress.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrapping function without model selection using CReSS/SALSA for fitting the second stage count model — do.bootstrap.cress","text":"function returns matrix bootstrap predictions. number rows equal number rows predict.data.  number columns equal B.  matrix may large stored directly working directory workspace object: '\"name\"predictionboot.RObj'.  object inside called bootPreds.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/do.bootstrap.cress.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bootstrapping function without model selection using CReSS/SALSA for fitting the second stage count model — do.bootstrap.cress","text":"case distance sampling data, following steps performed iteration: original data bootstrapped detection function fitted bootstrapped data count model fitted bootstrapped data coefficients resampled multivariate normal distribution defined MLE COV count model predictions made prediction data using resampled coefficients case count data, following steps performed iteration: coefficients resampled multivariate normal distribution defined MLE COV best fitting count model predictions made prediction data using resampled coefficients","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/do.bootstrap.cress.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrapping function without model selection using CReSS/SALSA for fitting the second stage count model — do.bootstrap.cress","text":"","code":"# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ # offshore redistribution data # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data(dis.data.re) data(predict.data.re) data(knotgrid.off) # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ # distance sampling dis.data.re$survey.id<-paste(dis.data.re$season,dis.data.re$impact,sep=\"\") result<-ddf(dsmodel=~mcds(key=\"hn\", formula=~1), data=dis.data.re, method=\"ds\",         meta.data=list(width=250)) #> Error in ddf(dsmodel = ~mcds(key = \"hn\", formula = ~1), data = dis.data.re,     method = \"ds\", meta.data = list(width = 250)): could not find function \"ddf\" dis.data.re<-create.NHAT(dis.data.re,result) #> Error in which(data$distance <= ddf.obj$meta.data$width): object 'result' not found count.data<-create.count.data(dis.data.re) #> Error in `$<-.data.frame`(`*tmp*`, \"NHAT\", value = numeric(0)): replacement has 0 rows, data has 10951  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ # spatial modelling splineParams<-makesplineParams(data=count.data, varlist=c('depth')) #> Error in makesplineParams(data = count.data, varlist = c(\"depth\")): object 'count.data' not found #set some input info for SALSA count.data$response<- count.data$NHAT #> Error in eval(expr, envir, enclos): object 'count.data' not found # make distance matrices for datatoknots and knottoknots distMats<-makeDists(cbind(count.data$x.pos, count.data$y.pos), na.omit(knotgrid.off)) #> Error in cbind(count.data$x.pos, count.data$y.pos): object 'count.data' not found # choose sequence of radii r_seq<-getRadiiChoices(8,distMats$dataDist) #> Error in getRadiiChoices(8, distMats$dataDist): object 'distMats' not found # set initial model without the spatial term initialModel<- glm(response ~ as.factor(season) + as.factor(impact) + offset(log(area)),                   family='quasipoisson', data=count.data) #> Error in is.data.frame(data): object 'count.data' not found # make parameter set for running salsa2d salsa2dlist<-list(fitnessMeasure = 'QICb', knotgrid = knotgrid.off,                   knotdim=c(26,14), startKnots=4, minKnots=4,                   maxKnots=20, r_seq=r_seq, gap=4000, interactionTerm=\"as.factor(impact)\") #> Error in eval(expr, envir, enclos): object 'r_seq' not found salsa2dOutput_k6<-runSALSA2D(initialModel, salsa2dlist, d2k=distMats$dataDist,                     k2k=distMats$knotDist, splineParams=splineParams)  #> Error in runSALSA2D(initialModel, salsa2dlist, d2k = distMats$dataDist,     k2k = distMats$knotDist, splineParams = splineParams): object 'initialModel' not found  splineParams<-salsa2dOutput_k6$splineParams #> Error in eval(expr, envir, enclos): object 'salsa2dOutput_k6' not found # specify parameters for local radial function: radiusIndices <- splineParams[[1]]$radiusIndices #> Error in eval(expr, envir, enclos): object 'splineParams' not found dists <- splineParams[[1]]$dist #> Error in eval(expr, envir, enclos): object 'splineParams' not found radii <- splineParams[[1]]$radii #> Error in eval(expr, envir, enclos): object 'splineParams' not found aR <- splineParams[[1]]$invInd[splineParams[[1]]$knotPos] #> Error in eval(expr, envir, enclos): object 'splineParams' not found count.data$blockid<-paste(count.data$transect.id, count.data$season, count.data$impact, sep='') #> Error in paste(count.data$transect.id, count.data$season, count.data$impact,     sep = \"\"): object 'count.data' not found # Re-fit the chosen model as a GEE (based on SALSA knot placement) and GEE p-values geeModel<- geeglm(formula(salsa2dOutput_k6$bestModel), data=count.data, family=poisson, id=blockid) #> Error in geeglm(formula(salsa2dOutput_k6$bestModel), data = count.data,     family = poisson, id = blockid): could not find function \"geeglm\" dists<-makeDists(cbind(predict.data.re$x.pos, predict.data.re$y.pos), na.omit(knotgrid.off),         knotmat=FALSE)$dataDist  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ # bootstrapping do.bootstrap.cress(dis.data.re, predict.data.re, ddf.obj=result, geeModel, splineParams,                g2k=dists, resample='transect.id', rename='segment.id', stratum='survey.id',                B=4, name=\"cress\", save.data=FALSE, nhats=FALSE, nCores=1) #> Loading required package: Matrix #> Loading required package: mvtnorm #> Error in do.bootstrap.cress(dis.data.re, predict.data.re, ddf.obj = result,     geeModel, splineParams, g2k = dists, resample = \"transect.id\",     rename = \"segment.id\", stratum = \"survey.id\", B = 4, name = \"cress\",     save.data = FALSE, nhats = FALSE, nCores = 1): object 'result' not found load(\"cresspredictionboot.RData\") # loading the bootstrap predictions into the workspace #> Warning: cannot open compressed file 'cresspredictionboot.RData', probable reason 'No such file or directory' #> Error in readChar(con, 5L, useBytes = TRUE): cannot open the connection # look at the first 6 lines of the bootstrap predictions (on the scale of the response) head(bootPreds)  #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'head': object 'bootPreds' not found  if (FALSE) { # In parallel (Note: windows machines only) require(parallel) do.bootstrap.cress(dis.data.re, predict.data.re, ddf.obj=result, geeModel, splineParams,                 g2k=dists, resample='transect.id', rename='segment.id', stratum='survey.id',                 B=4, name=\"cress\", save.data=FALSE, nhats=FALSE, nCores=4) load(\"cresspredictionboot.RData\") # loading the bootstrap predictions into the workspace # look at the first 6 lines of the bootstrap predictions (on the scale of the response) head(bootPreds) }  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ # nearshore redistribution data # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ if (FALSE) { do.bootstrap.cress(ns.data.re, ns.predict.data.re, ddf.obj=NULL, geeModel, splineParams,               g2k=dists, resample='transect.id', rename='segment.id', stratum=NULL,               B=2, name=\"cress\", save.data=FALSE, nhats=FALSE) load(\"cresspredictionboot.RData\") # loading the predictions into the workspace # look at the first 6 lines of the bootstrap predictions (on the scale of the response) head(bootPreds)}"},{"path":"http://lindesaysh.github.io/MRSea/reference/do.bootstrap.cress.robust.beta.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrapping function without model selection for a model of class 'gamMRSea' and beta family — do.bootstrap.cress.robust.beta","title":"Bootstrapping function without model selection for a model of class 'gamMRSea' and beta family — do.bootstrap.cress.robust.beta","text":"fuction performs specified number bootstrapping iterations using CReSS/SALSA fitting count model. See details.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/do.bootstrap.cress.robust.beta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrapping function without model selection for a model of class 'gamMRSea' and beta family — do.bootstrap.cress.robust.beta","text":"","code":"do.bootstrap.cress.robust.beta(   model.obj,   predictionGrid,   splineParams = NULL,   g2k = NULL,   B,   robust = T,   name = NULL,   seed = 12345,   nCores = 1,   cat.message = TRUE )"},{"path":"http://lindesaysh.github.io/MRSea/reference/do.bootstrap.cress.robust.beta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrapping function without model selection for a model of class 'gamMRSea' and beta family — do.bootstrap.cress.robust.beta","text":"model.obj best fitting CReSS model original count data. geeglm Poisson/Binomial GLM (quasi). predictionGrid prediction grid data splineParams object describing parameters fitting one two dimensional splines g2k (N x k) matrix distances prediction points (N) knot points (k) B Number bootstrap iterations name Analysis name. Required avoid overwriting previous bootstrap results. name added beginning \"predictionboot.RData\" saving bootstrap predictions. seed Set seed bootstrap sampling process. nCores Set number computer cores bootstrap process use (default = 1).  cores faster proces wary using cores computer. nCores > (number computer cores - 2), function defaults nCores = (number computer cores - 2).  Note: Mac computer parallel code compute use nCores=1. rename vector column names new column needs created bootstrapped data. defaults segment.id line transects (required create.bootcount.data), others might added. new column new ids automatically created column listed resample. case nearshore data, argument ignored.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/do.bootstrap.cress.robust.beta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrapping function without model selection for a model of class 'gamMRSea' and beta family — do.bootstrap.cress.robust.beta","text":"function returns matrix bootstrap predictions. number rows equal number rows predictionGrid.  number columns equal B.  matrix may large stored directly working directory workspace object: '\"name\"predictionboot.RObj'.  object inside called bootPreds.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/do.bootstrap.cress.robust.beta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bootstrapping function without model selection for a model of class 'gamMRSea' and beta family — do.bootstrap.cress.robust.beta","text":"following steps performed iteration: coefficients resampled multivariate normal distribution defined MLE COV best fitting count model predictions made prediction data using resampled coefficients","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/do.bootstrap.cress.robust.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrapping function without model selection for a model of class 'gamMRSea' — do.bootstrap.cress.robust","title":"Bootstrapping function without model selection for a model of class 'gamMRSea' — do.bootstrap.cress.robust","text":"fuction performs specified number bootstrapping iterations using CReSS/SALSA fitting count model. See details.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/do.bootstrap.cress.robust.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrapping function without model selection for a model of class 'gamMRSea' — do.bootstrap.cress.robust","text":"","code":"do.bootstrap.cress.robust(   model.obj,   predictionGrid,   splineParams = NULL,   g2k = NULL,   B,   robust = T,   name = NULL,   seed = 12345,   nCores = 1,   cat.message = TRUE )"},{"path":"http://lindesaysh.github.io/MRSea/reference/do.bootstrap.cress.robust.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrapping function without model selection for a model of class 'gamMRSea' — do.bootstrap.cress.robust","text":"model.obj best fitting CReSS model original count data. geeglm Poisson/Binomial GLM (quasi). predictionGrid prediction grid data splineParams object describing parameters fitting one two dimensional splines g2k (N x k) matrix distances prediction points (N) knot points (k) B Number bootstrap iterations name Analysis name. Required avoid overwriting previous bootstrap results. name added beginning \"predictionboot.RData\" saving bootstrap predictions. seed Set seed bootstrap sampling process. nCores Set number computer cores bootstrap process use (default = 1).  cores faster proces wary using cores computer. nCores > (number computer cores - 2), function defaults nCores = (number computer cores - 2).  Note: Mac computer parallel code compute use nCores=1. rename vector column names new column needs created bootstrapped data. defaults segment.id line transects (required create.bootcount.data), others might added. new column new ids automatically created column listed resample. case nearshore data, argument ignored.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/do.bootstrap.cress.robust.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrapping function without model selection for a model of class 'gamMRSea' — do.bootstrap.cress.robust","text":"function returns matrix bootstrap predictions. number rows equal number rows predictionGrid.  number columns equal B.  matrix may large stored directly working directory workspace object: '\"name\"predictionboot.RObj'.  object inside called bootPreds.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/do.bootstrap.cress.robust.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bootstrapping function without model selection for a model of class 'gamMRSea' — do.bootstrap.cress.robust","text":"following steps performed iteration: coefficients resampled multivariate normal distribution defined MLE COV best fitting count model predictions made prediction data using resampled coefficients","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/drop.step_2d.html","id":null,"dir":"Reference","previous_headings":"","what":"Function that tries dropping knots to find an improvement in fit — drop.step_2d","title":"Function that tries dropping knots to find an improvement in fit — drop.step_2d","text":"Function tries dropping knots find improvement fit","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/drop.step_2d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function that tries dropping knots to find an improvement in fit — drop.step_2d","text":"","code":"drop.step_2d(   radii,   invInd,   dists,   explData,   response,   knotgrid,   maxIterations,   fitnessMeasure,   point,   knotPoint,   position,   aR,   BIC,   track,   out.lm,   improveDrop,   minKnots,   tol = 0,   baseModel,   radiusIndices,   models,   interactionTerm,   data,   initDisp,   cv.opts,   basis,   printout )"},{"path":"http://lindesaysh.github.io/MRSea/reference/drop.step_2d.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function that tries dropping knots to find an improvement in fit — drop.step_2d","text":"Cameron Walker, Department Engineering Science, University Auckland.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/exchange.step_2d.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for exchanging knot locations and re-fitting model to find best one — exchange.step_2d","title":"Function for exchanging knot locations and re-fitting model to find best one — exchange.step_2d","text":"Function exchanging knot locations re-fitting model find best one","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/exchange.step_2d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for exchanging knot locations and re-fitting model to find best one — exchange.step_2d","text":"","code":"exchange.step_2d(   gap,   knotDist,   radii,   dists,   explData,   response,   knotgrid,   maxIterations,   fitnessMeasure,   point,   knotPoint,   position,   aR,   BIC,   track,   out.lm,   improveEx,   maxKnots,   tol = 0,   baseModel,   radiusIndices,   models,   interactionTerm,   data,   initDisp,   cv.opts,   basis,   printout )"},{"path":"http://lindesaysh.github.io/MRSea/reference/exchange.step_2d.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function for exchanging knot locations and re-fitting model to find best one — exchange.step_2d","text":"Cameron Walker, Department Enginering Science, University Auckland Lindesay Scott-Hayward (University St Andrews)","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/fit.thinPlate_2d.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to fit a local radial basis function (CReSS) as a two dimensional smooth — fit.thinPlate_2d","title":"Function to fit a local radial basis function (CReSS) as a two dimensional smooth — fit.thinPlate_2d","text":"Function fit local radial basis function (CReSS) two dimensional smooth","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/fit.thinPlate_2d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to fit a local radial basis function (CReSS) as a two dimensional smooth — fit.thinPlate_2d","text":"","code":"fit.thinPlate_2d(   fitnessMeasure,   dists,   aR,   radii,   baseModel,   radiusIndices,   models,   currentFit,   interactionTerm,   data,   initDisp,   cv.opts,   basis = \"gaussian\",   printout )"},{"path":"http://lindesaysh.github.io/MRSea/reference/gamMRSea.html","id":null,"dir":"Reference","previous_headings":"","what":"gamMRSea model function — gamMRSea","title":"gamMRSea model function — gamMRSea","text":"See glm details.  splineParams object may specified part model object.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/gamMRSea.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"gamMRSea model function — gamMRSea","text":"","code":"gamMRSea(   formula,   family = gaussian,   data,   weights,   subset,   na.action,   start = NULL,   etastart,   mustart,   offset,   control = list(...),   model = TRUE,   method = \"glm.fit\",   x = FALSE,   y = TRUE,   contrasts = NULL,   splineParams = NULL,   ... )"},{"path":"http://lindesaysh.github.io/MRSea/reference/gamMRSea.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"gamMRSea model function — gamMRSea","text":"LAS Scott-Hayward, University St Andrews","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/generateNoise.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to generate noisy data — generateNoise","title":"Function to generate noisy data — generateNoise","text":"function generates random sample poisson, overdispersed poisson, binomial zero inflated binomial samples.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/generateNoise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to generate noisy data — generateNoise","text":"","code":"generateNoise(n, response, family, gamma.variance, ...)"},{"path":"http://lindesaysh.github.io/MRSea/reference/generateNoise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to generate noisy data — generateNoise","text":"n number simulations generate response vector 'true' means genereate family one poisson, binomial zibinomial gamma.variance variance parameter gamma distribution. ... parameters required family specified","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/generateNoise.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to generate noisy data — generateNoise","text":"additional parameter Poisson distribution dispersion parameter, specified d= additional parameters Binomial distribution can found ?VGAM::rbinom zibinomial family requires VGAM library generate zero inflated binomial data. Additional parameters can found help rzibinom.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/generateNoise.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function to generate noisy data — generateNoise","text":"LAS Scott-Hayward, University St Andrews","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/generateNoise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to generate noisy data — generateNoise","text":"","code":"data(ns.data.re)  model<-gamMRSea(birds ~ observationhour + as.factor(floodebb) + as.factor(impact),                 family='poisson', data=ns.data.re)  simData<-generateNoise(n=500, response=fitted(model), family='poisson')"},{"path":"http://lindesaysh.github.io/MRSea/reference/getCVids.html","id":null,"dir":"Reference","previous_headings":"","what":"IDs for running cross validation — getCVids","title":"IDs for running cross validation — getCVids","text":"function creates string integers used pointing right subsets data cross validation regression objects","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/getCVids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IDs for running cross validation — getCVids","text":"","code":"getCVids(data, folds, block = NULL, seed = NULL)"},{"path":"http://lindesaysh.github.io/MRSea/reference/getCVids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"IDs for running cross validation — getCVids","text":"data data used regression model folds integer number validation data sets block column data indicating blocking structure cross-validation (block = NULL, individual observations used blocks) seed integer number used set seed fold generation.  default set NULL.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/getCVids.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"IDs for running cross validation — getCVids","text":"function returns random sequence 1:folds length observations data. seed used generation stored attributes (s.eed).","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/getCVids.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"IDs for running cross validation — getCVids","text":"LAS Scott-Hayward, University St Andrews","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/getCVids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"IDs for running cross validation — getCVids","text":"","code":"# load data data(ns.data.re)  CVids<-getCVids(ns.data.re, 5)"},{"path":"http://lindesaysh.github.io/MRSea/reference/getDifferences.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify any significant differences between predicted data before an impact event and predicted data after an impact event — getDifferences","title":"Identify any significant differences between predicted data before an impact event and predicted data after an impact event — getDifferences","text":"Identify significant differences predicted data impact event predicted data impact event","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/getDifferences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify any significant differences between predicted data before an impact event and predicted data after an impact event — getDifferences","text":"","code":"getDifferences(beforePreds, afterPreds, quants = c(0.025, 0.975))"},{"path":"http://lindesaysh.github.io/MRSea/reference/getDifferences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify any significant differences between predicted data before an impact event and predicted data after an impact event — getDifferences","text":"beforePreds Matrix bootstrap predictions (n x B) grid cell impact (length order afterPreds) afterPreds Matrix bootstrap predictions (n x B) grid cell impact (length order beforePreds) quants (default = =c(.025,.975)) Quantile significance.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/getDifferences.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify any significant differences between predicted data before an impact event and predicted data after an impact event — getDifferences","text":"list returned consisting mediandiff: Vector median difference grid cell lowerci: Vector lower 2.5\\ upperci: Vector upper 97.5\\ significanceMarker: Vector significance.  0: significant, 1: significant positive, -1: significant negative","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/getDifferences.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify any significant differences between predicted data before an impact event and predicted data after an impact event — getDifferences","text":"function finds differences every predicted grid cell every bootstrap replicate.  Quantiles used determine whether difference significantly different zero , direction.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/getDifferences.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify any significant differences between predicted data before an impact event and predicted data after an impact event — getDifferences","text":"","code":"if (FALSE) { getDifferences(beforePreds, afterPreds)}"},{"path":"http://lindesaysh.github.io/MRSea/reference/getDispersion.html","id":null,"dir":"Reference","previous_headings":"","what":"dispersion parameter — getDispersion","title":"dispersion parameter — getDispersion","text":"function calculates dispersion parameter Normal, Binomial, Poisson Gamma distributions","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/getDispersion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dispersion parameter — getDispersion","text":"","code":"getDispersion(model)"},{"path":"http://lindesaysh.github.io/MRSea/reference/getDispersion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dispersion parameter — getDispersion","text":"model gamMRSea glm model object","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/getDispersion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"dispersion parameter — getDispersion","text":"single number dispersion parameter estimation","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/getDispersion.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"dispersion parameter — getDispersion","text":"details","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/getDispersion.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"dispersion parameter — getDispersion","text":"LAS Scott-Hayward","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/getEmpDistribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to generate the empirical distribution of the runs test statistic, given some data and a model. — getEmpDistribution","title":"Function to generate the empirical distribution of the runs test statistic, given some data and a model. — getEmpDistribution","text":"Function generate empirical distribution runs test statistic, given data model.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/getEmpDistribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to generate the empirical distribution of the runs test statistic, given some data and a model. — getEmpDistribution","text":"","code":"getEmpDistribution(   n.sim,   simData,   model,   data,   plot = FALSE,   returnDist = TRUE,   dots = TRUE )"},{"path":"http://lindesaysh.github.io/MRSea/reference/getEmpDistribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to generate the empirical distribution of the runs test statistic, given some data and a model. — getEmpDistribution","text":"n.sim number simulated sets data. simData matrix, column set data simulated independence, rows length data used model. model glm gamMRSea model object data data set used fit model. plot logical flag. TRUE, plot made showing 5% critical values empirical distribution vs N(0,1) distribution. Default FALSE returnDist logical flag.  want distribution test statistics returned (TRUE) just 5% critical values (FALSE) dots (Default: TRUE. Logical stating whether show printout block numbers assess progress. TRUE print dots workspace.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/getEmpDistribution.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function to generate the empirical distribution of the runs test statistic, given some data and a model. — getEmpDistribution","text":"LAS Scott-Hayward, University St Andrews","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/getEmpDistribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to generate the empirical distribution of the runs test statistic, given some data and a model. — getEmpDistribution","text":"","code":"data(ns.data.re)  model<-gamMRSea(birds ~ observationhour + as.factor(floodebb) + as.factor(impact),                 family='poisson', data=ns.data.re)  simData<-generateNoise(n=500, response=fitted(model), family='poisson') empdist<-getEmpDistribution(500, simData, model, data=ns.data.re, plot=FALSE,                  returnDist=TRUE,dots=FALSE)"},{"path":"http://lindesaysh.github.io/MRSea/reference/getGeoDist.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to calculate geodesic distances — getGeoDist","title":"Function to calculate geodesic distances — getGeoDist","text":"Function calculate geodesic distances","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/getGeoDist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to calculate geodesic distances — getGeoDist","text":"","code":"getGeoDist(xygrid, polys, datalocations = NULL, plot.transition = TRUE)"},{"path":"http://lindesaysh.github.io/MRSea/reference/getGeoDist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to calculate geodesic distances — getGeoDist","text":"xygrid Regular grid x y coordinates, must extent greater datalocations specified. polys Either single polygon (defined dataframe x y) list object containing multiple polygons define exclusion zones. datalocations data frame x y coordinates locations calculate distances . Default = NULL, case distances returned locations xygrid plot.transition (default=TRUE). Logical stating whether plot transition matrix.  Useful see boundaries obeyed.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/getGeoDist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to calculate geodesic distances — getGeoDist","text":"Using raster, spancs gdistance packages calculate geodesic distance pairs points. polygons define areas animal/object . E.g. Land animal marine mammal. object returned matrix distances pairs points x,y coordinates pair points.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/getGeoDist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to calculate geodesic distances — getGeoDist","text":"","code":"Nx=100 Ny=100  xygrid<-expand.grid(x=1:Nx, y=1:Ny)  # make exclusion polygon, bnd<-data.frame(x=c(78  ,79, 52, 53 , 82 , 82, 100, 103 ,104 , 70),  y= c( 99  ,65 , 66 , 43 , 42 , 16, 19, 16 ,102 ,105)) bnd2<-data.frame(x= c(37 ,54 ,55, 37), y=c(35 ,35, 17, 18))  geodistsoutput<-getGeoDist(xygrid=xygrid, polys=list(bnd, bnd2)) #> Loading required package: raster #> Loading required package: sp #> Loading required package: gdistance #> Warning: package 'gdistance' was built under R version 4.2.3 #> Loading required package: igraph #> Warning: package 'igraph' was built under R version 4.2.3 #>  #> Attaching package: 'igraph' #> The following object is masked from 'package:raster': #>  #>     union #> The following objects are masked from 'package:stats': #>  #>     decompose, spectrum #> The following object is masked from 'package:base': #>  #>     union #>  #> Attaching package: 'gdistance' #> The following object is masked from 'package:igraph': #>  #>     normalize #> Error in as.double(y): cannot coerce type 'S4' to vector of type 'double'  # show on plot i=2150 a.dist.mesh = data.frame(geodistsoutput$xydata, value=geodistsoutput$distance[i,]) #> Error in data.frame(geodistsoutput$xydata, value = geodistsoutput$distance[i,     ]): object 'geodistsoutput' not found iLCdsitance = rasterFromXYZ(a.dist.mesh) #> Error in rasterFromXYZ(a.dist.mesh): object 'a.dist.mesh' not found plot(iLCdsitance, col=topo.colors(100)) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'iLCdsitance' not found points(geodistsoutput$xydata[i,1],geodistsoutput$xydata[i,2]) #> Error in points(geodistsoutput$xydata[i, 1], geodistsoutput$xydata[i,     2]): object 'geodistsoutput' not found polymap(bnd, add=T) #> Error in polymap(bnd, add = T): could not find function \"polymap\" polymap(bnd2, add=T) #> Error in polymap(bnd2, add = T): could not find function \"polymap\""},{"path":"http://lindesaysh.github.io/MRSea/reference/getKnotgrid.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a grid of knot locations to run SALSA2D. — getKnotgrid","title":"Generate a grid of knot locations to run SALSA2D. — getKnotgrid","text":"Generate grid knot locations run SALSA2D.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/getKnotgrid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a grid of knot locations to run SALSA2D. — getKnotgrid","text":"","code":"getKnotgrid(coordData, numKnots = 300, plot = TRUE)"},{"path":"http://lindesaysh.github.io/MRSea/reference/getKnotgrid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a grid of knot locations to run SALSA2D. — getKnotgrid","text":"coordData nx2 matrix data frame coordinates representing data locations numKnots (default = 300)).  user may choose many legal knot locations available (400 ) plot (default = TRUE). Logical stating whether plot showing legal knot positions given.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/getKnotgrid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a grid of knot locations to run SALSA2D. — getKnotgrid","text":"(numKnots x 2) matrix knot locations.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/getKnotgrid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a grid of knot locations to run SALSA2D. — getKnotgrid","text":"SALSA2D requires grid knot locations determine best locations.  Illegal knot positions (close data) kept row data frame locations given c(NA, NA) avoid knot considered.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/getKnotgrid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a grid of knot locations to run SALSA2D. — getKnotgrid","text":"","code":"if (FALSE) { data(dis.data.re) # bootstrap data without stratification dis.data.re$survey.id<-paste(dis.data.re$season,dis.data.re$impact,sep=\"\") require(mrds) result<-ddf(dsmodel=~mcds(key=\"hn\", formula=~1), data=dis.data.re, method=\"ds\",              meta.data=list(width=250)) dis.data.re<-create.NHAT(dis.data.re,result)  knotgrid<-getKnotgrid(cbind(dis.data.re$x.pos, dis.data.re$y.pos))}"},{"path":"http://lindesaysh.github.io/MRSea/reference/getPlotdimensions.html","id":null,"dir":"Reference","previous_headings":"","what":"find the plotting dimensions for quilt.plot when using a regular grid — getPlotdimensions","title":"find the plotting dimensions for quilt.plot when using a regular grid — getPlotdimensions","text":"find plotting dimensions quilt.plot using regular grid","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/getPlotdimensions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"find the plotting dimensions for quilt.plot when using a regular grid — getPlotdimensions","text":"","code":"getPlotdimensions(x.pos, y.pos, segmentWidth, segmentLength)"},{"path":"http://lindesaysh.github.io/MRSea/reference/getPlotdimensions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"find the plotting dimensions for quilt.plot when using a regular grid — getPlotdimensions","text":"x.pos Vector x-coordinates dataset y.pos Vector y-coordinates dataset segmentWidth Width grid cell data (units x.pos) segmentLength Length grid cell data (units y.pos)","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/getPlotdimensions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"find the plotting dimensions for quilt.plot when using a regular grid — getPlotdimensions","text":"","code":"#' # load data data(ns.data.re)  getPlotdimensions(ns.data.re$x.pos, ns.data.re$y.pos, segmentWidth=500, segmentLength=500) #> [1] 12 16"},{"path":"http://lindesaysh.github.io/MRSea/reference/getRadiiChoices.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for obtaining a sequence of range parameters for the CReSS smoother — getRadiiChoices","title":"Function for obtaining a sequence of range parameters for the CReSS smoother — getRadiiChoices","text":"getRadiiChoices() superseded favour getRadiiSequence()","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/getRadiiChoices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for obtaining a sequence of range parameters for the CReSS smoother — getRadiiChoices","text":"","code":"getRadiiChoices(numberofradii = 10, distMatrix, basis, rvin = NULL)"},{"path":"http://lindesaysh.github.io/MRSea/reference/getRadiiChoices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for obtaining a sequence of range parameters for the CReSS smoother — getRadiiChoices","text":"numberofradii number range parameters SALSA use fitting CReSS smooth.  default 8.  Remember, parameters longer SALSA take find suitable one knot location. distMatrix Matrix distances data locations knot locations (n x k). May Euclidean geodesic distances. Euclidean distances created using makeDists. basis character stating whether 'gaussian' 'exponential' basis used. rvin Two parameter vector stating minimum maximum range r gaussian basis.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/getRadiiChoices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function for obtaining a sequence of range parameters for the CReSS smoother — getRadiiChoices","text":"function returns vector containing sequence range parameters.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/getRadiiChoices.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function for obtaining a sequence of range parameters for the CReSS smoother — getRadiiChoices","text":"range parameter determines range influence knot.  Small numbers indicate local influence large ones, global influence.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/getRadiiChoices.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Function for obtaining a sequence of range parameters for the CReSS smoother — getRadiiChoices","text":"Scott-Hayward, L.; M. Mackenzie, C.Donovan, C.Walker E.Ashe.  Complex Region Spatial Smoother (CReSS). Journal computational Graphical Statistics. 2013. DOI: 10.1080/10618600.2012.762920","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/getRadiiChoices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function for obtaining a sequence of range parameters for the CReSS smoother — getRadiiChoices","text":"","code":"# load data data(ns.data.re) # load knot grid data data(knotgrid.ns)  # make distance matrices for datatoknots and knottoknots distMats<-makeDists(cbind(ns.data.re$x.pos, ns.data.re$y.pos), na.omit(knotgrid.ns))  # choose sequence of radii r_seq<-getRadiiChoices(8, distMats$dataDist, basis=\"gaussian\")"},{"path":"http://lindesaysh.github.io/MRSea/reference/getRadiiChoices.vario.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for obtaining a sequence of range parameters for the CReSS smoother — getRadiiChoices.vario","title":"Function for obtaining a sequence of range parameters for the CReSS smoother — getRadiiChoices.vario","text":"getRadiiChoices.vario() superseded favour getRadiiSequence()","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/getRadiiChoices.vario.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for obtaining a sequence of range parameters for the CReSS smoother — getRadiiChoices.vario","text":"","code":"getRadiiChoices.vario(   numberofradii = 10,   xydata,   response,   basis,   alpha = 0,   vgmmodel = \"Sph\",   showplots = FALSE,   distMatrix = NULL,   ... )"},{"path":"http://lindesaysh.github.io/MRSea/reference/getRadiiChoices.vario.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for obtaining a sequence of range parameters for the CReSS smoother — getRadiiChoices.vario","text":"numberofradii number range parameters SALSA use fitting CReSS smooth.  default 8.  Remember, parameters longer SALSA take find suitable one knot location. xydata Data frame containing columns x y coordinates. x assumed first two columns response vector response values use gstat::variogram.  values approximately normally distributed. basis character stating whether 'gaussian' 'exponential' basis used. alpha numeric parameter gstat::variogram function giving direction plane(x,y) showplots (default = FALSE). TRUE output gstat::variogram gstat::fit.variogram shown. distMatrix Matrix distances data locations knot locations (n x k). May Euclidean geodesic distances. Euclidean distances created using makeDists. used check ensure estimated range parameter exceed maximum distance surface.  , original getRadiiChoices function used distMatrix parameter requirement . ... parameters gstat::variogram function.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/getRadiiChoices.vario.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function for obtaining a sequence of range parameters for the CReSS smoother — getRadiiChoices.vario","text":"function returns vector containing sequence range parameters.  even number radii requested, reduced one give odd length sequence middle number best range parameter variogram. outputs variogram model can found attributes returned object vg.fit.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/getRadiiChoices.vario.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function for obtaining a sequence of range parameters for the CReSS smoother — getRadiiChoices.vario","text":"range parameter determines range influence knot.  Small numbers indicate local influence large ones, global influence.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/getRadiiChoices.vario.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function for obtaining a sequence of range parameters for the CReSS smoother — getRadiiChoices.vario","text":"","code":"# load data data(ns.data.re) rad.dat <- dplyr::filter(ns.data.re, impact==0, Year==9, MonthOfYear == 3) # load knot grid data data(knotgrid.ns)  # make distance matrices for datatoknots and knottoknots distMats<-makeDists(cbind(rad.dat$x.pos, rad.dat$y.pos), na.omit(knotgrid.ns)) # choose sequence of radii r_seq<-getRadiiChoices.vario(8, xydata = rad.dat[,c(\"x.pos\", \"y.pos\")],                               response = log(rad.dat$birds +1 ),                               basis = \"gaussian\",                               distMatrix = distMats$dataDist) #> Error in getRadiiChoices.vario(8, xydata = rad.dat[, c(\"x.pos\", \"y.pos\")],     response = log(rad.dat$birds + 1), basis = \"gaussian\", distMatrix = distMats$dataDist): object 'r_seq' not found  r_seq #> Error in eval(expr, envir, enclos): object 'r_seq' not found attr(r_seq, \"vg.fit\") #> Error in eval(expr, envir, enclos): object 'r_seq' not found"},{"path":"http://lindesaysh.github.io/MRSea/reference/getRadiiSequence.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for obtaining a sequence of range parameters for the bivariate CReSS smoother — getRadiiSequence","title":"Function for obtaining a sequence of range parameters for the bivariate CReSS smoother — getRadiiSequence","text":"Function obtaining sequence range parameters bivariate CReSS smoother","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/getRadiiSequence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for obtaining a sequence of range parameters for the bivariate CReSS smoother — getRadiiSequence","text":"","code":"getRadiiSequence(   method = NULL,   numberofradii = 10,   distMatrix,   basis,   rvin = NULL,   xydata,   response,   alpha = 0,   vgmmodel = \"Sph\",   showplots = FALSE,   ... )"},{"path":"http://lindesaysh.github.io/MRSea/reference/getRadiiSequence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for obtaining a sequence of range parameters for the bivariate CReSS smoother — getRadiiSequence","text":"method One \"original\" \"variogram\". original method described Scott-Hayward et al 2013 (reference ) variogram method vignette variogram radii selection numberofradii number range parameters SALSA use fitting CReSS smooth.  default 8.  Remember, parameters longer SALSA take find suitable one knot location. distMatrix Matrix distances data locations knot locations (n x k). May Euclidean geodesic distances. Euclidean distances created using makeDists. basis character stating whether 'gaussian' 'exponential' basis used. #' @param rvin Optional method = \"original\". Two parameter vector stating minimum maximum range r gaussian basis. xydata Required `method = \"variogram\". Data frame containing columns x y coordinates. x assumed first two columns response Required method = \"variogram\". Vector response values use gstat::variogram.  values approximately normally distributed. alpha Optional method = \"variogram\". Numeric parameter gstat::variogram function giving direction plane(x,y) showplots (default = FALSE). Optional method = \"variogram\". TRUE output gstat::variogram gstat::fit.variogram shown. ... parameters gstat::variogram function.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/getRadiiSequence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function for obtaining a sequence of range parameters for the bivariate CReSS smoother — getRadiiSequence","text":"Original method: function returns vector containing sequence range parameters. Variogram method: function returns vector containing sequence range parameters.  even number radii requested, reduced one give odd length sequence middle number best range parameter variogram. outputs variogram model can found attributes returned object vg.fit. Note estimated range variogram model exceeds maximum distance distance matrix, sequence reverts original method. warning printed method used attribute returned sequence (\"Method\").","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/getRadiiSequence.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function for obtaining a sequence of range parameters for the bivariate CReSS smoother — getRadiiSequence","text":"range parameter determines range influence knot.  Small numbers indicate local influence large ones, global influence.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/getRadiiSequence.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Function for obtaining a sequence of range parameters for the bivariate CReSS smoother — getRadiiSequence","text":"Scott-Hayward, L.; M. Mackenzie, C.Donovan, C.Walker E.Ashe.  Complex Region Spatial Smoother (CReSS). Journal computational Graphical Statistics. 2013. DOI: 10.1080/10618600.2012.762920 vignette variogram radii selection","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/getRadiiSequence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function for obtaining a sequence of range parameters for the bivariate CReSS smoother — getRadiiSequence","text":"","code":"# load data data(ns.data.re) rad.dat <- dplyr::filter(ns.data.re, impact==0, Year==9, MonthOfYear == 3) # load knot grid data data(knotgrid.ns)  # make distance matrices for datatoknots and knottoknots distMats<-makeDists(cbind(rad.dat$x.pos, rad.dat$y.pos), na.omit(knotgrid.ns)) # choose sequence of radii r_seq<-getRadiiSequence(method = \"variogram\",                         numberofradii = 8,                          xydata = rad.dat[,c(\"x.pos\", \"y.pos\")],                          response = log(rad.dat$birds +1 ),                          basis = \"gaussian\",                          distMatrix = distMats$dataDist)  r_seq #> [1] 0.0025322476 0.0013154870 0.0008885387 0.0006708204 0.0002961796 #> [6] 0.0001900437 0.0001399078 #> attr(,\"Method\") #> [1] \"Variogram\" #> attr(,\"vg.fit\") #>   model     psill    range #> 1   Nug 0.5771075    0.000 #> 2   Sph 0.8376254 1054.093 attr(r_seq, \"vg.fit\") #>   model     psill    range #> 1   Nug 0.5771075    0.000 #> 2   Sph 0.8376254 1054.093 attr(r_seq, \"Method\") #> [1] \"Variogram\"   r_seq<-getRadiiSequence(method = \"original\",                          numberofradii = 8,                           distMatrix = distMats$dataDist,                           basis=\"gaussian\")  r_seq #> [1] 0.0007538918 0.0006100646 0.0004936767 0.0003994933 0.0003232781 #> [6] 0.0002616033 0.0002116947 0.0001713077 #> attr(,\"Method\") #> [1] \"Original\" attr(r_seq, \"Method\") #> [1] \"Original\""},{"path":"http://lindesaysh.github.io/MRSea/reference/improve.step_2d.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to move knots to neighbours to see if there is any improvement in fit — improve.step_2d","title":"Function to move knots to neighbours to see if there is any improvement in fit — improve.step_2d","text":"Function move knots neighbours see improvement fit","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/improve.step_2d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to move knots to neighbours to see if there is any improvement in fit — improve.step_2d","text":"","code":"improve.step_2d(   gap,   knotDist,   radii,   dists,   explData,   num,   response,   knotgrid,   maxIterations,   fitnessMeasure,   point,   knotPoint,   position,   aR,   BIC,   track,   out.lm,   improveNudge,   tol = 0,   baseModel,   radiusIndices,   models,   interactionTerm,   data,   initDisp,   cv.opts,   basis,   printout )"},{"path":"http://lindesaysh.github.io/MRSea/reference/improve.step_2d.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function to move knots to neighbours to see if there is any improvement in fit — improve.step_2d","text":"Cameron Walker, Department Enginering Science, University Auckland.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/knotgrid.ns.html","id":null,"dir":"Reference","previous_headings":"","what":"Knot grid data for nearshore example — knotgrid.ns","title":"Knot grid data for nearshore example — knotgrid.ns","text":"Knot grid data nearshore example","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/knotgrid.off.html","id":null,"dir":"Reference","previous_headings":"","what":"Knot grid data for offshore example — knotgrid.off","title":"Knot grid data for offshore example — knotgrid.off","text":"Knot grid data offshore example","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/LocalRadialFunction.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for creating an Gaussian basis function for a spatial smooth using the CReSS method. — LocalRadialFunction","title":"Function for creating an Gaussian basis function for a spatial smooth using the CReSS method. — LocalRadialFunction","text":"function calculates local radial Gausiian basis matrix use runSALSA2D.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/LocalRadialFunction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for creating an Gaussian basis function for a spatial smooth using the CReSS method. — LocalRadialFunction","text":"","code":"LocalRadialFunction(radiusIndices, dists, radii, aR)"},{"path":"http://lindesaysh.github.io/MRSea/reference/LocalRadialFunction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for creating an Gaussian basis function for a spatial smooth using the CReSS method. — LocalRadialFunction","text":"radiusIndices Vector length startKnots identifying radii (splineParams[1]$radii) used initialise model dists Matrix distances data locations knot locations (n x k). May Euclidean geodesic distances. radii Sequence range parameters CReSS basis local (small) global (large). Determines range influence knot. aR Index knot locations. index contains numbers selected SALSA 1 number legal knot locations na.omit(knotgrid). Used specify columns dists used construct basis matrix.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/LocalRadialFunction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function for creating an Gaussian basis function for a spatial smooth using the CReSS method. — LocalRadialFunction","text":"Returns basis matrix one column knot aR one row every observation (.e. number rows dists)","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/LocalRadialFunction.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function for creating an Gaussian basis function for a spatial smooth using the CReSS method. — LocalRadialFunction","text":"Calculate local radial basis matrix use runSALSA2D.  distance matrix input may Euclidean geodesic distances.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/LocalRadialFunction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function for creating an Gaussian basis function for a spatial smooth using the CReSS method. — LocalRadialFunction","text":"","code":"# load data data(ns.data.re) # load knot grid data data(knotgrid.ns)  splineParams<-makesplineParams(data=ns.data.re, varlist=c('observationhour'))  #set some input info for SALSA ns.data.re$response<- ns.data.re$birds  # make distance matrices for datatoknots and knottoknots distMats<-makeDists(cbind(ns.data.re$x.pos, ns.data.re$y.pos), na.omit(knotgrid.ns), knotmat=FALSE)  # choose sequence of radii r_seq<-getRadiiChoices(8, distMats$dataDist) #> Error in getRadiiChoices(8, distMats$dataDist): argument \"basis\" is missing, with no default  # using the fourth radius and picking 5 knots basis<-LocalRadialFunction(radiusIndices=rep(4, 5), dists=distMats$dataDist, radii = r_seq,          aR=c(3, 10, 15, 28, 31)) #> Error in LocalRadialFunction(radiusIndices = rep(4, 5), dists = distMats$dataDist,     radii = r_seq, aR = c(3, 10, 15, 28, 31)): object 'r_seq' not found"},{"path":"http://lindesaysh.github.io/MRSea/reference/LRF.e.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for creating an Exponential basis function for a spatial smooth using the CReSS method. — LRF.e","title":"Function for creating an Exponential basis function for a spatial smooth using the CReSS method. — LRF.e","text":"function calculates local radial exponential basis matrix use runSALSA2D.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/LRF.e.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for creating an Exponential basis function for a spatial smooth using the CReSS method. — LRF.e","text":"","code":"LRF.e(radiusIndices, dists, radii, aR)"},{"path":"http://lindesaysh.github.io/MRSea/reference/LRF.e.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for creating an Exponential basis function for a spatial smooth using the CReSS method. — LRF.e","text":"radiusIndices Vector length startKnots identifying radii (splineParams[1]$radii) used initialise model dists Matrix distances data locations knot locations (n x k). May Euclidean geodesic distances. radii Sequence range parameters CReSS basis local (small) global (large). Determines range influence knot. aR Index knot locations. index contains numbers selected SALSA 1 number legal knot locations na.omit(knotgrid). Used specify columns dists used construct basis matrix.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/LRF.e.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function for creating an Exponential basis function for a spatial smooth using the CReSS method. — LRF.e","text":"Returns basis matrix one column knot aR one row every observation (.e. number rows dists)","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/LRF.e.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function for creating an Exponential basis function for a spatial smooth using the CReSS method. — LRF.e","text":"Calculate local radial basis matrix use runSALSA2D.  distance matrix input may Euclidean geodesic distances.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/LRF.e.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function for creating an Exponential basis function for a spatial smooth using the CReSS method. — LRF.e","text":"","code":"# load data data(ns.data.re) # load knot grid data data(knotgrid.ns)  splineParams<-makesplineParams(data=ns.data.re, varlist=c('observationhour'))  #set some input info for SALSA ns.data.re$response<- ns.data.re$birds  # make distance matrices for datatoknots and knottoknots distMats<-makeDists(cbind(ns.data.re$x.pos, ns.data.re$y.pos), na.omit(knotgrid.ns), knotmat=FALSE)  # choose sequence of radii r_seq<-getRadiiChoices(8, distMats$dataDist) #> Error in getRadiiChoices(8, distMats$dataDist): argument \"basis\" is missing, with no default  # using the fourth radius and picking 5 knots basis<-LRF.e(radiusIndices=rep(4, 5), dists=distMats$dataDist, radii = r_seq,          aR=c(3, 10, 15, 28, 31)) #> Error in LRF.e(radiusIndices = rep(4, 5), dists = distMats$dataDist, radii = r_seq,     aR = c(3, 10, 15, 28, 31)): object 'r_seq' not found"},{"path":"http://lindesaysh.github.io/MRSea/reference/LRF.g.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for creating an Gaussian basis function for a spatial smooth using the CReSS method. — LRF.g","title":"Function for creating an Gaussian basis function for a spatial smooth using the CReSS method. — LRF.g","text":"function calculates local radial Gausiian basis matrix use runSALSA2D.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/LRF.g.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for creating an Gaussian basis function for a spatial smooth using the CReSS method. — LRF.g","text":"","code":"LRF.g(radiusIndices, dists, radii, aR)"},{"path":"http://lindesaysh.github.io/MRSea/reference/LRF.g.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for creating an Gaussian basis function for a spatial smooth using the CReSS method. — LRF.g","text":"radiusIndices Vector length startKnots identifying radii (splineParams[1]$radii) used initialise model dists Matrix distances data locations knot locations (n x k). May Euclidean geodesic distances. radii Sequence range parameters CReSS basis local (small) global (large). Determines range influence knot. aR Index knot locations. index contains numbers selected SALSA 1 number legal knot locations na.omit(knotgrid). Used specify columns dists used construct basis matrix.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/LRF.g.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function for creating an Gaussian basis function for a spatial smooth using the CReSS method. — LRF.g","text":"Returns basis matrix one column knot aR one row every observation (.e. number rows dists)","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/LRF.g.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function for creating an Gaussian basis function for a spatial smooth using the CReSS method. — LRF.g","text":"Calculate local radial basis matrix use runSALSA2D.  distance matrix input may Euclidean geodesic distances.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/LRF.g.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function for creating an Gaussian basis function for a spatial smooth using the CReSS method. — LRF.g","text":"","code":"# load data data(ns.data.re) # load knot grid data data(knotgrid.ns)  splineParams<-makesplineParams(data=ns.data.re, varlist=c('observationhour'))  #set some input info for SALSA ns.data.re$response<- ns.data.re$birds  # make distance matrices for datatoknots and knottoknots distMats<-makeDists(cbind(ns.data.re$x.pos, ns.data.re$y.pos), na.omit(knotgrid.ns), knotmat=FALSE)  # choose sequence of radii r_seq<-getRadiiChoices(8, distMats$dataDist) #> Error in getRadiiChoices(8, distMats$dataDist): argument \"basis\" is missing, with no default  # using the fourth radius and picking 5 knots basis<-LRF.g(radiusIndices=rep(4, 5), dists=distMats$dataDist, radii = r_seq,          aR=c(3, 10, 15, 28, 31)) #> Error in LRF.g(radiusIndices = rep(4, 5), dists = distMats$dataDist, radii = r_seq,     aR = c(3, 10, 15, 28, 31)): object 'r_seq' not found"},{"path":"http://lindesaysh.github.io/MRSea/reference/make.gamMRSea.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to make model of class gamMRSea — make.gamMRSea","title":"Function to make model of class gamMRSea — make.gamMRSea","text":"Function allow model class gamMRSea updated include panel structure shortnames make summary anova outputs readable. Function update lm glm model class gamMRSea.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/make.gamMRSea.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to make model of class gamMRSea — make.gamMRSea","text":"","code":"make.gamMRSea(   model,   panelid = NULL,   splineParams = NULL,   varshortnames = NULL,   gamMRSea = FALSE )"},{"path":"http://lindesaysh.github.io/MRSea/reference/make.gamMRSea.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to make model of class gamMRSea — make.gamMRSea","text":"model model object class glm gamMRSea panelid vector length data containing panel identification row data splineParams MRSea based list object varshortnames vector containing short names variable.  used summary anova gamMRSea logical stating whether call model changed 'gamMRSea' glm","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/make.gamMRSea.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function to make model of class gamMRSea — make.gamMRSea","text":"LAS Scott-Hayward, University St Andrews","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/makeBootCIs.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate percentile confidence intervals from a matrix of bootstrapped predictions — makeBootCIs","title":"Calculate percentile confidence intervals from a matrix of bootstrapped predictions — makeBootCIs","text":"Calculate percentile confidence intervals matrix bootstrapped predictions","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/makeBootCIs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate percentile confidence intervals from a matrix of bootstrapped predictions — makeBootCIs","text":"","code":"makeBootCIs(preds, quants = c(0.025, 0.975))"},{"path":"http://lindesaysh.github.io/MRSea/reference/makeBootCIs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate percentile confidence intervals from a matrix of bootstrapped predictions — makeBootCIs","text":"preds matrix bootstrap predictions column bootstrap realisation quants (default = c(0.025, 0.975). Vector length two quantiles.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/makeBootCIs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate percentile confidence intervals from a matrix of bootstrapped predictions — makeBootCIs","text":"","code":"if (FALSE) { makeBootCIs(bootPreds) }"},{"path":"http://lindesaysh.github.io/MRSea/reference/makeDists.html","id":null,"dir":"Reference","previous_headings":"","what":"Make Euclidean distance matrices for use in CReSS and SALSA model frameworks — makeDists","title":"Make Euclidean distance matrices for use in CReSS and SALSA model frameworks — makeDists","text":"function makes two Euclidean distance matrices.  One distances spatial observations spatial knot locations.  , specified, distances knot locations. experimental owing addition creation infinity-block distance matrices. original functionality unchanged.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/makeDists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make Euclidean distance matrices for use in CReSS and SALSA model frameworks — makeDists","text":"","code":"makeDists(   datacoords,   knotcoords,   knotmat = TRUE,   polys = NULL,   type = \"A\",   plot.transition = FALSE,   grid.dim = c(100, 100) )"},{"path":"http://lindesaysh.github.io/MRSea/reference/makeDists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make Euclidean distance matrices for use in CReSS and SALSA model frameworks — makeDists","text":"datacoords Coordinates data locations. design matrix interaction required, add third column containing factor level. knotcoords Coordinates legal knot locations. design matrix interaction required, add third column containing factor level knot location. knotmat (default=TRUE). matrix knot-knot distances created polys (default=NULL). geodesic distances calculated, provide list polygons defining exclusion areas. type (default='').  One '' 'B'.  '' used knotcoords subset datacoords attributes knotcoords give index points datacoords (happens getKnotgrid() used).  'B' used prediction (datacoords prediction grid knotcoords subset) knotgrid generated using getKnotgrid(). plot.transition (default=TRUE). Logical stating whether plot transition matrix.  Useful see boundaries obeyed. grid.dim vector length two specifies dimesions grid used create transition matrix (default c(100, 100).  transition matrix shows boundaries ignored, grid dimensions need increase. However, increasing grid, whilst improving accuracy, also increases computational time.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/makeDists.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make Euclidean distance matrices for use in CReSS and SALSA model frameworks — makeDists","text":"data-knot matrix used CReSS basis knot-knot matrix used SALSA determine nearest knot `move' . three columns provided datacoords knotcoords matrix returned infinity distances knots data associated differing factor levels.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/makeDists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make Euclidean distance matrices for use in CReSS and SALSA model frameworks — makeDists","text":"","code":"# load data data(ns.data.re) # load knot grid data data(knotgrid.ns)   # make distance matrices for datatoknots and knottoknots distMats<-makeDists(cbind(ns.data.re$x.pos, ns.data.re$y.pos), na.omit(knotgrid.ns))  # ~~~~~~~~~~~~~~~~~~ # Example with block-infinity distance matrix data(nysted.analysisdata) myknots <- selectFctrKnots(nysted.analysisdata[,c('x.pos', 'y.pos', 'impact')], nk=150) #> Loading required package: fields #> Loading required package: spam #> Spam version 2.9-1 (2022-08-07) is loaded. #> Type 'help( Spam)' or 'demo( spam)' for a short introduction  #> and overview of this package. #> Help for individual functions is also obtained by adding the #> suffix '.spam' to the function name, e.g. 'help( chol.spam)'. #>  #> Attaching package: 'spam' #> The following objects are masked from 'package:mvtnorm': #>  #>     rmvnorm, rmvt #> The following object is masked from 'package:Matrix': #>  #>     det #> The following objects are masked from 'package:base': #>  #>     backsolve, forwardsolve #> Loading required package: viridis #> Loading required package: viridisLite #>  #> Try help(fields) to get started.  dists <- makeDists(datacoords = nysted.analysisdata[,c('x.pos', 'y.pos', 'impact')],                     knotcoords = myknots,                     knotmat = TRUE)"},{"path":"http://lindesaysh.github.io/MRSea/reference/makesplineParams.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructing an object of spline parameters — makesplineParams","title":"Constructing an object of spline parameters — makesplineParams","text":"function makes list object containing information fit splines continuous data.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/makesplineParams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructing an object of spline parameters — makesplineParams","text":"","code":"makesplineParams(   data,   varlist,   predictionData = NULL,   degree = NULL,   spl_all = NULL )"},{"path":"http://lindesaysh.github.io/MRSea/reference/makesplineParams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructing an object of spline parameters — makesplineParams","text":"data Data frame containing columns covariates listed varlist.  Column names must match names varlist varlist Vector variable names covariates interest predictionData Data frame containing columns covariates listed varlist.  Column names must match varlist.  parameter used find maximum range covariates data prediction data. predictionData NULL range data used. degree Vector specifying degree spline. unspecified, degree 2 stored.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/makesplineParams.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructing an object of spline parameters — makesplineParams","text":"information stored list slots [[2]] onward (slot [[1]] reserved spatial term). Specifically: covar. Name covariate. explanatory. Vector covariate data. knots. Knot(s) spline fitting.  function initialises knot mean covariate value. bd. specifies boundary knots.  predictionData NULL range covariate data.  Otherwise, boundary knots maximum combined range data prediction data. degree. degree B-spline. function retuns 2 default. See runSALSA2D details spatial slot ([[1]])","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/makesplineParams.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructing an object of spline parameters — makesplineParams","text":"","code":"# load data data(ns.data.re) # load prediction data data(ns.predict.data.re)  splineParams<- makesplineParams(ns.data.re, varlist=c('observationhour', 'DayOfMonth'),                 predictionData=ns.predict.data.re)"},{"path":"http://lindesaysh.github.io/MRSea/reference/MRSea.html","id":null,"dir":"Reference","previous_headings":"","what":"MRSea — MRSea","title":"MRSea — MRSea","text":"Examines animal survey data signs changes animal abundance distribution following marine renewables development. functions package can used analyse many types data including segmented line transect data nearshore vantage point data.  package fits Generalised Additive Models (GAMs) one two dimensional splines/bases utilising spatially adaptive framework knot number location. one dimension, B-splines, cyclic cubics natural cubics available two dimensions, radial bases can Gaussian exponential use Euclidean Geodesic (user specified) distances. Non-parametric bootstrapping available estimate uncertainty residual correlation present, robust standard errors maybe used (given panel structure). Several model assessment tools also available.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/ns.data.de.html","id":null,"dir":"Reference","previous_headings":"","what":"Nearshore data with decrease post-impact — ns.data.de","title":"Nearshore data with decrease post-impact — ns.data.de","text":"simulated dataset containing observed counts, effort data variables grid data. variables follows:","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/ns.data.de.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Nearshore data with decrease post-impact — ns.data.de","text":"data frame 27798 rows 12 variables","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/ns.data.de.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Nearshore data with decrease post-impact — ns.data.de","text":"x.pos spatial location horizontal axis UTMs y.pos spatial location vertical axis UTMs area area surveyed gridcell km squared floodebb 3 level factor covariate tides observationhour hour observation GridCode identifier different grids surveyed Year Year survey DavOfMonth Day survey MonthOfYear Month survey impact numerical indicator (0) (1) impact birds observed number birds cellid identifier individual records","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/ns.data.no.html","id":null,"dir":"Reference","previous_headings":"","what":"Nearshore data with no effect of impact — ns.data.no","title":"Nearshore data with no effect of impact — ns.data.no","text":"simulated dataset containing observed counts, effort data variables grid data. variables follows:","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/ns.data.no.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Nearshore data with no effect of impact — ns.data.no","text":"data frame 27798 rows 12 variables","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/ns.data.no.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Nearshore data with no effect of impact — ns.data.no","text":"x.pos spatial location horizontal axis UTMs y.pos spatial location vertical axis UTMs area area surveyed gridcell km squared floodebb 3 level factor covariate tides observationhour hour observation GridCode identifier different grids surveyed Year Year survey DavOfMonth Day survey MonthOfYear Month survey impact numerical indicator (0) (1) impact birds observed number birds cellid identifier individual records","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/ns.data.re.html","id":null,"dir":"Reference","previous_headings":"","what":"Nearshore data with redistribution post-impact — ns.data.re","title":"Nearshore data with redistribution post-impact — ns.data.re","text":"simulated dataset containing observed counts, effort data variables grid data. variables follows:","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/ns.data.re.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Nearshore data with redistribution post-impact — ns.data.re","text":"data frame 27798 rows 12 variables","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/ns.data.re.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Nearshore data with redistribution post-impact — ns.data.re","text":"x.pos spatial location horizontal axis UTMs y.pos spatial location vertical axis UTMs area area surveyed gridcell km squared floodebb 3 level factor covariate tides observationhour hour observation GridCode identifier different grids surveyed Year Year survey DavOfMonth Day survey MonthOfYear Month survey impact numerical indicator (0) (1) impact birds observed number birds cellid identifier individual records","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/ns.predict.data.de.html","id":null,"dir":"Reference","previous_headings":"","what":"Prediction grid data for nearshore post-impact decrease — ns.predict.data.de","title":"Prediction grid data for nearshore post-impact decrease — ns.predict.data.de","text":"simulated prediction dataset containing true counts, effort data variables grid data. variables follows:","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/ns.predict.data.de.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Prediction grid data for nearshore post-impact decrease — ns.predict.data.de","text":"data frame 27798 rows 11 variables","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/ns.predict.data.de.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prediction grid data for nearshore post-impact decrease — ns.predict.data.de","text":"x.pos spatial location horizontal axis UTMs y.pos spatial location vertical axis UTMs area Area surveyed gridcell km squared floodebb 3 level factor covariate tide state observationhour hour observation GridCode identifier different grids surveyed Year Year survey DavOfMonth Day survey MonthOfYear Month survey impact numerical indicator (0) (1) impact birds true density birds","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/ns.predict.data.no.html","id":null,"dir":"Reference","previous_headings":"","what":"Prediction grid data for nearshore with no effect of impact — ns.predict.data.no","title":"Prediction grid data for nearshore with no effect of impact — ns.predict.data.no","text":"simulated prediction dataset containing true counts, effort data variables grid data. variables follows:","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/ns.predict.data.no.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Prediction grid data for nearshore with no effect of impact — ns.predict.data.no","text":"data frame 27798 rows 11 variables","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/ns.predict.data.no.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prediction grid data for nearshore with no effect of impact — ns.predict.data.no","text":"x.pos spatial location horizontal axis UTMs y.pos spatial location vertical axis UTMs area Area surveyed gridcell km squared floodebb 3 level factor covariate tide state observationhour hour observation GridCode identifier different grids surveyed Year Year survey DavOfMonth Day survey MonthOfYear Month survey impact numerical indicator (0) (1) impact birds true density birds","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/ns.predict.data.re.html","id":null,"dir":"Reference","previous_headings":"","what":"Prediction grid data for nearshore post-impact redistribution — ns.predict.data.re","title":"Prediction grid data for nearshore post-impact redistribution — ns.predict.data.re","text":"simulated prediction dataset containing true counts, effort data variables grid data. variables follows:","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/ns.predict.data.re.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Prediction grid data for nearshore post-impact redistribution — ns.predict.data.re","text":"data frame 27798 rows 11 variables","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/ns.predict.data.re.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prediction grid data for nearshore post-impact redistribution — ns.predict.data.re","text":"x.pos spatial location horizontal axis UTMs y.pos spatial location vertical axis UTMs area Area surveyed gridcell km squared floodebb 3 level factor covariate tide state observationhour hour observation GridCode identifier different grids surveyed Year Year survey DavOfMonth Day survey MonthOfYear Month survey impact numerical indicator (0) (1) impact birds true density birds","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/nysted.analysisdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Nysted Data — nysted.analysisdata","title":"Nysted Data — nysted.analysisdata","text":"simulated dataset containing distance corrected dis.data.re. variables follows:","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/nysted.analysisdata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Nysted Data — nysted.analysisdata","text":"data frame 9232 rows 12 variables","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/nysted.analysisdata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Nysted Data — nysted.analysisdata","text":"transect.id Identifier individual visits transects transect.label Labels transects season Numerical indicator four different seasons impact Numerical indicator (0) (1) impact segment.id Identifier individual visits segment segment.label Label segments length Length segment km x.pos spatial location horizontal axis UTMs y.pos spatial location vertical axis UTMs depth Depth m area area segment kmsq NHAT Bird counts segment response NHAT","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/nysted.coast.html","id":null,"dir":"Reference","previous_headings":"","what":"Polygon of the Nysted coastline — nysted.coast","title":"Polygon of the Nysted coastline — nysted.coast","text":"variables follows:","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/nysted.coast.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Polygon of the Nysted coastline — nysted.coast","text":"data frame 46 rows 2 variables","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/nysted.coast.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Polygon of the Nysted coastline — nysted.coast","text":"x spatial location horizontal axis UTMs. Unit kilometers. y spatial location vertical axis UTMs. Unit kilometers.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/nysted.predictdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Prediction grid data for Nysted Data — nysted.predictdata","title":"Prediction grid data for Nysted Data — nysted.predictdata","text":"simulated prediction dataset containing true counts, effort data variables grid data. variables follows:","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/nysted.predictdata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Prediction grid data for Nysted Data — nysted.predictdata","text":"data frame 37928 rows 10 variables","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/nysted.predictdata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prediction grid data for Nysted Data — nysted.predictdata","text":"area area surveyed gridcell km squared x.pos spatial location horizontal axis UTMs (km) y.pos spatial location vertical axis UTMs (km) depth depth m segment.id Identifier individual visits segment season Numerical indicator four different seasons impact Numerical indicator (0) (1) impact truth.re number birds redistribution simulation truth.de number birds site-wide decrease simulation truth.number birds change simulation","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/nysted.studybnd.html","id":null,"dir":"Reference","previous_headings":"","what":"Polygon of the outline of the Nysted study area — nysted.studybnd","title":"Polygon of the outline of the Nysted study area — nysted.studybnd","text":"variables follows:","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/nysted.studybnd.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Polygon of the outline of the Nysted study area — nysted.studybnd","text":"data frame 2210 rows 2 variables","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/nysted.studybnd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Polygon of the outline of the Nysted study area — nysted.studybnd","text":"x.pos spatial location horizontal axis UTMs. Unit meters. y.pos spatial location vertical axis UTMs. Unit meters.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/plotacf.html","id":null,"dir":"Reference","previous_headings":"","what":"run functions to create acf matrix and plot the results — plotacf","title":"run functions to create acf matrix and plot the results — plotacf","text":"run functions create acf matrix plot results","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/plotacf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"run functions to create acf matrix and plot the results — plotacf","text":"","code":"plotacf(acfmat, maxlag = NULL)"},{"path":"http://lindesaysh.github.io/MRSea/reference/plotacf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"run functions to create acf matrix and plot the results — plotacf","text":"acfmat Matrix output acffunc (blocks x max block length). maxlag (default=NULL). Numeric entry allow restriction maximum lag plots.  NULL length longest panel used maximum plotted lag.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/plotCumRes.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate cumulative residuals and plot. — plotCumRes","title":"Calculate cumulative residuals and plot. — plotCumRes","text":"output plots cumulative residuals.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/plotCumRes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate cumulative residuals and plot. — plotCumRes","text":"","code":"plotCumRes(   model,   varlist = NULL,   label = \"\",   save = FALSE,   variableonly = FALSE )"},{"path":"http://lindesaysh.github.io/MRSea/reference/plotCumRes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate cumulative residuals and plot. — plotCumRes","text":"model Fitted model object (glm gam) varlist Vector covariate names (continous covariates ) label Label printed end plot name identify save=TRUE. save (default=FALSE). Logical stating whether plot saved working directory.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/plotCumRes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate cumulative residuals and plot. — plotCumRes","text":"Cumulative residual plots returned residuals ordered covariate varlist, predicted value index observations (temporally). blue dots residuals black line line cumulative residual. covariate plots (varlist) grey line indicates expect well fitted covariate. .e. one fitted excessive knots. Note: covariate discrete nature (like example ), lot overplotting residuals.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/plotCumRes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate cumulative residuals and plot. — plotCumRes","text":"","code":"# load data data(ns.data.re)  model<-gamMRSea(birds ~ observationhour + as.factor(floodebb) + as.factor(impact),             family='quasipoisson', data=ns.data.re)  plotCumRes(model, varlist=c('observationhour')) #> [1] \"Calculating cumulative residuals\" #> Error in mutate(., Predicted = fitted(model), Index = 1:n()): could not find function \"mutate\""},{"path":"http://lindesaysh.github.io/MRSea/reference/plotMeanVar.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions to create a Mean-Variance plot for checking the distribution assumptions of the mean and the variance.  Distributions available are Gaussian, Poisson, QuasiPoisson, Gamma and Tweedie. — plotMeanVar","title":"Functions to create a Mean-Variance plot for checking the distribution assumptions of the mean and the variance.  Distributions available are Gaussian, Poisson, QuasiPoisson, Gamma and Tweedie. — plotMeanVar","text":"Functions create Mean-Variance plot checking distribution assumptions mean variance.  Distributions available Gaussian, Poisson, QuasiPoisson, Gamma Tweedie.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/plotMeanVar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions to create a Mean-Variance plot for checking the distribution assumptions of the mean and the variance.  Distributions available are Gaussian, Poisson, QuasiPoisson, Gamma and Tweedie. — plotMeanVar","text":"","code":"plotMeanVar(model, cut.bins = 20, save = FALSE, label = NULL, print = TRUE)"},{"path":"http://lindesaysh.github.io/MRSea/reference/plotMeanVar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions to create a Mean-Variance plot for checking the distribution assumptions of the mean and the variance.  Distributions available are Gaussian, Poisson, QuasiPoisson, Gamma and Tweedie. — plotMeanVar","text":"model Fitted model object (glm gam) save (default=FALSE). Logical stating whether plot saved working directory. See label change directory. label Character string indicating label added plot using save = TRUE. Can also include pathway directory choice. print Logical stating whether print plot. FALSE plot object returned. cut.prob.Numerical input state increment sequence cut probabilities.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/plotMeanVar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functions to create a Mean-Variance plot for checking the distribution assumptions of the mean and the variance.  Distributions available are Gaussian, Poisson, QuasiPoisson, Gamma and Tweedie. — plotMeanVar","text":"plot showing observed mean variance (cutting fitted values bins finding mean fitted value variance bin) assumed relationship various distributions depending model fitted (lines plot).","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/plotMeanVar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Functions to create a Mean-Variance plot for checking the distribution assumptions of the mean and the variance.  Distributions available are Gaussian, Poisson, QuasiPoisson, Gamma and Tweedie. — plotMeanVar","text":"","code":"# load data data(ns.data.re)  model<-glm(birds ~ observationhour + as.factor(floodebb) + as.factor(impact),             family='quasipoisson', data=ns.data.re)  plotMeanVar(model) #> Error in ggplot(): could not find function \"ggplot\""},{"path":"http://lindesaysh.github.io/MRSea/reference/plotRunsProfile.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate runs test and plot profile plot.  The output is a plot of runs profiles (with p-value to indicate level of correlation) — plotRunsProfile","title":"Calculate runs test and plot profile plot.  The output is a plot of runs profiles (with p-value to indicate level of correlation) — plotRunsProfile","text":"Calculate runs test plot profile plot.  output plot runs profiles (p-value indicate level correlation)","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/plotRunsProfile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate runs test and plot profile plot.  The output is a plot of runs profiles (with p-value to indicate level of correlation) — plotRunsProfile","text":"","code":"plotRunsProfile(model, varlist, label = \"\", save = FALSE)"},{"path":"http://lindesaysh.github.io/MRSea/reference/plotRunsProfile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate runs test and plot profile plot.  The output is a plot of runs profiles (with p-value to indicate level of correlation) — plotRunsProfile","text":"model Fitted model object (glm gam) varlist Vector covariate names (continous covariates ) label Label printed end plot name identify save=TRUE. save (default=FALSE). Logical stating whether plot saved working directory.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/plotRunsProfile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate runs test and plot profile plot.  The output is a plot of runs profiles (with p-value to indicate level of correlation) — plotRunsProfile","text":"Runs profile plots returned residuals ordered covariate varlist, predicted value index observations (temporally). black line line sequences positive negative residuals.  vertical lines change sequence positive negative residuals (vice versa). p-values runsTest indicate whether correlation residuals (p<0.05) independence (p>0.05).  test statistic determines type correlation (positive/negative) result printed bottom figure. Note: covariate discrete nature (like example ), lot overplotting runs.  jittering occurs discrete value (covariates <= 25 unique values).","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/plotRunsProfile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate runs test and plot profile plot.  The output is a plot of runs profiles (with p-value to indicate level of correlation) — plotRunsProfile","text":"","code":"# load data data(ns.data.re)  model<-gamMRSea(birds ~ observationhour + as.factor(floodebb) + as.factor(impact),              family='quasipoisson', data=ns.data.re)  plotRunsProfile(model, varlist=c('observationhour')) #> [1] \"Calculating runs test and plotting profile\""},{"path":"http://lindesaysh.github.io/MRSea/reference/predict.data.de.html","id":null,"dir":"Reference","previous_headings":"","what":"Prediction grid data for post-impact decrease — predict.data.de","title":"Prediction grid data for post-impact decrease — predict.data.de","text":"simulated dataset containing true number birds, effort data variables prediction grid data. variables follows:","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/predict.data.de.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Prediction grid data for post-impact decrease — predict.data.de","text":"data frame 37928 rows 8 variables","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/predict.data.de.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prediction grid data for post-impact decrease — predict.data.de","text":"area area surveyed gridcell km squared x.pos spatial location horizontal axis UTMs y.pos spatial location vertical axis UTMs depth depth m segment.id Identifier individual visits segment season Numerical indicator four different seasons impact Numerical indicator (0) (1) impact truth number birds","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/predict.data.no.html","id":null,"dir":"Reference","previous_headings":"","what":"Prediction grid data for no post-impact consequence — predict.data.no","title":"Prediction grid data for no post-impact consequence — predict.data.no","text":"simulated dataset containing true number birds, effort data variables prediction grid data. variables follows:","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/predict.data.no.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Prediction grid data for no post-impact consequence — predict.data.no","text":"data frame 37928 rows 8 variables","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/predict.data.no.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prediction grid data for no post-impact consequence — predict.data.no","text":"area area surveyed gridcell km squared x.pos spatial location horizontal axis UTMs y.pos spatial location vertical axis UTMs depth depth m segment.id Identifier individual visits segment season Numerical indicator four different seasons impact Numerical indicator (0) (1) impact truth number birds","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/predict.data.re.html","id":null,"dir":"Reference","previous_headings":"","what":"Prediction grid data for post-impact redistribution — predict.data.re","title":"Prediction grid data for post-impact redistribution — predict.data.re","text":"simulated dataset containing true number birds, effort data variables prediction grid data. variables follows:","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/predict.data.re.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Prediction grid data for post-impact redistribution — predict.data.re","text":"data frame 37928 rows 8 variables","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/predict.data.re.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prediction grid data for post-impact redistribution — predict.data.re","text":"area area surveyed gridcell km squared x.pos spatial location horizontal axis UTMs y.pos spatial location vertical axis UTMs depth depth m segment.id Identifier individual visits segment season Numerical indicator four different seasons impact Numerical indicator (0) (1) impact truth number birds","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/predict.gamMRSea.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for making predictions for a model containing a CReSS basis (two dimensional local smooth). — predict.gamMRSea","title":"Function for making predictions for a model containing a CReSS basis (two dimensional local smooth). — predict.gamMRSea","text":"function calculates vector predictions scale response link.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/predict.gamMRSea.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for making predictions for a model containing a CReSS basis (two dimensional local smooth). — predict.gamMRSea","text":"","code":"# S3 method for gamMRSea predict(newdata = NULL, g2k = NULL, object, type = \"response\", coeff = NULL)"},{"path":"http://lindesaysh.github.io/MRSea/reference/predict.gamMRSea.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for making predictions for a model containing a CReSS basis (two dimensional local smooth). — predict.gamMRSea","text":"newdata Data frame covariate values make predictions g2k Matrix distances prediction locations knot locations (n x k). May Euclidean geodesic distances. object Object GEE GLM model type Type predictions required. (default=response, may also use link). coeff Vector coefficients (default = NULL). used bootstrapping sampling coefficients distribution e.g. .bootstrap.cress.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/predict.gamMRSea.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function for making predictions for a model containing a CReSS basis (two dimensional local smooth). — predict.gamMRSea","text":"Returns vector predictions either response link scale","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/predict.gamMRSea.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function for making predictions for a model containing a CReSS basis (two dimensional local smooth). — predict.gamMRSea","text":"Calculate predictions model whilst centering CReSS bases way fitted model. Note, offset model must called 'area'.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/predict.gamMRSea.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function for making predictions for a model containing a CReSS basis (two dimensional local smooth). — predict.gamMRSea","text":"","code":"# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ # offshore redistribution data # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data(dis.data.re) data(predict.data.re) data(knotgrid.off) # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ # distance sampling dis.data.re$survey.id<-paste(dis.data.re$season,dis.data.re$impact,sep=\"\") result<-ddf(dsmodel=~mcds(key=\"hn\", formula=~1), data=dis.data.re, method=\"ds\",         meta.data=list(width=250)) #> Error in ddf(dsmodel = ~mcds(key = \"hn\", formula = ~1), data = dis.data.re,     method = \"ds\", meta.data = list(width = 250)): could not find function \"ddf\" dis.data.re<-create.NHAT(dis.data.re,result) #> Error in which(data$distance <= ddf.obj$meta.data$width): object 'result' not found count.data<-create.count.data(dis.data.re) #> Error in `$<-.data.frame`(`*tmp*`, \"NHAT\", value = numeric(0)): replacement has 0 rows, data has 10951  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ # spatial modelling splineParams<-makesplineParams(data=count.data, varlist=c('depth')) #> Error in makesplineParams(data = count.data, varlist = c(\"depth\")): object 'count.data' not found #set some input info for SALSA count.data$response<- count.data$NHAT #> Error in eval(expr, envir, enclos): object 'count.data' not found # make distance matrices for datatoknots and knottoknots distMats<-makeDists(cbind(count.data$x.pos, count.data$y.pos), na.omit(knotgrid.off)) #> Error in cbind(count.data$x.pos, count.data$y.pos): object 'count.data' not found # choose sequence of radii r_seq<-getRadiiChoices(8,distMats$dataDist) #> Error in getRadiiChoices(8, distMats$dataDist): object 'distMats' not found # set initial model without the spatial term initialModel<- glm(response ~ as.factor(season) + as.factor(impact) + offset(log(area)),                 family='quasipoisson', data=count.data) #> Error in is.data.frame(data): object 'count.data' not found # make parameter set for running salsa2d salsa2dlist<-list(fitnessMeasure = 'QICb', knotgrid = knotgrid.off,                   knotdim=c(26,14), startKnots=4, minKnots=4,                  maxKnots=20, r_seq=r_seq, gap=4000, interactionTerm=\"as.factor(impact)\") #> Error in eval(expr, envir, enclos): object 'r_seq' not found salsa2dOutput_k6<-runSALSA2D(initialModel, salsa2dlist, d2k=distMats$dataDist,                    k2k=distMats$knotDist, splineParams=splineParams) #> Error in runSALSA2D(initialModel, salsa2dlist, d2k = distMats$dataDist,     k2k = distMats$knotDist, splineParams = splineParams): object 'initialModel' not found   # make predictions on response scale preds<-predict.gamMRSea(newdata=predict.data.re, g2k=dists, object=salsa2dOutput_k6$bestModel) #> Error in predict.gamMRSea(newdata = predict.data.re, g2k = dists, object = salsa2dOutput_k6$bestModel): object 'salsa2dOutput_k6' not found"},{"path":"http://lindesaysh.github.io/MRSea/reference/QICb.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to calculate QICb — QICb","title":"Function to calculate QICb — QICb","text":"Function calculate QICb","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/QICb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to calculate QICb — QICb","text":"","code":"QICb(model)"},{"path":"http://lindesaysh.github.io/MRSea/reference/QICb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to calculate QICb — QICb","text":"model Model class geeglm","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/QICb.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function to calculate QICb — QICb","text":"Lindesay Scott-Hayward, University St Andrews","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/qposbinom.html","id":null,"dir":"Reference","previous_headings":"","what":"qposbinom function — qposbinom","title":"qposbinom function — qposbinom","text":"qposbinom function","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/qposbinom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"qposbinom function — qposbinom","text":"","code":"qposbinom(p, size, prob)"},{"path":"http://lindesaysh.github.io/MRSea/reference/qzibinom.html","id":null,"dir":"Reference","previous_headings":"","what":"qzibinom function from the VGAM package — qzibinom","title":"qzibinom function from the VGAM package — qzibinom","text":"qzibinom function VGAM package","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/qzibinom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"qzibinom function from the VGAM package — qzibinom","text":"","code":"qzibinom(p, size, prob, pstr0 = 0)"},{"path":"http://lindesaysh.github.io/MRSea/reference/qzibinom.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"qzibinom function from the VGAM package — qzibinom","text":"VGAM package","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/return.reg.spline.fit.2d.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper function for running SALSA2D — return.reg.spline.fit.2d","title":"Wrapper function for running SALSA2D — return.reg.spline.fit.2d","text":"Wrapper function running SALSA2D","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/return.reg.spline.fit.2d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper function for running SALSA2D — return.reg.spline.fit.2d","text":"","code":"return.reg.spline.fit.2d(   splineParams,   startKnots,   winHalfWidth,   fitnessMeasure = \"BIC\",   maxIterations = 10,   tol = 0,   baseModel = NULL,   radiusIndices = NULL,   initialise = TRUE,   initialKnots = NULL,   initialaR = NULL,   interactionTerm = NULL,   knot.seed = 10,   plot = FALSE,   cv.opts,   basis,   printout )"},{"path":"http://lindesaysh.github.io/MRSea/reference/return.reg.spline.fit.2d.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Wrapper function for running SALSA2D — return.reg.spline.fit.2d","text":"Cameron Walker, Department Enginering Science, University Auckland.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/return.reg.spline.fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Code for adaptively spacing knots for a given covariate. — return.reg.spline.fit","title":"Code for adaptively spacing knots for a given covariate. — return.reg.spline.fit","text":"Code adaptively spacing knots given covariate.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/return.reg.spline.fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Code for adaptively spacing knots for a given covariate. — return.reg.spline.fit","text":"","code":"return.reg.spline.fit(   response,   explanatory,   degree,   minKnots,   maxKnots,   startKnots,   gap,   winHalfWidth,   fitnessMeasure = \"BIC\",   maxIterations = 100,   initialise = TRUE,   initialKnots = NULL,   baseModel = NULL,   bd,   spl,   interactionTerm = interactionTerm,   cv.opts,   splineParams,   printout )"},{"path":"http://lindesaysh.github.io/MRSea/reference/return.reg.spline.fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Code for adaptively spacing knots for a given covariate. — return.reg.spline.fit","text":"response vector response data modelling process explanatory vector covariate find knots degree degree spline used minKnots minimum number knots fit maxKnots maximum number knots fit startKnots number equally spaced knots start (minKnots maxKnots) gap minimum gap knots (unit measurement explanatory) winHalfWidth Half-width window used calculate region biggest average residual magnitude fitnessMeasure (default=BIC). Measure used evaluate fit. options AIC, AICc, BIC, QAIC, QAICc, QBIC (Quasi-Likelihood Information Criterion log(n) penalty), k-fold cross-validation (cv.gamMRSea), AICtweedie, BICtweedie. maxIterations exchange/improve heuristic terminate maxIterations still running initialise (default = TRUE). Logical stating whether start equally spaced knots (TRUE) user specified locations (FALSE) initialKnots initialise=FALSE start locations knots specified initialKnots baseModel starting model SALSA use.  Must contain covariate explanatory bd x-coordinate boundary knots explanatory spl \"bs\" uses b-spline, \"cc\" uses cyclic cubic, \"ns\" uses natural cubic spline fitting smooth explanatory interactionTerm character stating variable use interaction cv.opts list object containing options cv.gamMRSea. printout logical stating whether analysis information printed workspace logfile (TRUE) (FALSE) suppress.printout default=FALSE. TRUE, progress printed workspace. FALSE, .log file created working directory.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/return.reg.spline.fit.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Code for adaptively spacing knots for a given covariate. — return.reg.spline.fit","text":"Cameron Walker, Department Engineering Science, University Auckland, University Auckland), Lindesay Scott-Hayward (University St Andrews)","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/rpois.od.html","id":null,"dir":"Reference","previous_headings":"","what":"Generating overdispersed poisson data — rpois.od","title":"Generating overdispersed poisson data — rpois.od","text":"Generating overdispersed poisson data","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/rpois.od.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generating overdispersed poisson data — rpois.od","text":"","code":"rpois.od(n, lambda, d = 1)"},{"path":"http://lindesaysh.github.io/MRSea/reference/runACF.html","id":null,"dir":"Reference","previous_headings":"","what":"run functions to create acf matrix and plot the results — runACF","title":"run functions to create acf matrix and plot the results — runACF","text":"run functions create acf matrix plot results","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/runACF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"run functions to create acf matrix and plot the results — runACF","text":"","code":"runACF(   block,   model,   store = FALSE,   save = F,   suppress.printout = TRUE,   maxlag = NULL,   printplot = TRUE )"},{"path":"http://lindesaysh.github.io/MRSea/reference/runACF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"run functions to create acf matrix and plot the results — runACF","text":"block Vector blocks identify data points correlated model Fitted model object (glm gam) store (default=FALSE). Logical stating whether list matrix correlations stored (output acffunc.) save (default=FALSE). Logical stating whether plot saved working directory. suppress.printout (default=TRUE. Logical stating whether show printout block numbers assess progress. FALSE show printout. maxlag (default=NULL). Numeric entry allow restriction maximum lag plots.  NULL length longest panel used maximum plotted lag.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/runACF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"run functions to create acf matrix and plot the results — runACF","text":"Plot lag vs correlation.  grey line correlation individual block block.  red line mean values lag. store=TRUE matrix correlations (nblocks x length_max_block) returned plotacf may used plot acf.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/runACF.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"run functions to create acf matrix and plot the results — runACF","text":"LAS Scott-Hayward, University St Andrews","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/runACF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"run functions to create acf matrix and plot the results — runACF","text":"","code":"# load data data(ns.data.re)  model<-gamMRSea(birds ~ observationhour + as.factor(floodebb) + as.factor(impact),             family='quasipoisson', data=ns.data.re)  ns.data.re$blockid<-paste(ns.data.re$GridCode, ns.data.re$Year, ns.data.re$MonthOfYear,                      ns.data.re$DayOfMonth, sep='') ns.data.re$blockid<-as.factor(ns.data.re$blockid)  runACF(ns.data.re$blockid, model, suppress.printout=TRUE) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:igraph': #>  #>     as_data_frame, groups, union #> The following objects are masked from 'package:raster': #>  #>     intersect, select, union #> The following object is masked from 'package:MRSea': #>  #>     contains #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union #> Error in ggplot(): could not find function \"ggplot\"  # storing the output and then plotting acfoutput <- runACF(ns.data.re$blockid, model, suppress.printout=TRUE, store=TRUE) plotacf(acfoutput$acfmat) #> Error in ggplot(): could not find function \"ggplot\""},{"path":"http://lindesaysh.github.io/MRSea/reference/runDiagnostics.html","id":null,"dir":"Reference","previous_headings":"","what":"functions to create observed vs fitted and fitted vs scaled pearsons residual plots — runDiagnostics","title":"functions to create observed vs fitted and fitted vs scaled pearsons residual plots — runDiagnostics","text":"functions create observed vs fitted fitted vs scaled pearsons residual plots","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/runDiagnostics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"functions to create observed vs fitted and fitted vs scaled pearsons residual plots — runDiagnostics","text":"","code":"runDiagnostics(model, plotting = \"b\", save = FALSE, label = NULL)"},{"path":"http://lindesaysh.github.io/MRSea/reference/runDiagnostics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"functions to create observed vs fitted and fitted vs scaled pearsons residual plots — runDiagnostics","text":"model Fitted model object (glm gam) plotting Plotting options (default='b'). b: returns plots, f: returns observed vs fitted  r: returns scale pearsons residual plot . save (default=FALSE). Logical stating whether plot saved working directory. See label change directory. label Character string indicating label added plot using save = TRUE. Can also include pathway directory choice.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/runDiagnostics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"functions to create observed vs fitted and fitted vs scaled pearsons residual plots — runDiagnostics","text":"Two plots: Observed vs Fitted Plot observed vs fitted concordence correlation marginal R-squared printed plot title. Fitted vs scaled Pearsons residuals red line locally weighted least squares regression line residuals.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/runDiagnostics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"functions to create observed vs fitted and fitted vs scaled pearsons residual plots — runDiagnostics","text":"","code":"# load data data(ns.data.re)  model<-glm(birds ~ observationhour + as.factor(floodebb) + as.factor(impact),             family='quasipoisson', data=ns.data.re)  runDiagnostics(model) #> Error in ggplot(df): could not find function \"ggplot\""},{"path":"http://lindesaysh.github.io/MRSea/reference/runInfluence.html","id":null,"dir":"Reference","previous_headings":"","what":"Assessing the influece of each correlated block on both the precision of the parameter estimates (COVRATIO statistics) and the sensitivity of model predictions (PRESS statistics). — runInfluence","title":"Assessing the influece of each correlated block on both the precision of the parameter estimates (COVRATIO statistics) and the sensitivity of model predictions (PRESS statistics). — runInfluence","text":"Assessing influece correlated block precision parameter estimates (COVRATIO statistics) sensitivity model predictions (PRESS statistics).","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/runInfluence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assessing the influece of each correlated block on both the precision of the parameter estimates (COVRATIO statistics) and the sensitivity of model predictions (PRESS statistics). — runInfluence","text":"","code":"runInfluence(model, id = NULL, save = FALSE, dots = FALSE)"},{"path":"http://lindesaysh.github.io/MRSea/reference/runInfluence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assessing the influece of each correlated block on both the precision of the parameter estimates (COVRATIO statistics) and the sensitivity of model predictions (PRESS statistics). — runInfluence","text":"model Fitted model object (glm, gamMRSea gam) id blocking structure save (default=FALSE). Logical stating whether plot saved working directory. dots (default=FALSE). TRUE, progress dots printed.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/runInfluence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assessing the influece of each correlated block on both the precision of the parameter estimates (COVRATIO statistics) and the sensitivity of model predictions (PRESS statistics). — runInfluence","text":"Two plots one COVRATIO PRESS statistics, giving influence block precision parameter estimates sensitivity model predictions. List object: influenceData List blocks, COVRATIO statistics PRESS statistics used making plot PRESS COVRATIO statistics. influencePoints Row id blocks influenceData lie outside 95% quantile COVRATIO statistics 95% quantile PRESS statistics.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/runInfluence.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assessing the influece of each correlated block on both the precision of the parameter estimates (COVRATIO statistics) and the sensitivity of model predictions (PRESS statistics). — runInfluence","text":"Always run timeInfluenceCheck first see long take produce plots.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/runInfluence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assessing the influece of each correlated block on both the precision of the parameter estimates (COVRATIO statistics) and the sensitivity of model predictions (PRESS statistics). — runInfluence","text":"","code":"# load data data(ns.data.re)  ns.data.re$blockid<-paste(ns.data.re$GridCode, ns.data.re$Year, ns.data.re$MonthOfYear,                      ns.data.re$DayOfMonth, sep='') ns.data.re$blockid<-as.factor(ns.data.re$blockid)  model<-gamMRSea(birds ~ observationhour + as.factor(floodebb) + as.factor(impact),                 family='poisson', data=ns.data.re)  timeInfluenceCheck(model, ns.data.re$blockid) #> [1] \"Calculating the influence measures will take approximately 20 minutes\"  if (FALSE) { # **WARNING** this example takes a long time influences<-runInfluence(model, ns.data.re$blockid) }"},{"path":"http://lindesaysh.github.io/MRSea/reference/runPartialPlots.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot partial plots for each of the variables listed in factorlist.in or varlist.in. — runPartialPlots","title":"Plot partial plots for each of the variables listed in factorlist.in or varlist.in. — runPartialPlots","text":"Plot partial plots variables listed factorlist.varlist..","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/runPartialPlots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot partial plots for each of the variables listed in factorlist.in or varlist.in. — runPartialPlots","text":"","code":"runPartialPlots(   model,   data,   factorlist.in = NULL,   varlist.in = NULL,   showKnots = FALSE,   type = \"response\",   partial.resid = FALSE,   save = FALSE,   savedata = F,   label = NULL,   includeB0 = FALSE )"},{"path":"http://lindesaysh.github.io/MRSea/reference/runPartialPlots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot partial plots for each of the variables listed in factorlist.in or varlist.in. — runPartialPlots","text":"model Fitted model object (glm gam) data Data frame data information used fit model factorlist.(default=NULL). Vector names factor variables varlist.(default=NULL). Vector names continuous variables showKnots (default=FALSE). Logical stating whether knot locations plotted. type (default='responss').  Character stating whether return partial plots scale link function response. partial.resid (default=FALSE).  Logical stating whether include partial residuals plot. save (default=FALSE). Logical stating whether plot saved working directory. savedata (default=FALSE). Logical stating whether data used make plots saved working directory.  object called PartialData_'variablename'.RData label (default=NULL).  enables user specify character label plots saved working directory. may also used specify alternative directory. includeB0 (default=TRUE).  Logical stating whether include intercept partial plots.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/runPartialPlots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot partial plots for each of the variables listed in factorlist.in or varlist.in. — runPartialPlots","text":"Partial plots, one covariate factorlist.varlist.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/runPartialPlots.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot partial plots for each of the variables listed in factorlist.in or varlist.in. — runPartialPlots","text":"LAS Scott-Hayward, University St Andrews","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/runPartialPlots.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot partial plots for each of the variables listed in factorlist.in or varlist.in. — runPartialPlots","text":"","code":"#' # load data data(ns.data.re)  model<-gamMRSea(birds ~ observationhour + as.factor(floodebb) + as.factor(impact),            family='quasipoisson', data=ns.data.re)  runPartialPlots(model, ns.data.re, factorlist.in=c('floodebb', 'impact'),                 varlist.in=c('observationhour')) #> [1] \"Making partial plots\"    runPartialPlots(model, ns.data.re, factorlist.in=c('floodebb', 'impact'),                 varlist.in=c('observationhour'), type='link') #> [1] \"Making partial plots\"    runPartialPlots(model, ns.data.re, factorlist.in=c('floodebb', 'impact'),                 varlist.in=c('observationhour'), partial.resid=TRUE) #> [1] \"Making partial plots\" #> Error in predict.gamMRSea(object, type = \"terms\"): argument \"object\" is missing, with no default"},{"path":"http://lindesaysh.github.io/MRSea/reference/runSALSA1D.html","id":null,"dir":"Reference","previous_headings":"","what":"Running SALSA for continuous one-dimensional covariates. — runSALSA1D","title":"Running SALSA for continuous one-dimensional covariates. — runSALSA1D","text":"function finds spatially adaptive knot locations one continuous one-dimensional covariates.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/runSALSA1D.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Running SALSA for continuous one-dimensional covariates. — runSALSA1D","text":"","code":"runSALSA1D(   initialModel,   salsa1dlist,   varlist,   factorlist = NULL,   predictionData = NULL,   varlist_cyclicSplines = NULL,   splineParams = NULL,   datain,   removal = FALSE,   panelid = NULL,   suppress.printout = FALSE,   logfile = FALSE )"},{"path":"http://lindesaysh.github.io/MRSea/reference/runSALSA1D.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Running SALSA for continuous one-dimensional covariates. — runSALSA1D","text":"initialModel best fitting CReSS model continuous covariates specified.  must model class glm. salsa1dlist Vector objects required runSALSA1D: fitnessMeasure, minKnots_1d, maxKnots_1d, startKnots_1d degree, maxIterations gap. varlist Vector variable names covariates required knot selection factorlist vector factor variables specified initialModel.  Specified check can made non-zero counts levels factor. Uses function checkfactorlevelcounts. Default setting NULL. predictionData data predictions made. Column names must correspond data initialModel. predictionData specified (NULL), range data used create smooth terms. splineParams List object containing information fitting splines covariates varlist. specified (NULL) object created returned. See makesplineParams details. datain Data used fit initial Model. removal (Default: FALSE). Logical stating whether selection procedure done choose smooth, linear removal covariates.  FALSE covariates returned smooth. TRUE cross-validation used make model selection choices. folds specified column dataset called foldid. panelid Vector denoting panel identifier data point (robust standard errors calculated). Defaults data order index given. suppress.printout (Default: FALSE. Logical stating whether show analysis printout. logfile (Default: FALSE). Logical stating whether store log file analysis printout.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/runSALSA1D.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Running SALSA for continuous one-dimensional covariates. — runSALSA1D","text":"list object returned containing 4 elements: bestModel model object class gam.MRSea best model fitted modelFits1D list object element new term fitted model.  first element model fitted knot mean covariates (startmodel) varlist.  Within first element, current fit formula start model. second element result SALSA first term varlist.  Within element: term: term interest kept: Statement whether term kept model (yes- initial knots, yes - new knots, yes -linear ) basemodelformula: resulting model formula.  kept=yes kept=linear term interest included model otherwise removed. knotSelected: knots chosen term interest (NA term removed linear) baseModelFits: fit statistics resulting formula modelfits: fit statistics model term included (resulting formula kept=yes) continues till covariates varlist SALSA. fitstat final fit statistic bestModel.  type statistic specified salsa1dlist. keptvarlist covariates varlist retained model","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/runSALSA1D.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Running SALSA for continuous one-dimensional covariates. — runSALSA1D","text":"must columns called response (response variable) foldid (cross-validation calculation) data used initial model fitted. data proportion, two columns called successess failures. object salsa1dlist contains parameters runSALSA1D function. fitnessMeasure. criterion selecting `best' model.  Available options: AIC, AIC_c, BIC, QIC_b, cv.gamMRSea (use cv.opts salsa1dlist specify seed, folds, cost function (Defaults: cv.opts=list(cv.gamMRSea.seed=357, K=10, cost=function(y, yhat) mean((y - yhat)^2))). minKnots_1d. Minimum number knots tried. maxKnots_1d. Maximum number knots tried. startKnots_1d. Starting number knots (spaced quantiles data). degree. degree B-spline. need specified splineParams parameter runSALSA1D. maxIterations.exchange/improve steps terminate maxIterations still running. gaps. minimum gap knots (unit measurement explanatory), usually set zero. splines. Specify spline basis term.  Choose one \"bs\" (B-spline), \"cc\" (cyclic-cubic) \"ns\" (natural spline). minKnots_1d, maxKnots_1d, startKnots_1d gaps vectors length varlist.  enables differing values parameters covariate. initial model contains factor level covariates covariates interest specified varlist argument runSALSA1D Note: algorithm may remove variables varlist variables factorlist.  better model knot mean, output include covariate knot mean.  best model given smooth term tested model term linear removed. Cross-Validation used selection process.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/runSALSA1D.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Running SALSA for continuous one-dimensional covariates. — runSALSA1D","text":"Walker, C.; M. Mackenzie, C. Donovan M. O'Sullivan. SALSA - Spatially Adaptive Local Smoothing Algorithm. Journal Statistical Computation Simulation, 81(2):179-191, 2010","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/runSALSA1D.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Running SALSA for continuous one-dimensional covariates. — runSALSA1D","text":"Lindesay Scott-Hayward, University St Andrews; Cameron Walker, Department Engineering Science, University Auckland.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/runSALSA1D.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Running SALSA for continuous one-dimensional covariates. — runSALSA1D","text":"","code":"# load data data(ns.data.re) # load prediction data data(ns.predict.data.re)  varlist=c('DayOfMonth')   # set initial model without the spline terms in there  # (so all other non-spline terms) ns.data.re$response<- ns.data.re$birds initialModel<- glm(response ~ 1 + offset(log(area)),                      family='quasipoisson',data=ns.data.re)  #set some input info for SALSA salsa1dlist<-list(fitnessMeasure = 'QBIC',                    minKnots_1d=c(1),                    maxKnots_1d = c(3),                    startKnots_1d = c(1),                    degree=c(2),                   gaps=c(0))  # run SALSA salsa1dOutput<-runSALSA1D(initialModel = initialModel,                          salsa1dlist = salsa1dlist,                          varlist = varlist,                          predictionData = ns.predict.data.re,                          datain = ns.data.re) #> Loading required package: MuMIn #> [1] \"initialDispersion 20.4447417001531\" #> [1] \"Initialising...\" #> Initial fit =  9591.768 13  #> [1] \"initialisation complete...\" #> [1] \"^^^^^^^^^^^Initial^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\" #> [1] 9591.768 #> [1] \"Exchanging...\" #> [1] \"Locating maximum residual......\" #> [1] \"Maximum residual found...\" #> [1] \"Moving knot...\" #> [1] \"Knot moved...\" #> [1] \"Exchanging done...\" #> [1] \"Improving...\" #> [1] \"Shifting up...\" #> [1] \"Up done...\" #> [1] \"Shifting up...\" #> [1] \"Up done...\" #> [1] \"Shifting down...\" #> [1] \"Down done...\" #> [1] \"Improving complete...\" #> [1] \"^^^^^^^^^^^Improve^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\" #> [1] \"Exchanging...\" #> [1] \"Locating maximum residual......\" #> [1] \"Maximum residual found...\" #> [1] \"Moving knot...\" #> [1] \"Knot moved...\" #> [1] \"Exchanging done...\" #> [1] \"Improving...\" #> [1] \"Shifting up...\" #> [1] \"Up done...\" #> [1] \"Shifting down...\" #> [1] \"Down done...\" #> [1] \"Improving complete...\" #> [1] \"And we're done...\""},{"path":"http://lindesaysh.github.io/MRSea/reference/runSALSA2D.html","id":null,"dir":"Reference","previous_headings":"","what":"Running SALSA for a spatial smooth with a CReSS basis — runSALSA2D","title":"Running SALSA for a spatial smooth with a CReSS basis — runSALSA2D","text":"function fits spatially adaptive two dimensional smooth spatial coordinates knot number location selected SALSA.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/runSALSA2D.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Running SALSA for a spatial smooth with a CReSS basis — runSALSA2D","text":"","code":"runSALSA2D(   model,   salsa2dlist,   d2k,   k2k,   splineParams = NULL,   chooserad = FALSE,   panels = NULL,   suppress.printout = FALSE,   tol = 0,   plot = FALSE,   basis = \"gaussian\",   initialise = TRUE,   initialKnots = NULL,   initialKnPos = NULL,   logfile = FALSE )"},{"path":"http://lindesaysh.github.io/MRSea/reference/runSALSA2D.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Running SALSA for a spatial smooth with a CReSS basis — runSALSA2D","text":"model model spatial smooth salsa2dlist Vector objects required runSALSA2D: fitnessMeasure, knotgrid, startKnots, minKnots, codemaxKnots, r_seq, gap, interactionTerm. d2k (n x k) Matrix distances data points model valid knot locations specified knotgrid k2k (k x k) Matrix distances valid knot locations specified knotgrid splineParams (default =NULL) List object containng output runSALSA (e.g. knot locations continuous covariates) chooserad logical flag.  FALSE (default) range parameter basis chosen knot location number. TRUE, range assessed every iteration knot move/add/drop. panels Vector denoting panel identifier data point (robust standard errors calculated). Defaults data order index given. suppress.printout (Default: FALSE. Logical stating whether show analysis printout. tol Numeric stating tolerance fitness Measure. e.g. tol=2 AIC allow changes made AIC score improves 2 units. plot logical stating whether print chosen knot locations iteration. default = FALSE. basis One 'gaussian' (default) 'exponential'. Specifys kind local radial function use (LRF.g LRF.e) initialise (Defauls: FALSE). Logical stating whether allow runSALSA2D function find starting knot locations.  FALSE, one initialKnots initialKnPos must specified. initialKnots c x 2 dataframe matrix specifying coordinates starting locations knots. c number initial knots (match specified SALSA2dlist) initialKnPos vector length c denoting rows knotgrid use initial starting locations knots. logfile (Default: FALSE). Logical stating whether store log file analysis printout.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/runSALSA2D.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Running SALSA for a spatial smooth with a CReSS basis — runSALSA2D","text":"function returns best model bestModel fitness statistic model fitStat spline paramater object returned part model object now contains list first element (previously reserved spatial component).  list contains objects required SALSA2D fitting process: knotDist Matrix knot knot distances (k x k).  May Euclidean geodesic distances. Must square dimensions nrows(na.omit(knotgrid)).  Created using makeDists. radii Sequence range parameters CReSS basis local (small) global (large).  Determines range influence knot. dist Matrix distances data locations knot locations (n x k). May Euclidean geodesic distances. Euclidean distances created using makeDists. datacoords Coordinates data locations response Vector response data modelling process knotgrid Grid legal knot locations. minKnots Minimum number knots tried. maxKnots Maximum number knots tried. gap Minimum gap knots (unit measurement datacoords) radiusIndices Vector length startKnots identifying radii (splineParams[[1]]$radii) used knot location (splineParams[[1]]$knotPos) knotPos Index knot locations. index identifies knots (.e. rows) knotgrid selected SALSA","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/runSALSA2D.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Running SALSA for a spatial smooth with a CReSS basis — runSALSA2D","text":"object salsa2dlist contains parameters runSALSA2D function. fitnessMeasure. criterion selecting `best' model.  Available options: AIC, AIC_c, BIC, QIC_b, cv.gamMRSea (use cv.opts salsa2dlist specify seed, folds, cost function (Defaults: cv.opts=list(cv.gamMRSea.seed=357, K=10, cost=function(y, yhat) mean((y - yhat)^2))) knotgrid. set 'k' knot locations (k x 2 matrix dataframe coordinates).  May made using getKnotgrid. startknots. Starting number knots (initialised spaced filled locations). minKnots. Minimum number knots tried. maxKnots. Maximum number knots tried. gap. minimum gap knots (unit measurement coordinates). interactionTerm. Specifies term baseModel spatial smooth interact .  NULL interaction term fitted. cv.opts Used fitnessMeasure = cv.gamMRSea.  See specification.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/runSALSA2D.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Running SALSA for a spatial smooth with a CReSS basis — runSALSA2D","text":"Scott-Hayward, L.; M. Mackenzie, C.Donovan, C.Walker E.Ashe.  Complex Region Spatial Smoother (CReSS). Journal computational Graphical Statistics. 2013. doi: 10.1080/10618600.2012.762920 Scott-Hayward, L.. Novel Methods species distribution mapping including spatial models complex regions: Chapter 5 SALSA2D methods. PhD Thesis, University St Andrews. 2013","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/runSALSA2D.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Running SALSA for a spatial smooth with a CReSS basis — runSALSA2D","text":"Lindesay Scott-Hayward (University St Andrews), Cameron Walker (University Auckland)","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/runSALSA2D.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Running SALSA for a spatial smooth with a CReSS basis — runSALSA2D","text":"","code":"# load data data(ns.data.re) # load prediction data data(ns.predict.data.re) # load knot grid data data(knotgrid.ns)  #set some input info for SALSA ns.data.re$response<- ns.data.re$birds  # make distance matrices for datatoknots and knottoknots distMats<-makeDists(cbind(ns.data.re$x.pos, ns.data.re$y.pos), na.omit(knotgrid.ns))  # set initial model without the spatial term # (so all other non-spline terms) initialModel<- glm(response ~ 1 + offset(log(area)),                    family='quasipoisson', data=ns.data.re)  # make parameter set for running salsa2d # I have chosen a gap parameter of 1000 (in metres) to speed up the process. # Note that this means there cannot be two knots within 1000m of each other.  salsa2dlist<-list(fitnessMeasure = 'QICb',                    knotgrid = na.omit(knotgrid.ns),                   startKnots = 6,                   minKnots = 2,                    maxKnots = 20,                    gap=1000)  salsa2dOutput<-runSALSA2D(initialModel,                            salsa2dlist,                            d2k=distMats$dataDist,                           k2k=distMats$knotDist) #> [1] \"initialDispersion 20.4447417001531\" #> [1] \"******************************************************************************\" #> [1] \"Initialising...\" #> [1] \"******************************************************************************\" #> [1] \"Space-filling knots....\" #> [1] \"Initialising model...\" #> [1] \"Initial model fitted...\" #> [1] \"Fitting Initial Radii\" #> [1] \"initialising complete\" #> [1] \"******************************************************************************\" #> [1] \"Exchanging...\" #> [1] \"******************************************************************************\" #> [1] \"******************************************************************************\" #> [1] \"Moving knot...\" #> [1] \"******************************************************************************\" #> [1] \"Adding knot...\" #> [1] \"knot added ***********************************\" #> [1] \"******************************************************************************\" #> [1] \"Moving knot...\" #> [1] \"******************************************************************************\" #> [1] \"move ***********************************\" #> [1] \"move ***********************************\" #> [1] \"Adding knot...\" #> [1] \"******************************************************************************\" #> [1] \"Moving knot...\" #> [1] \"******************************************************************************\" #> [1] \"Adding knot...\" #> [1] \"Improving...\" #> [1] \"******************************************************************************\" #> [1] \"improve *************************************\" #> [1] \"improve *************************************\" #> [1] \"improve *************************************\" #> [1] \"improve *************************************\" #> [1] \"improve *************************************\" #> [1] \"improve *************************************\" #> [1] \"improve *************************************\" #> [1] \"improve *************************************\" #> [1] \"improve *************************************\" #> [1] \"improve *************************************\" #> [1] \"improve *************************************\" #> [1] \"improve *************************************\" #> [1] \"improve *************************************\" #> [1] \"improve *************************************\" #> [1] \"improve *************************************\" #> [1] \"improve *************************************\" #> [1] \"improve *************************************\" #> [1] \"improve *************************************\" #> [1] \"improve *************************************\" #> [1] \"improve *************************************\" #> [1] \"improve *************************************\" #> [1] \"improve *************************************\" #> [1] \"improve *************************************\" #> [1] \"******************************************************************************\" #> [1] \"Simplifying model...\" #> [1] \"******************************************************************************\" #> [1] \"e\" #> [1] \"******************************************************************************\" #> [1] \"Exchanging...\" #> [1] \"******************************************************************************\" #> [1] \"******************************************************************************\" #> [1] \"Moving knot...\" #> [1] \"******************************************************************************\" #> [1] \"Adding knot...\" #> [1] \"Improving...\" #> [1] \"******************************************************************************\" #> [1] \"******************************************************************************\" #> [1] \"Simplifying model...\" #> [1] \"******************************************************************************\" #> [1] \"e\" #> [1] \"And we're done...\" #> [1] \"******************************************************************************\" #> [1] \"Initialising...\" #> [1] \"******************************************************************************\" #> [1] \"Initialising model...\" #> [1] \"Initial model fitted...\" #> [1] \"Fitting Initial Radii\" #> [1] \"initialising complete\""},{"path":"http://lindesaysh.github.io/MRSea/reference/runsTest.html","id":null,"dir":"Reference","previous_headings":"","what":"Runs Test for Randomness — runsTest","title":"Runs Test for Randomness — runsTest","text":"function performs runs test randomness. Users can choose whether plot correlation graph , whether test two-sided, negative positive correlation. NAs data omitted. empirical distribution may used distribution test statistic null hypothesis independence.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/runsTest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Runs Test for Randomness — runsTest","text":"","code":"runsTest(   y,   plot.it = FALSE,   alternative = c(\"two.sided\", \"positive.correlated\", \"negative.correlated\"),   emp.distribution = NULL )"},{"path":"http://lindesaysh.github.io/MRSea/reference/runsTest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Runs Test for Randomness — runsTest","text":"y numeric vector data values plot.logical flag.  'TRUE' graph plotted. 'FALSE', plotted. alternative character string specifying alternative hypothesis, must one \"two.sided\" (default), \"negative.correlated\" \"positive.correlated\" emp.distribution vector containing empirical distribution test statistics nyll hypothesis. Generated using getEmpDistribution.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/runsTest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Runs Test for Randomness — runsTest","text":"list following components. statistic\tvalue standardized Runs statistic. p.value p-value test. data.name character string giving names data. alternative character string describing alternative hypothesis.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/runsTest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Runs Test for Randomness — runsTest","text":"graph observations less sample median represented letter \"\" red color, observations greater equal sample median represented letter \"B\" blue color.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/runsTest.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Runs Test for Randomness — runsTest","text":"Mendenhall, W (1982), Statistics Management Economics, 4th Ed., 801-807, Duxbury Press, Boston. J.L. Gastwirth; Y.R. Gel, W. L. Hui, V. Lyubchich, W. Miao K. Noguchi (2015). lawstat: Tools Biostatistics, Public Policy, Law. R package version 3.0","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/runsTest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Runs Test for Randomness — runsTest","text":"","code":"data(ns.data.re)  model<-gamMRSea(birds ~ observationhour + as.factor(floodebb) + as.factor(impact),                 family='poisson', data=ns.data.re)  runsTest(residuals(model)) #>  #> \tRuns Test - Two sided #>  #> data:  residuals(model) #> Standardized Runs Statistic = -69.695, p-value < 2.2e-16 #>   ## Empirical distribution:  simData<-generateNoise(n=500, response=fitted(model), family='poisson')  empdist<-getEmpDistribution(500, simData, model, data=ns.data.re, plot=FALSE,                              returnDist=TRUE,dots=FALSE) runsTest(residuals(model), emp.distribution=empdist) #>  #> \tRuns Test - Two sided; Empirical Distribution #>  #> data:  residuals(model) #> Standardized Runs Statistic = -69.695, p-value < 2.2e-16 #>"},{"path":"http://lindesaysh.github.io/MRSea/reference/rzibinom.html","id":null,"dir":"Reference","previous_headings":"","what":"rzibinom function from the VGAM package — rzibinom","title":"rzibinom function from the VGAM package — rzibinom","text":"rzibinom function VGAM package","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/rzibinom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rzibinom function from the VGAM package — rzibinom","text":"","code":"rzibinom(n, size, prob, pstr0 = 0)"},{"path":"http://lindesaysh.github.io/MRSea/reference/rzibinom.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"rzibinom function from the VGAM package — rzibinom","text":"VGAM package","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/selectFctrKnots.html","id":null,"dir":"Reference","previous_headings":"","what":"Select candidate knots for multi-level factor interaction — selectFctrKnots","title":"Select candidate knots for multi-level factor interaction — selectFctrKnots","text":"function finds number starting knot locations different factor levels used creating interaction term.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/selectFctrKnots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select candidate knots for multi-level factor interaction — selectFctrKnots","text":"","code":"selectFctrKnots(data, nk, s.eed = 1)"},{"path":"http://lindesaysh.github.io/MRSea/reference/selectFctrKnots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select candidate knots for multi-level factor interaction — selectFctrKnots","text":"data Coordinates data locations columns 1 2 associated factor level third. nk number knots selected factor level.  may single number (factor levels) vector numbers allow different number knots selected factor level. s.eed default = 1. Set seed selection ensure reproducibility.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/selectFctrKnots.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select candidate knots for multi-level factor interaction — selectFctrKnots","text":"function returns data frame three columns; x y locations candidate knots associated factor level.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/selectFctrKnots.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select candidate knots for multi-level factor interaction — selectFctrKnots","text":"","code":"# load data data(nysted.analysisdata)  myknots <- selectFctrKnots(nysted.analysisdata[,c(\"x.pos\", \"y.pos\", \"impact\")],                             nk=150)"},{"path":"http://lindesaysh.github.io/MRSea/reference/selectFctrStartk.html","id":null,"dir":"Reference","previous_headings":"","what":"Select starting knots for multi-level factor interaction — selectFctrStartk","title":"Select starting knots for multi-level factor interaction — selectFctrStartk","text":"function finds number starting knot locations different factor levels used creating interaction term.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/selectFctrStartk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select starting knots for multi-level factor interaction — selectFctrStartk","text":"","code":"selectFctrStartk(knots, nk, s.eed = 1)"},{"path":"http://lindesaysh.github.io/MRSea/reference/selectFctrStartk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select starting knots for multi-level factor interaction — selectFctrStartk","text":"knots Coordinates knot locations columns 1 2 associated factor level third. nk number knots selected factor level.  may single number (factor levels) vector numbers allow different number knots selected factor level. s.eed default = 1. Set seed selection ensure reproducibility.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/selectFctrStartk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select starting knots for multi-level factor interaction — selectFctrStartk","text":"function returns row number knots parameter selected knots.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/selectFctrStartk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select starting knots for multi-level factor interaction — selectFctrStartk","text":"","code":"#' # load data data(nysted.analysisdata)  myknots <- selectFctrKnots(nysted.analysisdata[,c('x.pos', 'y.pos', 'impact')],                             nk=150) startknotlocs <- selectFctrStartk(myknots, nk=5, s.eed = 4)"},{"path":"http://lindesaysh.github.io/MRSea/reference/summary.gamMRSea.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarising model fits from models fitted using the MRSea package. — summary.gamMRSea","title":"Summarising model fits from models fitted using the MRSea package. — summary.gamMRSea","text":"(object, dispersion = NULL, varshortnames=NULL, ...)","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/summary.gamMRSea.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarising model fits from models fitted using the MRSea package. — summary.gamMRSea","text":"","code":"# S3 method for gamMRSea summary(object, dispersion = NULL, digits = 7, varshortnames = NULL, ...)"},{"path":"http://lindesaysh.github.io/MRSea/reference/summary.gamMRSea.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarising model fits from models fitted using the MRSea package. — summary.gamMRSea","text":"object object class \"gamMRSea\", usually, result call MRSea package. dispersion dispersion parameter family used. Either single numerical value NULL (default), inferred object (see 'Details'). digits number significant digits use printing. varshortnames vector stating short versions covariate names required. ... arguments passed methods.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/summary.gamMRSea.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarising model fits from models fitted using the MRSea package. — summary.gamMRSea","text":"print.summary.gamMRSea tries smart formatting coefficients, standard errors, etc. additionally gives 'significance stars' signif.stars TRUE. coefficients component result gives estimated coefficients estimated standard errors (raw robust), together ratio (robust s.e.). third column gives robust standard errors calculated using sandwich estimator.  correlation present, second third columns sandwich estimator used data points independent. fourth column labelled Wald gives Wald test statistic, based robust standard errors. fifth column gives two-tailed p-value corresponding Wald test (). Aliased coefficients omitted returned object restored print method. Correlations printed two decimal places (symbolically): see actual correlations print summary(object)$correlation directly. summary.gamMRSea returns object class \"summary.gamMRSea\", list components call\tcomponent object. family\tcomponent object. deviance\tcomponent object. contrasts component object. df.residual\tcomponent object. null.deviance\tcomponent object. df.null\tcomponent object. deviance.resid\tdeviance residuals: see residuals.glm. coefficients\tmatrix coefficients, standard errors, z-values p-values. Aliased coefficients omitted. aliased\tnamed logical vector showing original coefficients aliased. dispersion\teither supplied argument inferred/estimated dispersion latter NULL. df\t3-vector rank model number residual degrees freedom, plus number coefficients (including aliased ones). cov.unscaled\tunscaled (dispersion = 1) estimated covariance matrix estimated coefficients. cov.scaled\tditto, scaled dispersion. correlation\t(correlation true.) estimated correlations estimated coefficients. symbolic.cor\t(correlation true.) value argument symbolic.cor.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/summary.gamMRSea.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Summarising model fits from models fitted using the MRSea package. — summary.gamMRSea","text":"Code adapted summary.glm","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/summary.gamMRSea.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summarising model fits from models fitted using the MRSea package. — summary.gamMRSea","text":"Lindesay Scott-Hayward, Univeristy St Andrews.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/summary.gamMRSea.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarising model fits from models fitted using the MRSea package. — summary.gamMRSea","text":"","code":"# load data data(ns.data.re) ns.data.re$foldid<-getCVids(ns.data.re, folds=5)   model<-gamMRSea(birds ~ observationhour + as.factor(floodebb) + as.factor(impact),                 family='poisson', data=ns.data.re) summary(model) #>  #> Call: #> gamMRSea(formula = birds ~ observationhour + as.factor(floodebb) +  #>     as.factor(impact), family = \"poisson\", data = ns.data.re) #>  #> Deviance Residuals:  #>    Min      1Q  Median      3Q     Max   #> -2.587  -1.810  -1.573  -1.293  35.514   #>  #> Coefficients: #>                           Estimate Std. Error Robust S.E. z value Pr(>|z|)     #> (Intercept)               1.444206   0.020505    0.020505  70.432  < 2e-16 *** #> observationhour          -0.095957   0.001573    0.001573 -61.016  < 2e-16 *** #> as.factor(floodebb)FLOOD -0.037545   0.012366    0.012366  -3.036   0.0024 **  #> as.factor(floodebb)SLACK  0.243291   0.012140    0.012140  20.040  < 2e-16 *** #> as.factor(impact)1       -0.042971   0.009884    0.009884  -4.348 1.38e-05 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> (Dispersion parameter for poisson family taken to be 1) #>  #>     Null deviance: 186644  on 27797  degrees of freedom #> Residual deviance: 182142  on 27793  degrees of freedom #> AIC:  200064 #>  #> Max Panel Size = 1 (independence assumed); Number of panels = 27798 #> Number of Fisher Scoring iterations: 7 #>"},{"path":"http://lindesaysh.github.io/MRSea/reference/summaryshortnames.html","id":null,"dir":"Reference","previous_headings":"","what":"Shortening names in summary object — summaryshortnames","title":"Shortening names in summary object — summaryshortnames","text":"Shortening names summary object","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/summaryshortnames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shortening names in summary object — summaryshortnames","text":"","code":"summaryshortnames(object, varshortnames)"},{"path":"http://lindesaysh.github.io/MRSea/reference/summaryshortnames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shortening names in summary object — summaryshortnames","text":"object model object varshortnames list short variable names","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/thinModels.html","id":null,"dir":"Reference","previous_headings":"","what":"function to thin the number of models — thinModels","title":"function to thin the number of models — thinModels","text":"function thin number models","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/thinModels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"function to thin the number of models — thinModels","text":"","code":"thinModels(models)"},{"path":"http://lindesaysh.github.io/MRSea/reference/thinModels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"function to thin the number of models — thinModels","text":"models list models fitted","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/thinModels.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"function to thin the number of models — thinModels","text":"Cameron Walker, Department Engineering Science, University Auckland.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/timeInfluenceCheck.html","id":null,"dir":"Reference","previous_headings":"","what":"Timing check to see how long it will take to run runInfluence. — timeInfluenceCheck","title":"Timing check to see how long it will take to run runInfluence. — timeInfluenceCheck","text":"Timing check see long take run runInfluence.","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/timeInfluenceCheck.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Timing check to see how long it will take to run runInfluence. — timeInfluenceCheck","text":"","code":"timeInfluenceCheck(model, id)"},{"path":"http://lindesaysh.github.io/MRSea/reference/timeInfluenceCheck.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Timing check to see how long it will take to run runInfluence. — timeInfluenceCheck","text":"model Fitted model object (glm, gamMRSea gam) id blocking structure","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/timeInfluenceCheck.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Timing check to see how long it will take to run runInfluence. — timeInfluenceCheck","text":"","code":"# load data data(ns.data.re)  ns.data.re$blockid<-paste(ns.data.re$GridCode, ns.data.re$Year, ns.data.re$MonthOfYear,                       ns.data.re$DayOfMonth, sep='') ns.data.re$blockid<-as.factor(ns.data.re$blockid) model<-gamMRSea(birds ~ observationhour + as.factor(floodebb) + as.factor(impact),                 family='poisson', data=ns.data.re)  timeInfluenceCheck(model, ns.data.re$blockid) #> [1] \"Calculating the influence measures will take approximately 18 minutes\""},{"path":"http://lindesaysh.github.io/MRSea/reference/which.bin.html","id":null,"dir":"Reference","previous_headings":"","what":"Determining the distance bin — which.bin","title":"Determining the distance bin — which.bin","text":"vector perpendicular (radial) distances, function determines distance bin belongs (given input cut points) adds beginning end points respective distance bins new colunns dis.data called \"distbegin\" \"distend\".","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/which.bin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determining the distance bin — which.bin","text":"","code":"which.bin(dis.data, cutpoints)"},{"path":"http://lindesaysh.github.io/MRSea/reference/which.bin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determining the distance bin — which.bin","text":"dis.data data frame distance data perpendicular (radial) distances recorded distance column cutpoints vector cut points intervals (function set deal left-truncation)","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/which.bin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determining the distance bin — which.bin","text":"dis.data data frame columns \"distbegin\" \"distend\" added giving beginning end cutpoints bin respective dis.data$distance belongs .","code":""},{"path":"http://lindesaysh.github.io/MRSea/reference/which.bin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determining the distance bin — which.bin","text":"value dis.data$distance matches cut point cutpoints exactly,  value dis.data.re$distance attributed bin closer line/point unless value dis.data.re$distance 0. E.g. cutpoints=c(0,1,2,3), dis.data$distance=2 attributed interval 2 (3).","code":""},{"path":[]},{"path":"http://lindesaysh.github.io/MRSea/news/index.html","id":"notes-1-6","dir":"Changelog","previous_headings":"","what":"Notes","title":"MRSea 1.6","text":"SALSA1D: addition parameter (logfile) remove dependence log file sink suppress.printout = TRUE. Default set FALSE suppress.printout = TRUE log file produced unless logfile = TRUE seed added initialisation candidate knotsites. selection knotsites stochastic 800 unique values variable. seed set allows repeatability analyses. SALSA2D: addition parameter (logfile) remove dependence log file sink suppress.printout = TRUE. Default set FALSE suppress.printout = TRUE log file produced unless logfile = TRUE Vignettes: updates images : plotmeanVar: labelling Gaussian Gamma alternative lines changed “Poisson” “1:1 line”. warning suppression added .boostrap.cress.robust. already try catch “svd” warnings alternative used necessary see warnings.","code":""},{"path":"http://lindesaysh.github.io/MRSea/news/index.html","id":"bug-fixes-1-6","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"MRSea 1.6","text":"SALSA 1D: SALSA 2D: : plotMeanVar line labelling wrong way round Gaussian case. remedied. cv.gamMRSea occasional error relating finding CV0. Code edited issue CV calculation, inf returned rather error.","code":""},{"path":[]},{"path":"http://lindesaysh.github.io/MRSea/news/index.html","id":"notes-1-5","dir":"Changelog","previous_headings":"","what":"Notes","title":"MRSea 1.5","text":"SALSA1D: update function allow inclusion variable Date class. SALSA2D: getRadiiChoices getRadiiChoices.vario functions superseded merged one function: getRadiiSequence(). functions added help create factor based knot grid (selectFctrKnots) get associated infinity-block distance matrix (updates makeDists function). also function select space-filled starting knots factor level (selectFctrStartk) Vignettes: Introduction MRSea: added section using make.gamMRSea Interactions: edited use new functions factor based knots. Renewables Case Study: vignette re-instated completely updated new functions. : seed used CV score calculation appended attribute output cv.gamMRSea. Additionally also optional input parameter. seed used generating CV folds (getCVids) now appended attribute fo returned vector folds. method shortening coefficient names summary output updated efficient work situations.","code":""},{"path":"http://lindesaysh.github.io/MRSea/news/index.html","id":"bug-fixes-1-5","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"MRSea 1.5","text":"SALSA 1D: SALSA 2D: dispersion parameter estimate using getDisperson function incorrectly specified 1 Tweedie distribution. affected dropping “bad” knots initialise step resulting knots dropped . affect knots subsequently added exchange step. correct calculation now included getDispersion function. using initialise = FALSE specifying initial knot locations via initialKnPos code added snap initial locations nearest candidate knot locations knot grid. Previously assumed initial locations subset candidate set. Now locations may used. using odd number radii chooseradii = FALSE may sometimes mismatch output SALSA2D output given runSALSA2D. default even number mostly issue. : using Tweedie distribution, power parameter stored model call issues arise using stored model object parameter longer available. parameter stored within model updates made runSALSA1D runSALSA2D ensure variance power variance link specified numbers model call. CV score unchanged changing K. occurred owing folds stored within model object. K specified cv.gamMRSea different model object new folds now created warning message. folds model object remain unchanged. Note now error message number folds specified exceeds number unique panels. bug variance calculation gamma distribution plotMeanVar function. Additionally, legend mismatched data. bug runInfluence timeInfluenceCheck. worked fine models without 2D smooth specification error caused issues models one. Fixed working now.","code":""},{"path":[]},{"path":"http://lindesaysh.github.io/MRSea/news/index.html","id":"notes-1-4","dir":"Changelog","previous_headings":"","what":"Notes","title":"MRSea 1.4","text":"SALSA1D: Tweedie distribution associated information criterion added (AICtweedie BICtweedie) SALSA2D: Tweedie distribution associated information criterion added (AICtweedie BICtweedie) Vignettes: Added vignette using Tweedie distribution gamMRSea models Added vignette model diagnostics general modelling information MRSea specific functions Added vignette user specification range radii choices using variogram Added vignette brief introduction distance sampling using mrds package Added introduction MRSea vignette. case study vignette removed updating return soon. : Mean variance plot function added. allows user assess suitability mean-variance distributional assumption number distributions (Gaussian, Poisson, Quasi-Poisson, Gamma Tweedie) Minor edits diagnostic functions (ACF, influence measures, diagnostic plots, cumulative residuals)","code":""},{"path":"http://lindesaysh.github.io/MRSea/news/index.html","id":"bug-fixes-1-4","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"MRSea 1.4","text":"SALSA 1D: SALSA 2D: : ensure data data.frame (tibble) create.bootstrap.data plotCumRes functions minor bug fixes diagnostic functions spline parameter object present model","code":""},{"path":[]},{"path":"http://lindesaysh.github.io/MRSea/news/index.html","id":"notes-1-3-3","dir":"Changelog","previous_headings":"","what":"Notes","title":"MRSea 1.3.3","text":"SALSA1D: Update documentation runSALSA1D include gap parameter splines parameter. Default settings gap=0 splines=\"bs\". Change specification cyclic smooths (parameter now specified salsa1dlist) include additional option natural cubic spline. SALSA2D: : Website created Update vignettes included within package additional web tutorials created. Still construction included now basic usage vignette information different splines. Add option user specified label plots runDiagnostics function","code":""},{"path":"http://lindesaysh.github.io/MRSea/news/index.html","id":"bug-fixes-1-3-3","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"MRSea 1.3.3","text":"SALSA 1D Issue using Q*IC update function multiple 1D covariates. Problem resolved. SALSA 2D Fix issue initialise drop step initial model NA coefficients","code":""},{"path":[]},{"path":"http://lindesaysh.github.io/MRSea/news/index.html","id":"notes-1-3-2","dir":"Changelog","previous_headings":"","what":"Notes","title":"MRSea 1.3.2","text":"Gap check added initialise step ensure gap parameter obeyed initialisation Remove storage models object. Hang early days MRSea taking workspace memory. Update “Interaction” vignette make clearer two options ways include one. Added option allow user specify sequence radii. Use adding r_seq = ... salsa2dlist","code":""},{"path":"http://lindesaysh.github.io/MRSea/news/index.html","id":"bug-fixes-1-3-2","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"MRSea 1.3.2","text":"CV fold bug fixed SALSA1D. correlated blocks specified, maintained base model use later algorithm. reinstate require(parallel) .bootstrap.cress.robust","code":""},{"path":[]},{"path":"http://lindesaysh.github.io/MRSea/news/index.html","id":"notes-1-3-1","dir":"Changelog","previous_headings":"","what":"Notes","title":"MRSea 1.3.1","text":"Package compiled using version R >=4.0 Removal various now obsolete functions (predict.cress, getCVcress, getPvalues). superceded (predict.gamMRSea, cv.gamMRSea anova.gamMRSea) Updates vignettes","code":""},{"path":"http://lindesaysh.github.io/MRSea/news/index.html","id":"bug-fixes-1-3-1","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"MRSea 1.3.1","text":"Various fixes comply updated version R","code":""},{"path":[]},{"path":"http://lindesaysh.github.io/MRSea/news/index.html","id":"notes-1-02","dir":"Changelog","previous_headings":"","what":"Notes","title":"MRSea 1.02","text":"option added runACF/plotacf functions specify maximum lag plotted (maxlag=NULL). helps may one long panel wish see detail smaller ones. vignette updated drop step added initialise 2D step. initial starting knots give model converged knots dropped convergence achieved. algorithm proceeds normal (looping exchange, improve, drop).","code":""},{"path":"http://lindesaysh.github.io/MRSea/news/index.html","id":"bug-fixes-1-02","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"MRSea 1.02","text":"Fix exchange step - error finding largest residual Fix issue clsandcov function occurred old factor levels remained panel variable (droplevels used counter ) Fix issue plotCumRes runInfluence functions. work gamMRSea type model now.","code":""},{"path":[]},{"path":"http://lindesaysh.github.io/MRSea/news/index.html","id":"notes-1-01","dir":"Changelog","previous_headings":"","what":"Notes","title":"MRSea 1.01","text":"Addition interaction term choice knot locations level interaction different. Requires specialist set knot grid distance matrix. provided vignette shortly. user may also now specifiy knots knotgrid like use initialising. See help file runSALSA2D .","code":""},{"path":"http://lindesaysh.github.io/MRSea/news/index.html","id":"bug-fixes-1-01","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"MRSea 1.01","text":"Fixed major bug improve step - issue finding nearest neighbours given knot.","code":""},{"path":[]},{"path":"http://lindesaysh.github.io/MRSea/news/index.html","id":"notes-1-0","dir":"Changelog","previous_headings":"","what":"Notes","title":"MRSea 1.0-beta","text":"Addition GEODESIC distance calculation using makeDists function. supply polygon defining exclusion area, geodesic distances calculated. Addition cross-validation (cv.gamMRSea) fitness measure Addition option gaussian (default) exponential basis function (see runSALSA2D) Update runPartialPlots function allow inclusion () intercept uncertainty.","code":""},{"path":"http://lindesaysh.github.io/MRSea/news/index.html","id":"bug-fixes-1-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"MRSea 1.0-beta","text":"Fixed partial plot bug - issue factor covariates characters. class now allowed.","code":""},{"path":[]},{"path":"http://lindesaysh.github.io/MRSea/news/index.html","id":"notes-0-99","dir":"Changelog","previous_headings":"","what":"Notes","title":"MRSea 0.99-beta","text":"Major overhaul package include new model class gamMRSea. Update summary function allow robust standard errors presented used hypothesis testing knotgrid 2D smooth longer required regular grid calculation basis radii absorbed runSALSA2D function. predict.gamMRSea function call updated names predict.glm new cv.gamMRSea function. cv.glm function boot library edited allow use gamMRSea models.","code":""},{"path":"http://lindesaysh.github.io/MRSea/news/index.html","id":"bug-fixes-0-99","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"MRSea 0.99-beta","text":"Fixed bug summary anova functions; term names now correct. tol option runSALSA2D re-instated","code":""}]
