{"frames":[{"func":"runSALSA2D(model = initialModel, salsa2dlist = salsa2dlist, d2k = d2k, \n    k2k = k2k, suppress.printout = TRUE)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"return.reg.spline.fit.2d(splineParams, startKnots = salsa2dlist$startKnots, \n    winHalfWidth, fitnessMeasure = salsa2dlist$fitnessMeasure, \n    maxIterations = maxIterations, tol = tol, baseModel = baseModel, \n    radiusIndices = NULL, initialise = initialise, initialKnots = initialKnots,  ...","file":"C:/Users/lindesay/Documents/GitHub/MRSea/R/runSALSA2D.R","line_number":244,"end_line_number":244,"character_number":3,"end_character_number":407},{"func":"exchange.step_2d(gap, knotDist, radii, dists, explData, response, \n    knotgrid, maxIterations, fitnessMeasure, point, knotPoint, \n    position, aR, BIC, track, out.lm, improveEx, maxKnots, tol, \n    baseModel, radiusIndices, models, interactionTerm, data,  ...","file":"C:/Users/lindesay/Documents/GitHub/MRSea/R/return.reg.spline.fit.2d.R","line_number":164,"end_line_number":164,"character_number":5,"end_character_number":261},{"func":"move.knot_2D(radii, dists, explData, index, fitnessMeasure, BIC, \n    aR, point, response, knotgrid, out.lm, improve, improveEx, \n    track, maxKnots, tol, baseModel, radiusIndices, models, interactionTerm, \n    data, initDisp, cv.opts, basis)","file":"C:/Users/lindesay/Documents/GitHub/MRSea/R/exchange.step_2d.R","line_number":60,"end_line_number":62,"character_number":9,"end_character_number":124},{"func":"fit.thinPlate_2d(fitnessMeasure, dists, tempR, radii, baseModel, \n    tempRadii, models, fitStat, interactionTerm, data, initDisp, \n    cv.opts, basis)","file":"C:/Users/lindesay/Documents/GitHub/MRSea/R/move.knot_2D.R","line_number":27,"end_line_number":27,"character_number":5,"end_character_number":149},{"func":"eval(parse(text = test))","file":"C:/Users/lindesay/Documents/GitHub/MRSea/R/fit.thinplate_2d.R","line_number":41,"end_line_number":41,"character_number":5,"end_character_number":40},{"func":"eval(parse(text = test))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"update(baseModel, . ~ . + LRF.g(radiusIndices, dists, radii, \n    aR))","file":"<text>","line_number":1,"end_line_number":1,"character_number":1,"end_character_number":66},{"func":"update.gamMRSea(baseModel, . ~ . + LRF.g(radiusIndices, dists, \n    radii, aR))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"eval(call, parent.frame())","file":"C:/Users/lindesay/Documents/GitHub/MRSea/R/update.gammrsea.R","line_number":21,"end_line_number":21,"character_number":7,"end_character_number":42},{"func":"eval(call, parent.frame())","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"gamMRSea(formula = response ~ as.factor(season) + as.factor(impact) + \n    LRF.g(radiusIndices, dists, radii, aR) + offset(log(area)), \n    family = \"quasipoisson\", data = data)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"eval(mf, envir = parent.frame())","file":"C:/Users/lindesay/Documents/GitHub/MRSea/R/gamMRSea.R","line_number":42,"end_line_number":42,"character_number":3,"end_character_number":38},{"func":"eval(mf, envir = parent.frame())","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"MRSea::model.frame.gamMRSea(formula = response ~ as.factor(season) + \n    as.factor(impact) + LRF.g(radiusIndices, dists, radii, aR) + \n    offset(log(area)), data = data, drop.unused.levels = TRUE)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"eval(predvars, data, env)","file":"C:/Users/lindesay/Documents/GitHub/MRSea/R/model.frame.gamMRSea.R","line_number":80,"end_line_number":80,"character_number":3,"end_character_number":40},{"func":"eval(predvars, data, env)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"LRF.g(radiusIndices, dists, radii, aR)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0}],"message":"no loop for break/next, jumping to top level"}